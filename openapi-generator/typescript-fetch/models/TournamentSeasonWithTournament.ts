/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Tournament,
    TournamentFromJSON,
    TournamentFromJSONTyped,
    TournamentToJSON,
} from './Tournament';
import {
    TournamentSeason,
    TournamentSeasonFromJSON,
    TournamentSeasonFromJSONTyped,
    TournamentSeasonToJSON,
} from './TournamentSeason';
import {
    TournamentSeasonWithTournamentAllOf,
    TournamentSeasonWithTournamentAllOfFromJSON,
    TournamentSeasonWithTournamentAllOfFromJSONTyped,
    TournamentSeasonWithTournamentAllOfToJSON,
} from './TournamentSeasonWithTournamentAllOf';

/**
 * 
 * @export
 * @interface TournamentSeasonWithTournament
 */
export interface TournamentSeasonWithTournament {
    /**
     * Unique identifier of the object
     * @type {number}
     * @memberof TournamentSeasonWithTournament
     */
    id: number;
    /**
     * Human readable name of the TournamentSeason
     * @type {string}
     * @memberof TournamentSeasonWithTournament
     */
    name: string;
    /**
     * Whether the season is currently running or whether it is finished
     * @type {boolean}
     * @memberof TournamentSeasonWithTournament
     */
    active: boolean;
    /**
     * 
     * @type {Tournament}
     * @memberof TournamentSeasonWithTournament
     */
    tournament: Tournament;
}

export function TournamentSeasonWithTournamentFromJSON(json: any): TournamentSeasonWithTournament {
    return TournamentSeasonWithTournamentFromJSONTyped(json, false);
}

export function TournamentSeasonWithTournamentFromJSONTyped(json: any, ignoreDiscriminator: boolean): TournamentSeasonWithTournament {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'active': json['active'],
        'tournament': TournamentFromJSON(json['tournament']),
    };
}

export function TournamentSeasonWithTournamentToJSON(value?: TournamentSeasonWithTournament | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'active': value.active,
        'tournament': TournamentToJSON(value.tournament),
    };
}

