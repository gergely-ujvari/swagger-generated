/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CardlistStandingDataAllOf,
    CardlistStandingDataAllOfFromJSON,
    CardlistStandingDataAllOfFromJSONTyped,
    CardlistStandingDataAllOfToJSON,
} from './CardlistStandingDataAllOf';
import {
    PartialPerson,
    PartialPersonFromJSON,
    PartialPersonFromJSONTyped,
    PartialPersonToJSON,
} from './PartialPerson';
import {
    PartialTeam,
    PartialTeamFromJSON,
    PartialTeamFromJSONTyped,
    PartialTeamToJSON,
} from './PartialTeam';
import {
    StandingData,
    StandingDataFromJSON,
    StandingDataFromJSONTyped,
    StandingDataToJSON,
} from './StandingData';
import {
    StandingRule,
    StandingRuleFromJSON,
    StandingRuleFromJSONTyped,
    StandingRuleToJSON,
} from './StandingRule';

/**
 * 
 * @export
 * @interface CardlistStandingData
 */
export interface CardlistStandingData {
    /**
     * Position of the team/player in the standing
     * @type {number}
     * @memberof CardlistStandingData
     */
    rank: number;
    /**
     * 
     * @type {PartialTeam}
     * @memberof CardlistStandingData
     */
    team: PartialTeam;
    /**
     * List of applicable rules to the current standing rank
     * @type {Array<StandingRule>}
     * @memberof CardlistStandingData
     */
    rules?: Array<StandingRule>;
    /**
     * 
     * @type {PartialPerson}
     * @memberof CardlistStandingData
     */
    player: PartialPerson;
    /**
     * Number of red cards
     * @type {number}
     * @memberof CardlistStandingData
     */
    redCards: number;
    /**
     * Total number of cards received
     * @type {number}
     * @memberof CardlistStandingData
     */
    totalCards: number;
    /**
     * Total number of yellow cards
     * @type {number}
     * @memberof CardlistStandingData
     */
    yellowCards: number;
    /**
     * Number of times the Player has been booked, with a first yellow card
     * @type {number}
     * @memberof CardlistStandingData
     */
    firstYellowCards: number;
}

export function CardlistStandingDataFromJSON(json: any): CardlistStandingData {
    return CardlistStandingDataFromJSONTyped(json, false);
}

export function CardlistStandingDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): CardlistStandingData {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'rank': json['rank'],
        'team': PartialTeamFromJSON(json['team']),
        'rules': !exists(json, 'rules') ? undefined : ((json['rules'] as Array<any>).map(StandingRuleFromJSON)),
        'player': PartialPersonFromJSON(json['player']),
        'redCards': json['red_cards'],
        'totalCards': json['total_cards'],
        'yellowCards': json['yellow_cards'],
        'firstYellowCards': json['first_yellow_cards'],
    };
}

export function CardlistStandingDataToJSON(value?: CardlistStandingData | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'rank': value.rank,
        'team': PartialTeamToJSON(value.team),
        'rules': value.rules === undefined ? undefined : ((value.rules as Array<any>).map(StandingRuleToJSON)),
        'player': PartialPersonToJSON(value.player),
        'red_cards': value.redCards,
        'total_cards': value.totalCards,
        'yellow_cards': value.yellowCards,
        'first_yellow_cards': value.firstYellowCards,
    };
}

