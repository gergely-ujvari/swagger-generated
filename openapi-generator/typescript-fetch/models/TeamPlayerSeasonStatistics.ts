/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    TeamPlayerSeasonStatisticsAllOf,
    TeamPlayerSeasonStatisticsAllOfFromJSON,
    TeamPlayerSeasonStatisticsAllOfFromJSONTyped,
    TeamPlayerSeasonStatisticsAllOfToJSON,
} from './TeamPlayerSeasonStatisticsAllOf';
import {
    TeamPlayerStatistics,
    TeamPlayerStatisticsFromJSON,
    TeamPlayerStatisticsFromJSONTyped,
    TeamPlayerStatisticsToJSON,
} from './TeamPlayerStatistics';
import {
    Tournament,
    TournamentFromJSON,
    TournamentFromJSONTyped,
    TournamentToJSON,
} from './Tournament';
import {
    TournamentSeasonWithTournament,
    TournamentSeasonWithTournamentFromJSON,
    TournamentSeasonWithTournamentFromJSONTyped,
    TournamentSeasonWithTournamentToJSON,
} from './TournamentSeasonWithTournament';

/**
 * 
 * @export
 * @interface TeamPlayerSeasonStatistics
 */
export interface TeamPlayerSeasonStatistics {
    /**
     * Unique identifier of the object
     * @type {number}
     * @memberof TeamPlayerSeasonStatistics
     */
    id: number;
    /**
     * Human readable name of the TournamentSeason
     * @type {string}
     * @memberof TeamPlayerSeasonStatistics
     */
    name: string;
    /**
     * Whether the season is currently running or whether it is finished
     * @type {boolean}
     * @memberof TeamPlayerSeasonStatistics
     */
    active: boolean;
    /**
     * 
     * @type {Tournament}
     * @memberof TeamPlayerSeasonStatistics
     */
    tournament: Tournament;
    /**
     * 
     * @type {Array<TeamPlayerStatistics>}
     * @memberof TeamPlayerSeasonStatistics
     */
    items?: Array<TeamPlayerStatistics>;
}

export function TeamPlayerSeasonStatisticsFromJSON(json: any): TeamPlayerSeasonStatistics {
    return TeamPlayerSeasonStatisticsFromJSONTyped(json, false);
}

export function TeamPlayerSeasonStatisticsFromJSONTyped(json: any, ignoreDiscriminator: boolean): TeamPlayerSeasonStatistics {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'active': json['active'],
        'tournament': TournamentFromJSON(json['tournament']),
        'items': !exists(json, 'items') ? undefined : ((json['items'] as Array<any>).map(TeamPlayerStatisticsFromJSON)),
    };
}

export function TeamPlayerSeasonStatisticsToJSON(value?: TeamPlayerSeasonStatistics | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'active': value.active,
        'tournament': TournamentToJSON(value.tournament),
        'items': value.items === undefined ? undefined : ((value.items as Array<any>).map(TeamPlayerStatisticsToJSON)),
    };
}

