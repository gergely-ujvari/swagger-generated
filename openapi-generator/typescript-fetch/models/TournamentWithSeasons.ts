/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Country,
    CountryFromJSON,
    CountryFromJSONTyped,
    CountryToJSON,
} from './Country';
import {
    Tournament,
    TournamentFromJSON,
    TournamentFromJSONTyped,
    TournamentToJSON,
} from './Tournament';
import {
    TournamentSeason,
    TournamentSeasonFromJSON,
    TournamentSeasonFromJSONTyped,
    TournamentSeasonToJSON,
} from './TournamentSeason';
import {
    TournamentWithSeasonsAllOf,
    TournamentWithSeasonsAllOfFromJSON,
    TournamentWithSeasonsAllOfFromJSONTyped,
    TournamentWithSeasonsAllOfToJSON,
} from './TournamentWithSeasonsAllOf';

/**
 * 
 * @export
 * @interface TournamentWithSeasons
 */
export interface TournamentWithSeasons {
    /**
     * Unique Resource identifier of the Tournament
     * @type {number}
     * @memberof TournamentWithSeasons
     */
    id: number;
    /**
     * Human readable name of the Tournament
     * @type {string}
     * @memberof TournamentWithSeasons
     */
    name: string;
    /**
     * 
     * @type {Country}
     * @memberof TournamentWithSeasons
     */
    country: Country;
    /**
     * Whether or not the Tournament is a regional league such as the La Liga, A PFG, EPL.
     * @type {boolean}
     * @memberof TournamentWithSeasons
     */
    regionalLeague?: boolean;
    /**
     * Represents the order position in a custom client based sorted list
     * @type {number}
     * @memberof TournamentWithSeasons
     */
    clientSortorder?: number;
    /**
     * 
     * @type {string}
     * @memberof TournamentWithSeasons
     */
    urlLogo?: string;
    /**
     * Shows if the tournament is Cup or a League
     * @type {string}
     * @memberof TournamentWithSeasons
     */
    type?: TournamentWithSeasonsTypeEnum;
    /**
     * Shows if the the teams in the tournament are Male or Female
     * @type {string}
     * @memberof TournamentWithSeasons
     */
    gender?: TournamentWithSeasonsGenderEnum;
    /**
     * Shows if the tournament is Regional or International
     * @type {string}
     * @memberof TournamentWithSeasons
     */
    region?: TournamentWithSeasonsRegionEnum;
    /**
     * List of seasons available for the Tournament
     * @type {Array<TournamentSeason>}
     * @memberof TournamentWithSeasons
     */
    seasons: Array<TournamentSeason>;
}


/**
 * @export
 */
export const TournamentWithSeasonsTypeEnum = {
    Cup: 'CUP',
    League: 'LEAGUE'
} as const;
export type TournamentWithSeasonsTypeEnum = typeof TournamentWithSeasonsTypeEnum[keyof typeof TournamentWithSeasonsTypeEnum];

/**
 * @export
 */
export const TournamentWithSeasonsGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE'
} as const;
export type TournamentWithSeasonsGenderEnum = typeof TournamentWithSeasonsGenderEnum[keyof typeof TournamentWithSeasonsGenderEnum];

/**
 * @export
 */
export const TournamentWithSeasonsRegionEnum = {
    Domestic: 'DOMESTIC',
    International: 'INTERNATIONAL'
} as const;
export type TournamentWithSeasonsRegionEnum = typeof TournamentWithSeasonsRegionEnum[keyof typeof TournamentWithSeasonsRegionEnum];


export function TournamentWithSeasonsFromJSON(json: any): TournamentWithSeasons {
    return TournamentWithSeasonsFromJSONTyped(json, false);
}

export function TournamentWithSeasonsFromJSONTyped(json: any, ignoreDiscriminator: boolean): TournamentWithSeasons {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'country': CountryFromJSON(json['country']),
        'regionalLeague': !exists(json, 'regional_league') ? undefined : json['regional_league'],
        'clientSortorder': !exists(json, 'client_sortorder') ? undefined : json['client_sortorder'],
        'urlLogo': !exists(json, 'url_logo') ? undefined : json['url_logo'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'gender': !exists(json, 'gender') ? undefined : json['gender'],
        'region': !exists(json, 'region') ? undefined : json['region'],
        'seasons': ((json['seasons'] as Array<any>).map(TournamentSeasonFromJSON)),
    };
}

export function TournamentWithSeasonsToJSON(value?: TournamentWithSeasons | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'country': CountryToJSON(value.country),
        'regional_league': value.regionalLeague,
        'client_sortorder': value.clientSortorder,
        'url_logo': value.urlLogo,
        'type': value.type,
        'gender': value.gender,
        'region': value.region,
        'seasons': ((value.seasons as Array<any>).map(TournamentSeasonToJSON)),
    };
}

