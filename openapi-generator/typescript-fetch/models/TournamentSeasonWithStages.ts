/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Tournament,
    TournamentFromJSON,
    TournamentFromJSONTyped,
    TournamentToJSON,
} from './Tournament';
import {
    TournamentSeasonStage,
    TournamentSeasonStageFromJSON,
    TournamentSeasonStageFromJSONTyped,
    TournamentSeasonStageToJSON,
} from './TournamentSeasonStage';
import {
    TournamentSeasonWithStagesAllOf,
    TournamentSeasonWithStagesAllOfFromJSON,
    TournamentSeasonWithStagesAllOfFromJSONTyped,
    TournamentSeasonWithStagesAllOfToJSON,
} from './TournamentSeasonWithStagesAllOf';
import {
    TournamentSeasonWithTournament,
    TournamentSeasonWithTournamentFromJSON,
    TournamentSeasonWithTournamentFromJSONTyped,
    TournamentSeasonWithTournamentToJSON,
} from './TournamentSeasonWithTournament';

/**
 * 
 * @export
 * @interface TournamentSeasonWithStages
 */
export interface TournamentSeasonWithStages {
    /**
     * Unique identifier of the object
     * @type {number}
     * @memberof TournamentSeasonWithStages
     */
    id: number;
    /**
     * Human readable name of the TournamentSeason
     * @type {string}
     * @memberof TournamentSeasonWithStages
     */
    name: string;
    /**
     * Whether the season is currently running or whether it is finished
     * @type {boolean}
     * @memberof TournamentSeasonWithStages
     */
    active: boolean;
    /**
     * 
     * @type {Tournament}
     * @memberof TournamentSeasonWithStages
     */
    tournament: Tournament;
    /**
     * List of stages which take place during the TournamentSeason. If the parent Tournament has regional_league = true, this will usually be one stage with cup = false.
     * @type {Array<TournamentSeasonStage>}
     * @memberof TournamentSeasonWithStages
     */
    stages: Array<TournamentSeasonStage>;
}

export function TournamentSeasonWithStagesFromJSON(json: any): TournamentSeasonWithStages {
    return TournamentSeasonWithStagesFromJSONTyped(json, false);
}

export function TournamentSeasonWithStagesFromJSONTyped(json: any, ignoreDiscriminator: boolean): TournamentSeasonWithStages {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'active': json['active'],
        'tournament': TournamentFromJSON(json['tournament']),
        'stages': ((json['stages'] as Array<any>).map(TournamentSeasonStageFromJSON)),
    };
}

export function TournamentSeasonWithStagesToJSON(value?: TournamentSeasonWithStages | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'active': value.active,
        'tournament': TournamentToJSON(value.tournament),
        'stages': ((value.stages as Array<any>).map(TournamentSeasonStageToJSON)),
    };
}

