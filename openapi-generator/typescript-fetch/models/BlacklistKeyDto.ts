/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface BlacklistKeyDto
 */
export interface BlacklistKeyDto {
    /**
     * 
     * @type {string}
     * @memberof BlacklistKeyDto
     */
    type?: BlacklistKeyDtoTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof BlacklistKeyDto
     */
    entity?: BlacklistKeyDtoEntityEnum;
    /**
     * 
     * @type {string}
     * @memberof BlacklistKeyDto
     */
    entityId?: string;
    /**
     * 
     * @type {string}
     * @memberof BlacklistKeyDto
     */
    context?: string;
}


/**
 * @export
 */
export const BlacklistKeyDtoTypeEnum = {
    Translation: 'TRANSLATION',
    Asset: 'ASSET',
    Relation: 'RELATION',
    Entity: 'ENTITY'
} as const;
export type BlacklistKeyDtoTypeEnum = typeof BlacklistKeyDtoTypeEnum[keyof typeof BlacklistKeyDtoTypeEnum];

/**
 * @export
 */
export const BlacklistKeyDtoEntityEnum = {
    Team: 'TEAM',
    Tournament: 'TOURNAMENT',
    Season: 'SEASON',
    Group: 'GROUP',
    Stage: 'STAGE',
    Country: 'COUNTRY',
    Player: 'PLAYER',
    Coach: 'COACH',
    LineupPlayerType: 'LINEUP_PLAYER_TYPE',
    MatchStatus: 'MATCH_STATUS',
    Venue: 'VENUE',
    Referee: 'REFEREE',
    City: 'CITY',
    President: 'PRESIDENT',
    Lineup: 'LINEUP',
    Match: 'MATCH',
    Asset: 'ASSET',
    StandingRule: 'STANDING_RULE',
    RoundType: 'ROUND_TYPE'
} as const;
export type BlacklistKeyDtoEntityEnum = typeof BlacklistKeyDtoEntityEnum[keyof typeof BlacklistKeyDtoEntityEnum];


export function BlacklistKeyDtoFromJSON(json: any): BlacklistKeyDto {
    return BlacklistKeyDtoFromJSONTyped(json, false);
}

export function BlacklistKeyDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlacklistKeyDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : json['type'],
        'entity': !exists(json, 'entity') ? undefined : json['entity'],
        'entityId': !exists(json, 'entity_id') ? undefined : json['entity_id'],
        'context': !exists(json, 'context') ? undefined : json['context'],
    };
}

export function BlacklistKeyDtoToJSON(value?: BlacklistKeyDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'entity': value.entity,
        'entity_id': value.entityId,
        'context': value.context,
    };
}

