/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    V2Player,
    V2PlayerFromJSON,
    V2PlayerFromJSONTyped,
    V2PlayerToJSON,
} from './V2Player';
import {
    V2TeamScore,
    V2TeamScoreFromJSON,
    V2TeamScoreFromJSONTyped,
    V2TeamScoreToJSON,
} from './V2TeamScore';

/**
 * 
 * @export
 * @interface V2MatchEvent
 */
export interface V2MatchEvent {
    /**
     * 
     * @type {string}
     * @memberof V2MatchEvent
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof V2MatchEvent
     */
    matchId?: string;
    /**
     * 
     * @type {string}
     * @memberof V2MatchEvent
     */
    typeCode?: V2MatchEventTypeCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof V2MatchEvent
     */
    teamPosition?: V2MatchEventTeamPositionEnum;
    /**
     * 
     * @type {number}
     * @memberof V2MatchEvent
     */
    minute?: number;
    /**
     * 
     * @type {string}
     * @memberof V2MatchEvent
     */
    teamId?: string;
    /**
     * 
     * @type {V2Player}
     * @memberof V2MatchEvent
     */
    primaryPlayer?: V2Player;
    /**
     * 
     * @type {V2Player}
     * @memberof V2MatchEvent
     */
    secondaryPlayer?: V2Player;
    /**
     * 
     * @type {V2TeamScore}
     * @memberof V2MatchEvent
     */
    score?: V2TeamScore;
}


/**
 * @export
 */
export const V2MatchEventTypeCodeEnum = {
    YellowRedCard: 'YELLOW_RED_CARD',
    PenaltyShootoutMissed: 'PENALTY_SHOOTOUT_MISSED',
    PenaltyShootoutScored: 'PENALTY_SHOOTOUT_SCORED',
    Substitution: 'SUBSTITUTION',
    Goal: 'GOAL',
    RedCard: 'RED_CARD',
    PenaltyMiss: 'PENALTY_MISS',
    YellowCard: 'YELLOW_CARD',
    Assist: 'ASSIST',
    PenaltyGoal: 'PENALTY_GOAL',
    OwnGoal: 'OWN_GOAL'
} as const;
export type V2MatchEventTypeCodeEnum = typeof V2MatchEventTypeCodeEnum[keyof typeof V2MatchEventTypeCodeEnum];

/**
 * @export
 */
export const V2MatchEventTeamPositionEnum = {
    Home: 'HOME',
    Away: 'AWAY'
} as const;
export type V2MatchEventTeamPositionEnum = typeof V2MatchEventTeamPositionEnum[keyof typeof V2MatchEventTeamPositionEnum];


export function V2MatchEventFromJSON(json: any): V2MatchEvent {
    return V2MatchEventFromJSONTyped(json, false);
}

export function V2MatchEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): V2MatchEvent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'matchId': !exists(json, 'match_id') ? undefined : json['match_id'],
        'typeCode': !exists(json, 'type_code') ? undefined : json['type_code'],
        'teamPosition': !exists(json, 'team_position') ? undefined : json['team_position'],
        'minute': !exists(json, 'minute') ? undefined : json['minute'],
        'teamId': !exists(json, 'team_id') ? undefined : json['team_id'],
        'primaryPlayer': !exists(json, 'primary_player') ? undefined : V2PlayerFromJSON(json['primary_player']),
        'secondaryPlayer': !exists(json, 'secondary_player') ? undefined : V2PlayerFromJSON(json['secondary_player']),
        'score': !exists(json, 'score') ? undefined : V2TeamScoreFromJSON(json['score']),
    };
}

export function V2MatchEventToJSON(value?: V2MatchEvent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'match_id': value.matchId,
        'type_code': value.typeCode,
        'team_position': value.teamPosition,
        'minute': value.minute,
        'team_id': value.teamId,
        'primary_player': V2PlayerToJSON(value.primaryPlayer),
        'secondary_player': V2PlayerToJSON(value.secondaryPlayer),
        'score': V2TeamScoreToJSON(value.score),
    };
}

