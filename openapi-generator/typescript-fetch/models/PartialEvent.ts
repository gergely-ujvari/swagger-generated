/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EventStatus,
    EventStatusFromJSON,
    EventStatusFromJSONTyped,
    EventStatusToJSON,
} from './EventStatus';
import {
    PartialTeam,
    PartialTeamFromJSON,
    PartialTeamFromJSONTyped,
    PartialTeamToJSON,
} from './PartialTeam';

/**
 * 
 * @export
 * @interface PartialEvent
 */
export interface PartialEvent {
    /**
     * Unique identifier
     * @type {number}
     * @memberof PartialEvent
     */
    id: number;
    /**
     * 
     * @type {EventStatus}
     * @memberof PartialEvent
     */
    eventStatus: EventStatus;
    /**
     * Timestamp when the event is scheduled to start
     * @type {Date}
     * @memberof PartialEvent
     */
    startTime: Date;
    /**
     * Goals scored by the home team
     * @type {number}
     * @memberof PartialEvent
     */
    goalHome: number;
    /**
     * Goals scored by the away team
     * @type {number}
     * @memberof PartialEvent
     */
    goalAway: number;
    /**
     * Penalties scored by the home team. Available only if the game goes to penalty shootouts
     * @type {number}
     * @memberof PartialEvent
     */
    penaltyHome?: number;
    /**
     * Penalties scored by the away team. Available only if the game goes to penalty shootouts
     * @type {number}
     * @memberof PartialEvent
     */
    penaltyAway?: number;
    /**
     * Goals scored by home team over 1 or more legs. Available only if the tie has mutliple legs
     * @type {number}
     * @memberof PartialEvent
     */
    aggHome?: number;
    /**
     * Goals scored by home team over 1 or more legs. Available only if the tie has mutliple legs
     * @type {number}
     * @memberof PartialEvent
     */
    aggAway?: number;
    /**
     * 
     * @type {PartialTeam}
     * @memberof PartialEvent
     */
    homeTeam: PartialTeam;
    /**
     * 
     * @type {PartialTeam}
     * @memberof PartialEvent
     */
    awayTeam: PartialTeam;
}

export function PartialEventFromJSON(json: any): PartialEvent {
    return PartialEventFromJSONTyped(json, false);
}

export function PartialEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): PartialEvent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'eventStatus': EventStatusFromJSON(json['event_status']),
        'startTime': (new Date(json['start_time'])),
        'goalHome': json['goal_home'],
        'goalAway': json['goal_away'],
        'penaltyHome': !exists(json, 'penalty_home') ? undefined : json['penalty_home'],
        'penaltyAway': !exists(json, 'penalty_away') ? undefined : json['penalty_away'],
        'aggHome': !exists(json, 'agg_home') ? undefined : json['agg_home'],
        'aggAway': !exists(json, 'agg_away') ? undefined : json['agg_away'],
        'homeTeam': PartialTeamFromJSON(json['home_team']),
        'awayTeam': PartialTeamFromJSON(json['away_team']),
    };
}

export function PartialEventToJSON(value?: PartialEvent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'event_status': EventStatusToJSON(value.eventStatus),
        'start_time': (value.startTime.toISOString()),
        'goal_home': value.goalHome,
        'goal_away': value.goalAway,
        'penalty_home': value.penaltyHome,
        'penalty_away': value.penaltyAway,
        'agg_home': value.aggHome,
        'agg_away': value.aggAway,
        'home_team': PartialTeamToJSON(value.homeTeam),
        'away_team': PartialTeamToJSON(value.awayTeam),
    };
}

