/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Country,
    CountryFromJSON,
    CountryFromJSONTyped,
    CountryToJSON,
} from './Country';
import {
    LeagueStandingData,
    LeagueStandingDataFromJSON,
    LeagueStandingDataFromJSONTyped,
    LeagueStandingDataToJSON,
} from './LeagueStandingData';
import {
    Round,
    RoundFromJSON,
    RoundFromJSONTyped,
    RoundToJSON,
} from './Round';
import {
    StageGroupWithStanding,
    StageGroupWithStandingFromJSON,
    StageGroupWithStandingFromJSONTyped,
    StageGroupWithStandingToJSON,
} from './StageGroupWithStanding';
import {
    TournamentSeasonStage,
    TournamentSeasonStageFromJSON,
    TournamentSeasonStageFromJSONTyped,
    TournamentSeasonStageToJSON,
} from './TournamentSeasonStage';
import {
    TournamentSeasonStageWithStandingGroupsAllOf,
    TournamentSeasonStageWithStandingGroupsAllOfFromJSON,
    TournamentSeasonStageWithStandingGroupsAllOfFromJSONTyped,
    TournamentSeasonStageWithStandingGroupsAllOfToJSON,
} from './TournamentSeasonStageWithStandingGroupsAllOf';

/**
 * 
 * @export
 * @interface TournamentSeasonStageWithStandingGroups
 */
export interface TournamentSeasonStageWithStandingGroups {
    /**
     * Unique identifier
     * @type {number}
     * @memberof TournamentSeasonStageWithStandingGroups
     */
    id?: number;
    /**
     * Human readable name of the TournamentSeasonStage
     * @type {string}
     * @memberof TournamentSeasonStageWithStandingGroups
     */
    name?: string;
    /**
     * Whether the stage is a cup such as Champions League Knockout stage, World Cup Final stages, etc
     * @type {boolean}
     * @memberof TournamentSeasonStageWithStandingGroups
     */
    cup?: boolean;
    /**
     * Id of the TournamentSeason in which the stage is part of
     * @type {number}
     * @memberof TournamentSeasonStageWithStandingGroups
     */
    tournamentSeasonId?: number;
    /**
     * Id of the Tournament in whicth the stage is part of
     * @type {number}
     * @memberof TournamentSeasonStageWithStandingGroups
     */
    tournamentId?: number;
    /**
     * 
     * @type {Country}
     * @memberof TournamentSeasonStageWithStandingGroups
     */
    country?: Country;
    /**
     * Indicates which confederation the stage is part of (for World Cup qualif.)
     * @type {string}
     * @memberof TournamentSeasonStageWithStandingGroups
     */
    confederation?: string;
    /**
     * Date when the first game of the stage is held
     * @type {Date}
     * @memberof TournamentSeasonStageWithStandingGroups
     */
    startDate?: Date;
    /**
     * Date when the final game of the stage is held
     * @type {Date}
     * @memberof TournamentSeasonStageWithStandingGroups
     */
    endDate?: Date;
    /**
     * Whether the stage is a qualification stage to a main Tournrament (Champions League Qualification)
     * @type {boolean}
     * @memberof TournamentSeasonStageWithStandingGroups
     */
    qualification?: boolean;
    /**
     * Whether the API has live scores for the stage
     * @type {boolean}
     * @memberof TournamentSeasonStageWithStandingGroups
     */
    live?: boolean;
    /**
     * Number of groups in the stage. Only available if the stage has groups (Champions League Group Stage)
     * @type {number}
     * @memberof TournamentSeasonStageWithStandingGroups
     */
    stageGroups?: number;
    /**
     * League standing data if available and if cup = false
     * @type {Array<LeagueStandingData>}
     * @memberof TournamentSeasonStageWithStandingGroups
     */
    standing?: Array<LeagueStandingData>;
    /**
     * List of rounds in the Stage if cup = true
     * @type {Array<Round>}
     * @memberof TournamentSeasonStageWithStandingGroups
     */
    rounds?: Array<Round>;
    /**
     * List of StageGroup objects in the TournamentSeasonStage. Available if the property stage_groups exists
     * @type {Array<StageGroupWithStanding>}
     * @memberof TournamentSeasonStageWithStandingGroups
     */
    groups?: Array<StageGroupWithStanding>;
}

export function TournamentSeasonStageWithStandingGroupsFromJSON(json: any): TournamentSeasonStageWithStandingGroups {
    return TournamentSeasonStageWithStandingGroupsFromJSONTyped(json, false);
}

export function TournamentSeasonStageWithStandingGroupsFromJSONTyped(json: any, ignoreDiscriminator: boolean): TournamentSeasonStageWithStandingGroups {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'cup': !exists(json, 'cup') ? undefined : json['cup'],
        'tournamentSeasonId': !exists(json, 'tournament_season_id') ? undefined : json['tournament_season_id'],
        'tournamentId': !exists(json, 'tournament_id') ? undefined : json['tournament_id'],
        'country': !exists(json, 'country') ? undefined : CountryFromJSON(json['country']),
        'confederation': !exists(json, 'confederation') ? undefined : json['confederation'],
        'startDate': !exists(json, 'start_date') ? undefined : (new Date(json['start_date'])),
        'endDate': !exists(json, 'end_date') ? undefined : (new Date(json['end_date'])),
        'qualification': !exists(json, 'qualification') ? undefined : json['qualification'],
        'live': !exists(json, 'live') ? undefined : json['live'],
        'stageGroups': !exists(json, 'stage_groups') ? undefined : json['stage_groups'],
        'standing': !exists(json, 'standing') ? undefined : ((json['standing'] as Array<any>).map(LeagueStandingDataFromJSON)),
        'rounds': !exists(json, 'rounds') ? undefined : ((json['rounds'] as Array<any>).map(RoundFromJSON)),
        'groups': !exists(json, 'groups') ? undefined : ((json['groups'] as Array<any>).map(StageGroupWithStandingFromJSON)),
    };
}

export function TournamentSeasonStageWithStandingGroupsToJSON(value?: TournamentSeasonStageWithStandingGroups | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'cup': value.cup,
        'tournament_season_id': value.tournamentSeasonId,
        'tournament_id': value.tournamentId,
        'country': CountryToJSON(value.country),
        'confederation': value.confederation,
        'start_date': value.startDate === undefined ? undefined : (value.startDate.toISOString().substr(0,10)),
        'end_date': value.endDate === undefined ? undefined : (value.endDate.toISOString().substr(0,10)),
        'qualification': value.qualification,
        'live': value.live,
        'stage_groups': value.stageGroups,
        'standing': value.standing === undefined ? undefined : ((value.standing as Array<any>).map(LeagueStandingDataToJSON)),
        'rounds': value.rounds === undefined ? undefined : ((value.rounds as Array<any>).map(RoundToJSON)),
        'groups': value.groups === undefined ? undefined : ((value.groups as Array<any>).map(StageGroupWithStandingToJSON)),
    };
}

