/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    PartialPerson,
    PartialPersonFromJSON,
    PartialPersonFromJSONTyped,
    PartialPersonToJSON,
} from './PartialPerson';
import {
    PartialTeam,
    PartialTeamFromJSON,
    PartialTeamFromJSONTyped,
    PartialTeamToJSON,
} from './PartialTeam';
import {
    PlayerStatsExtended,
    PlayerStatsExtendedFromJSON,
    PlayerStatsExtendedFromJSONTyped,
    PlayerStatsExtendedToJSON,
} from './PlayerStatsExtended';
import {
    TournamentSeasonWithTournament,
    TournamentSeasonWithTournamentFromJSON,
    TournamentSeasonWithTournamentFromJSONTyped,
    TournamentSeasonWithTournamentToJSON,
} from './TournamentSeasonWithTournament';

/**
 * 
 * @export
 * @interface PlayerStatistics
 */
export interface PlayerStatistics {
    /**
     * 
     * @type {TournamentSeasonWithTournament}
     * @memberof PlayerStatistics
     */
    tournamentSeason?: TournamentSeasonWithTournament;
    /**
     * 
     * @type {PartialPerson}
     * @memberof PlayerStatistics
     */
    player?: PartialPerson;
    /**
     * 
     * @type {PartialTeam}
     * @memberof PlayerStatistics
     */
    team?: PartialTeam;
    /**
     * Shirt number of the player during the TournamentSeason
     * @type {number}
     * @memberof PlayerStatistics
     */
    shirtNumber?: number;
    /**
     * Position of the player during the TournamentSeason
     * @type {string}
     * @memberof PlayerStatistics
     */
    position?: string;
    /**
     * Total goals scored
     * @type {number}
     * @memberof PlayerStatistics
     */
    goals: number;
    /**
     * Total games played
     * @type {number}
     * @memberof PlayerStatistics
     */
    played: number;
    /**
     * Total minutes played
     * @type {number}
     * @memberof PlayerStatistics
     */
    minutes: number;
    /**
     * Number of red cards
     * @type {number}
     * @memberof PlayerStatistics
     */
    redCards: number;
    /**
     * Number of yellow cards
     * @type {number}
     * @memberof PlayerStatistics
     */
    yellowCards: number;
    /**
     * Number of assists
     * @type {number}
     * @memberof PlayerStatistics
     */
    assists?: number;
    /**
     * Goals conceded (Goalkeeper)
     * @type {number}
     * @memberof PlayerStatistics
     */
    conceded?: number;
    /**
     * Games started as a substitute
     * @type {number}
     * @memberof PlayerStatistics
     */
    substitute?: number;
    /**
     * Games without allowing a goal (Goalkeeper)
     * @type {number}
     * @memberof PlayerStatistics
     */
    cleansheets?: number;
    /**
     * Games where the player has come on
     * @type {number}
     * @memberof PlayerStatistics
     */
    substituteIn?: number;
    /**
     * Games where the player has come off
     * @type {number}
     * @memberof PlayerStatistics
     */
    substituteOut?: number;
    /**
     * Minutes played after coming on as a substitute
     * @type {number}
     * @memberof PlayerStatistics
     */
    minutesSubstitute?: number;
}

export function PlayerStatisticsFromJSON(json: any): PlayerStatistics {
    return PlayerStatisticsFromJSONTyped(json, false);
}

export function PlayerStatisticsFromJSONTyped(json: any, ignoreDiscriminator: boolean): PlayerStatistics {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'tournamentSeason': !exists(json, 'tournament_season') ? undefined : TournamentSeasonWithTournamentFromJSON(json['tournament_season']),
        'player': !exists(json, 'player') ? undefined : PartialPersonFromJSON(json['player']),
        'team': !exists(json, 'team') ? undefined : PartialTeamFromJSON(json['team']),
        'shirtNumber': !exists(json, 'shirtNumber') ? undefined : json['shirtNumber'],
        'position': !exists(json, 'position') ? undefined : json['position'],
        'goals': json['goals'],
        'played': json['played'],
        'minutes': json['minutes'],
        'redCards': json['red_cards'],
        'yellowCards': json['yellow_cards'],
        'assists': !exists(json, 'assists') ? undefined : json['assists'],
        'conceded': !exists(json, 'conceded') ? undefined : json['conceded'],
        'substitute': !exists(json, 'substitute') ? undefined : json['substitute'],
        'cleansheets': !exists(json, 'cleansheets') ? undefined : json['cleansheets'],
        'substituteIn': !exists(json, 'substitute_in') ? undefined : json['substitute_in'],
        'substituteOut': !exists(json, 'substitute_out') ? undefined : json['substitute_out'],
        'minutesSubstitute': !exists(json, 'minutes_substitute') ? undefined : json['minutes_substitute'],
    };
}

export function PlayerStatisticsToJSON(value?: PlayerStatistics | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'tournament_season': TournamentSeasonWithTournamentToJSON(value.tournamentSeason),
        'player': PartialPersonToJSON(value.player),
        'team': PartialTeamToJSON(value.team),
        'shirtNumber': value.shirtNumber,
        'position': value.position,
        'goals': value.goals,
        'played': value.played,
        'minutes': value.minutes,
        'red_cards': value.redCards,
        'yellow_cards': value.yellowCards,
        'assists': value.assists,
        'conceded': value.conceded,
        'substitute': value.substitute,
        'cleansheets': value.cleansheets,
        'substitute_in': value.substituteIn,
        'substitute_out': value.substituteOut,
        'minutes_substitute': value.minutesSubstitute,
    };
}

