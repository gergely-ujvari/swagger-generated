/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PartialTeam
 */
export interface PartialTeam {
    /**
     * Whether the team is a football club(Barcelona) or national team(Spain)
     * @type {boolean}
     * @memberof PartialTeam
     */
    national?: boolean;
    /**
     * Unique identifier of the Team within the system
     * @type {number}
     * @memberof PartialTeam
     */
    id: number;
    /**
     * Human readable name of the team
     * @type {string}
     * @memberof PartialTeam
     */
    name: string;
    /**
     * 3 character name of team
     * @type {string}
     * @memberof PartialTeam
     */
    threeLetterCode?: string;
    /**
     * Manually inserted short name of team
     * @type {string}
     * @memberof PartialTeam
     */
    shortName?: string;
    /**
     * If present and = true, the team can be one of two teams. This occurs in cup competitions when some games are still not played
     * @type {boolean}
     * @memberof PartialTeam
     */
    undecided?: boolean;
    /**
     * Team gender, MALE, FEMALE or null
     * @type {string}
     * @memberof PartialTeam
     */
    gender?: PartialTeamGenderEnum;
    /**
     * 
     * @type {string}
     * @memberof PartialTeam
     */
    urlLogo?: string;
    /**
     * 
     * @type {string}
     * @memberof PartialTeam
     */
    type?: PartialTeamTypeEnum;
}


/**
 * @export
 */
export const PartialTeamGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE'
} as const;
export type PartialTeamGenderEnum = typeof PartialTeamGenderEnum[keyof typeof PartialTeamGenderEnum];

/**
 * @export
 */
export const PartialTeamTypeEnum = {
    Placeholder: 'placeholder',
    Club: 'club',
    National: 'national'
} as const;
export type PartialTeamTypeEnum = typeof PartialTeamTypeEnum[keyof typeof PartialTeamTypeEnum];


export function PartialTeamFromJSON(json: any): PartialTeam {
    return PartialTeamFromJSONTyped(json, false);
}

export function PartialTeamFromJSONTyped(json: any, ignoreDiscriminator: boolean): PartialTeam {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'national': !exists(json, 'national') ? undefined : json['national'],
        'id': json['id'],
        'name': json['name'],
        'threeLetterCode': !exists(json, 'threeLetterCode') ? undefined : json['threeLetterCode'],
        'shortName': !exists(json, 'shortName') ? undefined : json['shortName'],
        'undecided': !exists(json, 'undecided') ? undefined : json['undecided'],
        'gender': !exists(json, 'gender') ? undefined : json['gender'],
        'urlLogo': !exists(json, 'url_logo') ? undefined : json['url_logo'],
        'type': !exists(json, 'type') ? undefined : json['type'],
    };
}

export function PartialTeamToJSON(value?: PartialTeam | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'national': value.national,
        'id': value.id,
        'name': value.name,
        'threeLetterCode': value.threeLetterCode,
        'shortName': value.shortName,
        'undecided': value.undecided,
        'gender': value.gender,
        'url_logo': value.urlLogo,
        'type': value.type,
    };
}

