/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    PartialPerson,
    PartialPersonFromJSON,
    PartialPersonFromJSONTyped,
    PartialPersonToJSON,
} from './PartialPerson';

/**
 * 
 * @export
 * @interface EventIncident
 */
export interface EventIncident {
    /**
     * Unique identifier
     * @type {number}
     * @memberof EventIncident
     */
    id: number;
    /**
     * Identifier of the event during which the incident occurred
     * @type {number}
     * @memberof EventIncident
     */
    eventId: number;
    /**
     * The type of incident
     * @type {string}
     * @memberof EventIncident
     */
    type: EventIncidentTypeEnum;
    /**
     * Whether the incident is related to the home or away team. true if home team
     * @type {boolean}
     * @memberof EventIncident
     */
    homeTeam: boolean;
    /**
     * The minute when the incident occured
     * @type {number}
     * @memberof EventIncident
     */
    minute: number;
    /**
     * Id of the team for which the incident is related
     * @type {number}
     * @memberof EventIncident
     */
    teamId?: number;
    /**
     * Updated home team score if the incident changes the scoreline (penalty, goal, own_goal, etc)
     * @type {number}
     * @memberof EventIncident
     */
    goalHome?: number;
    /**
     * Updated away team score  if the incident changes the scoreline (penalty, goal, own_goal, etc)
     * @type {number}
     * @memberof EventIncident
     */
    goalAway?: number;
    /**
     * 
     * @type {PartialPerson}
     * @memberof EventIncident
     */
    player?: PartialPerson;
    /**
     * 
     * @type {PartialPerson}
     * @memberof EventIncident
     */
    relPlayer?: PartialPerson;
    /**
     * Whether the incident has been deleted or not - a disallowed goal for example
     * @type {boolean}
     * @memberof EventIncident
     */
    deleted?: boolean;
    /**
     * If there are multiple incidents with the same minute, this indicates how they are sorted
     * @type {number}
     * @memberof EventIncident
     */
    sortorder?: number;
}


/**
 * @export
 */
export const EventIncidentTypeEnum = {
    PenaltyShootoutScored: 'penalty_shootout_scored',
    YellowCardRed: 'yellow_card_red',
    PenaltyShootoutMissed: 'penalty_shootout_missed',
    Substitution: 'substitution',
    Goal: 'goal',
    RedCard: 'red_card',
    PenaltyMiss: 'penalty_miss',
    YellowCard: 'yellow_card',
    PenaltyGoal: 'penalty_goal',
    OwnGoal: 'own_goal'
} as const;
export type EventIncidentTypeEnum = typeof EventIncidentTypeEnum[keyof typeof EventIncidentTypeEnum];


export function EventIncidentFromJSON(json: any): EventIncident {
    return EventIncidentFromJSONTyped(json, false);
}

export function EventIncidentFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventIncident {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'eventId': json['event_id'],
        'type': json['type'],
        'homeTeam': json['home_team'],
        'minute': json['minute'],
        'teamId': !exists(json, 'team_id') ? undefined : json['team_id'],
        'goalHome': !exists(json, 'goal_home') ? undefined : json['goal_home'],
        'goalAway': !exists(json, 'goal_away') ? undefined : json['goal_away'],
        'player': !exists(json, 'player') ? undefined : PartialPersonFromJSON(json['player']),
        'relPlayer': !exists(json, 'rel_player') ? undefined : PartialPersonFromJSON(json['rel_player']),
        'deleted': !exists(json, 'deleted') ? undefined : json['deleted'],
        'sortorder': !exists(json, 'sortorder') ? undefined : json['sortorder'],
    };
}

export function EventIncidentToJSON(value?: EventIncident | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'event_id': value.eventId,
        'type': value.type,
        'home_team': value.homeTeam,
        'minute': value.minute,
        'team_id': value.teamId,
        'goal_home': value.goalHome,
        'goal_away': value.goalAway,
        'player': PartialPersonToJSON(value.player),
        'rel_player': PartialPersonToJSON(value.relPlayer),
        'deleted': value.deleted,
        'sortorder': value.sortorder,
    };
}

