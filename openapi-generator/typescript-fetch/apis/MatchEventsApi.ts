/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    NotFoundError,
    NotFoundErrorFromJSON,
    NotFoundErrorToJSON,
    V2MatchEventInputWrapper,
    V2MatchEventInputWrapperFromJSON,
    V2MatchEventInputWrapperToJSON,
    V2MatchEventProfile,
    V2MatchEventProfileFromJSON,
    V2MatchEventProfileToJSON,
} from '../models';

export interface V2MatchesIdEventsGetRequest {
    id: string;
    languageCode?: string;
}

export interface V2MatchesIdEventsPutRequest {
    id: string;
    matchEvents: V2MatchEventInputWrapper;
}

/**
 * 
 */
export class MatchEventsApi extends runtime.BaseAPI {

    /**
     * Get match events by match id
     */
    async v2MatchesIdEventsGetRaw(requestParameters: V2MatchesIdEventsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<V2MatchEventProfile>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v2MatchesIdEventsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.languageCode !== undefined) {
            queryParameters['language_code'] = requestParameters.languageCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/matches/{id}/events`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2MatchEventProfileFromJSON(jsonValue));
    }

    /**
     * Get match events by match id
     */
    async v2MatchesIdEventsGet(requestParameters: V2MatchesIdEventsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<V2MatchEventProfile> {
        const response = await this.v2MatchesIdEventsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Replaces all match events with the given input
     */
    async v2MatchesIdEventsPutRaw(requestParameters: V2MatchesIdEventsPutRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<V2MatchEventProfile>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v2MatchesIdEventsPut.');
        }

        if (requestParameters.matchEvents === null || requestParameters.matchEvents === undefined) {
            throw new runtime.RequiredError('matchEvents','Required parameter requestParameters.matchEvents was null or undefined when calling v2MatchesIdEventsPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/matches/{id}/events`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V2MatchEventInputWrapperToJSON(requestParameters.matchEvents),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2MatchEventProfileFromJSON(jsonValue));
    }

    /**
     * Replaces all match events with the given input
     */
    async v2MatchesIdEventsPut(requestParameters: V2MatchesIdEventsPutRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<V2MatchEventProfile> {
        const response = await this.v2MatchesIdEventsPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
