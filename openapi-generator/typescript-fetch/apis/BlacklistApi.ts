/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BlacklistDto,
    BlacklistDtoFromJSON,
    BlacklistDtoToJSON,
    BlacklistKeyDto,
    BlacklistKeyDtoFromJSON,
    BlacklistKeyDtoToJSON,
    NotFoundError,
    NotFoundErrorFromJSON,
    NotFoundErrorToJSON,
} from '../models';

export interface V2BlacklistIdDeleteRequest {
    id: string;
}

export interface V2BlacklistSearchPostRequest {
    blacklistKeys?: Array<BlacklistKeyDto>;
}

/**
 * 
 */
export class BlacklistApi extends runtime.BaseAPI {

    /**
     * Remove blacklist record by id.
     * Remove the specified resource from storage.
     */
    async v2BlacklistIdDeleteRaw(requestParameters: V2BlacklistIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v2BlacklistIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/blacklist/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove blacklist record by id.
     * Remove the specified resource from storage.
     */
    async v2BlacklistIdDelete(requestParameters: V2BlacklistIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.v2BlacklistIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Bulk find in blacklist table and return matching entries by the unique blacklist key.
     */
    async v2BlacklistSearchPostRaw(requestParameters: V2BlacklistSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<BlacklistDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/blacklist/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.blacklistKeys.map(BlacklistKeyDtoToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BlacklistDtoFromJSON));
    }

    /**
     * Bulk find in blacklist table and return matching entries by the unique blacklist key.
     */
    async v2BlacklistSearchPost(requestParameters: V2BlacklistSearchPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<BlacklistDto>> {
        const response = await this.v2BlacklistSearchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
