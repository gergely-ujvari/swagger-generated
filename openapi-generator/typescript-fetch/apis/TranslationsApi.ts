/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    TranslationDto,
    TranslationDtoFromJSON,
    TranslationDtoToJSON,
    TranslationEntityDto,
    TranslationEntityDtoFromJSON,
    TranslationEntityDtoToJSON,
    TranslationKeyDto,
    TranslationKeyDtoFromJSON,
    TranslationKeyDtoToJSON,
} from '../models';

export interface V2TranslationsPostRequest {
    translations?: Array<TranslationDto>;
}

export interface V2TranslationsSearchPostRequest {
    translationKeys?: Array<TranslationKeyDto>;
}

/**
 * 
 */
export class TranslationsApi extends runtime.BaseAPI {

    /**
     * Get all possible translation entities.
     */
    async v2TranslationsEntitiesGetRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<TranslationEntityDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/translations/entities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TranslationEntityDtoFromJSON));
    }

    /**
     * Get all possible translation entities.
     */
    async v2TranslationsEntitiesGet(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<TranslationEntityDto>> {
        const response = await this.v2TranslationsEntitiesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Bulk Upsert translations by primary key
     */
    async v2TranslationsPostRaw(requestParameters: V2TranslationsPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<TranslationDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/translations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.translations.map(TranslationDtoToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TranslationDtoFromJSON(jsonValue));
    }

    /**
     * Bulk Upsert translations by primary key
     */
    async v2TranslationsPost(requestParameters: V2TranslationsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<TranslationDto> {
        const response = await this.v2TranslationsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bulk find in translations table and return matching entries by the unique translation key.
     */
    async v2TranslationsSearchPostRaw(requestParameters: V2TranslationsSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<TranslationDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/translations/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.translationKeys.map(TranslationKeyDtoToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TranslationDtoFromJSON));
    }

    /**
     * Bulk find in translations table and return matching entries by the unique translation key.
     */
    async v2TranslationsSearchPost(requestParameters: V2TranslationsSearchPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<TranslationDto>> {
        const response = await this.v2TranslationsSearchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
