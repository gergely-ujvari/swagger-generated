/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    NotFoundError,
    NotFoundErrorFromJSON,
    NotFoundErrorToJSON,
    RefereeDto,
    RefereeDtoFromJSON,
    RefereeDtoToJSON,
    RefereeEditDto,
    RefereeEditDtoFromJSON,
    RefereeEditDtoToJSON,
    RefereePageDto,
    RefereePageDtoFromJSON,
    RefereePageDtoToJSON,
} from '../models';

export interface V2RefereesGetRequest {
    offset: number;
    limit: number;
    seasonIds?: string;
    languageCode?: string;
}

export interface V2RefereesIdGetRequest {
    id: string;
    languageCode?: string;
}

export interface V2RefereesIdPutRequest {
    id: string;
    referee?: RefereeEditDto;
}

export interface V2RefereesPostRequest {
    referee?: RefereeEditDto;
}

/**
 * 
 */
export class RefereesApi extends runtime.BaseAPI {

    /**
     * List referees with offset and limit parameters
     */
    async v2RefereesGetRaw(requestParameters: V2RefereesGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RefereePageDto>> {
        if (requestParameters.offset === null || requestParameters.offset === undefined) {
            throw new runtime.RequiredError('offset','Required parameter requestParameters.offset was null or undefined when calling v2RefereesGet.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling v2RefereesGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.seasonIds !== undefined) {
            queryParameters['season_ids'] = requestParameters.seasonIds;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.languageCode !== undefined) {
            queryParameters['language_code'] = requestParameters.languageCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/referees`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefereePageDtoFromJSON(jsonValue));
    }

    /**
     * List referees with offset and limit parameters
     */
    async v2RefereesGet(requestParameters: V2RefereesGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RefereePageDto> {
        const response = await this.v2RefereesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get referee by id
     */
    async v2RefereesIdGetRaw(requestParameters: V2RefereesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RefereeDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v2RefereesIdGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.languageCode !== undefined) {
            queryParameters['language_code'] = requestParameters.languageCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/referees/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefereeDtoFromJSON(jsonValue));
    }

    /**
     * Get referee by id
     */
    async v2RefereesIdGet(requestParameters: V2RefereesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RefereeDto> {
        const response = await this.v2RefereesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update referee information
     */
    async v2RefereesIdPutRaw(requestParameters: V2RefereesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RefereeDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v2RefereesIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/referees/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RefereeEditDtoToJSON(requestParameters.referee),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefereeDtoFromJSON(jsonValue));
    }

    /**
     * Update referee information
     */
    async v2RefereesIdPut(requestParameters: V2RefereesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RefereeDto> {
        const response = await this.v2RefereesIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store a newly created referee in storage
     */
    async v2RefereesPostRaw(requestParameters: V2RefereesPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RefereeDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/referees`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefereeEditDtoToJSON(requestParameters.referee),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefereeDtoFromJSON(jsonValue));
    }

    /**
     * Store a newly created referee in storage
     */
    async v2RefereesPost(requestParameters: V2RefereesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RefereeDto> {
        const response = await this.v2RefereesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
