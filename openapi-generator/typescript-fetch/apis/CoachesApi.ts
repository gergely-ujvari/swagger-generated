/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CoachDto,
    CoachDtoFromJSON,
    CoachDtoToJSON,
    CoachEditDto,
    CoachEditDtoFromJSON,
    CoachEditDtoToJSON,
    CoachPageDto,
    CoachPageDtoFromJSON,
    CoachPageDtoToJSON,
    NotFoundError,
    NotFoundErrorFromJSON,
    NotFoundErrorToJSON,
} from '../models';

export interface V2CoachesGetRequest {
    offset: number;
    limit: number;
    languageCode?: string;
}

export interface V2CoachesIdGetRequest {
    id: string;
    languageCode?: string;
}

export interface V2CoachesIdPutRequest {
    id: string;
    coach?: CoachEditDto;
}

export interface V2CoachesPostRequest {
    coach?: CoachEditDto;
}

/**
 * 
 */
export class CoachesApi extends runtime.BaseAPI {

    /**
     * List coaches with offset and limit parameters
     */
    async v2CoachesGetRaw(requestParameters: V2CoachesGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CoachPageDto>> {
        if (requestParameters.offset === null || requestParameters.offset === undefined) {
            throw new runtime.RequiredError('offset','Required parameter requestParameters.offset was null or undefined when calling v2CoachesGet.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling v2CoachesGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.languageCode !== undefined) {
            queryParameters['language_code'] = requestParameters.languageCode;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/coaches`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoachPageDtoFromJSON(jsonValue));
    }

    /**
     * List coaches with offset and limit parameters
     */
    async v2CoachesGet(requestParameters: V2CoachesGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CoachPageDto> {
        const response = await this.v2CoachesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find coach by id
     */
    async v2CoachesIdGetRaw(requestParameters: V2CoachesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<CoachDto>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v2CoachesIdGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.languageCode !== undefined) {
            queryParameters['language_code'] = requestParameters.languageCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/coaches/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CoachDtoFromJSON));
    }

    /**
     * Find coach by id
     */
    async v2CoachesIdGet(requestParameters: V2CoachesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<CoachDto>> {
        const response = await this.v2CoachesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update coach information
     */
    async v2CoachesIdPutRaw(requestParameters: V2CoachesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CoachDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v2CoachesIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/coaches/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CoachEditDtoToJSON(requestParameters.coach),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoachDtoFromJSON(jsonValue));
    }

    /**
     * Update coach information
     */
    async v2CoachesIdPut(requestParameters: V2CoachesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CoachDto> {
        const response = await this.v2CoachesIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store a newly created coach in storage
     */
    async v2CoachesPostRaw(requestParameters: V2CoachesPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CoachDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/coaches`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoachEditDtoToJSON(requestParameters.coach),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoachDtoFromJSON(jsonValue));
    }

    /**
     * Store a newly created coach in storage
     */
    async v2CoachesPost(requestParameters: V2CoachesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CoachDto> {
        const response = await this.v2CoachesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
