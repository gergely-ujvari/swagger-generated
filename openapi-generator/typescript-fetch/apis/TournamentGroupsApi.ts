/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    NotFoundError,
    NotFoundErrorFromJSON,
    NotFoundErrorToJSON,
    V2TournamentGroupCollection,
    V2TournamentGroupCollectionFromJSON,
    V2TournamentGroupCollectionToJSON,
    V2TournamentGroupGetOutput,
    V2TournamentGroupGetOutputFromJSON,
    V2TournamentGroupGetOutputToJSON,
    V2TournamentGroupInsertInput,
    V2TournamentGroupInsertInputFromJSON,
    V2TournamentGroupInsertInputToJSON,
    V2TournamentGroupSelection,
    V2TournamentGroupSelectionFromJSON,
    V2TournamentGroupSelectionToJSON,
    V2TournamentGroupUpdateInput,
    V2TournamentGroupUpdateInputFromJSON,
    V2TournamentGroupUpdateInputToJSON,
} from '../models';

export interface V2TournamentsGroupsCodeGetRequest {
    code: string;
}

export interface V2TournamentsGroupsCodePutRequest {
    code: string;
    group: V2TournamentGroupUpdateInput;
}

export interface V2TournamentsGroupsCodeSelectionDatePostRequest {
    code: string;
    date: Date;
    matchIds?: Array<V2TournamentGroupSelection>;
}

export interface V2TournamentsGroupsPostRequest {
    group: V2TournamentGroupInsertInput;
}

/**
 * 
 */
export class TournamentGroupsApi extends runtime.BaseAPI {

    /**
     * List all tournaments for a given group name and their order
     */
    async v2TournamentsGroupsCodeGetRaw(requestParameters: V2TournamentsGroupsCodeGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<V2TournamentGroupGetOutput>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling v2TournamentsGroupsCodeGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/tournaments/groups/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2TournamentGroupGetOutputFromJSON(jsonValue));
    }

    /**
     * List all tournaments for a given group name and their order
     */
    async v2TournamentsGroupsCodeGet(requestParameters: V2TournamentsGroupsCodeGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<V2TournamentGroupGetOutput> {
        const response = await this.v2TournamentsGroupsCodeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing tournament group
     */
    async v2TournamentsGroupsCodePutRaw(requestParameters: V2TournamentsGroupsCodePutRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling v2TournamentsGroupsCodePut.');
        }

        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling v2TournamentsGroupsCodePut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/tournaments/groups/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V2TournamentGroupUpdateInputToJSON(requestParameters.group),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update an existing tournament group
     */
    async v2TournamentsGroupsCodePut(requestParameters: V2TournamentsGroupsCodePutRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.v2TournamentsGroupsCodePutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async v2TournamentsGroupsCodeSelectionDatePostRaw(requestParameters: V2TournamentsGroupsCodeSelectionDatePostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling v2TournamentsGroupsCodeSelectionDatePost.');
        }

        if (requestParameters.date === null || requestParameters.date === undefined) {
            throw new runtime.RequiredError('date','Required parameter requestParameters.date was null or undefined when calling v2TournamentsGroupsCodeSelectionDatePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/tournaments/groups/{code}/selection/{date}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))).replace(`{${"date"}}`, encodeURIComponent(String(requestParameters.date))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.matchIds.map(V2TournamentGroupSelectionToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async v2TournamentsGroupsCodeSelectionDatePost(requestParameters: V2TournamentsGroupsCodeSelectionDatePostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.v2TournamentsGroupsCodeSelectionDatePostRaw(requestParameters, initOverrides);
    }

    /**
     * List all tournament groups
     */
    async v2TournamentsGroupsGetRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<V2TournamentGroupCollection>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/tournaments/groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2TournamentGroupCollectionFromJSON(jsonValue));
    }

    /**
     * List all tournament groups
     */
    async v2TournamentsGroupsGet(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<V2TournamentGroupCollection> {
        const response = await this.v2TournamentsGroupsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create a new tournament group
     */
    async v2TournamentsGroupsPostRaw(requestParameters: V2TournamentsGroupsPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling v2TournamentsGroupsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/tournaments/groups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V2TournamentGroupInsertInputToJSON(requestParameters.group),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new tournament group
     */
    async v2TournamentsGroupsPost(requestParameters: V2TournamentsGroupsPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.v2TournamentsGroupsPostRaw(requestParameters, initOverrides);
    }

}
