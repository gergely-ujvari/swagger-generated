/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CardlistStandingData,
    CardlistStandingDataFromJSON,
    CardlistStandingDataToJSON,
    Event,
    EventFromJSON,
    EventToJSON,
    EventsByDate,
    EventsByDateFromJSON,
    EventsByDateToJSON,
    LeagueStandingData,
    LeagueStandingDataFromJSON,
    LeagueStandingDataToJSON,
    NotFoundError,
    NotFoundErrorFromJSON,
    NotFoundErrorToJSON,
    PartialTeam,
    PartialTeamFromJSON,
    PartialTeamToJSON,
    Round,
    RoundFromJSON,
    RoundToJSON,
    StageGroupWithStandingTournamentSeasonStage,
    StageGroupWithStandingTournamentSeasonStageFromJSON,
    StageGroupWithStandingTournamentSeasonStageToJSON,
    TopscorerStandingData,
    TopscorerStandingDataFromJSON,
    TopscorerStandingDataToJSON,
    Tournament,
    TournamentFromJSON,
    TournamentToJSON,
    TournamentSeason,
    TournamentSeasonFromJSON,
    TournamentSeasonToJSON,
    TournamentSeasonStage,
    TournamentSeasonStageFromJSON,
    TournamentSeasonStageToJSON,
    TournamentSeasonStageWithStandingGroups,
    TournamentSeasonStageWithStandingGroupsFromJSON,
    TournamentSeasonStageWithStandingGroupsToJSON,
    TournamentSeasonWithStages,
    TournamentSeasonWithStagesFromJSON,
    TournamentSeasonWithStagesToJSON,
    TournamentWithSeasons,
    TournamentWithSeasonsFromJSON,
    TournamentWithSeasonsToJSON,
} from '../models';

export interface TournamentsGetRequest {
    acceptLanguage?: string;
    countryId?: number;
    clientOrder?: TournamentsGetClientOrderEnum;
    expandClientSortorder?: TournamentsGetExpandClientSortorderEnum;
}

export interface TournamentsIdGetRequest {
    id: string;
    acceptLanguage?: string;
}

export interface TournamentsIdSeasonsGetRequest {
    id: string;
    acceptLanguage?: string;
}

export interface TournamentsIdSeasonsLatestGetRequest {
    id: number;
    acceptLanguage?: string;
}

export interface TournamentsSeasonsIdCardlistGetRequest {
    id: number;
    acceptLanguage?: string;
}

export interface TournamentsSeasonsIdEventsGetRequest {
    id: number;
    acceptLanguage?: string;
    groupBy?: TournamentsSeasonsIdEventsGetGroupByEnum;
}

export interface TournamentsSeasonsIdGetRequest {
    id: number;
    acceptLanguage?: string;
}

export interface TournamentsSeasonsIdTeamsGetRequest {
    id: number;
    acceptLanguage?: string;
}

export interface TournamentsSeasonsIdTopscorerGetRequest {
    id: number;
    acceptLanguage?: string;
}

export interface TournamentsSeasonsStagesGroupsIdGetRequest {
    id: number;
    expand?: TournamentsSeasonsStagesGroupsIdGetExpandEnum;
    acceptLanguage?: string;
}

export interface TournamentsSeasonsStagesGroupsIdStandingGetRequest {
    id: number;
    expand?: TournamentsSeasonsStagesGroupsIdStandingGetExpandEnum;
    acceptLanguage?: string;
}

export interface TournamentsSeasonsStagesIdEventsGetRequest {
    id: number;
    round?: string;
    sortDirection?: TournamentsSeasonsStagesIdEventsGetSortDirectionEnum;
    acceptLanguage?: string;
}

export interface TournamentsSeasonsStagesIdGetRequest {
    id: number;
    expand?: TournamentsSeasonsStagesIdGetExpandEnum;
    acceptLanguage?: string;
}

export interface TournamentsSeasonsStagesIdRoundsGetRequest {
    id: number;
    expand?: TournamentsSeasonsStagesIdRoundsGetExpandEnum;
}

export interface TournamentsSeasonsStagesIdStandingGetRequest {
    id: number;
    expand?: TournamentsSeasonsStagesIdStandingGetExpandEnum;
    acceptLanguage?: string;
}

export interface TournamentsSeasonsStagesIdTeamsGetRequest {
    id: number;
    acceptLanguage?: string;
}

/**
 * 
 */
export class TournamentsApi extends runtime.BaseAPI {

    /**
     * Get a list of available Tournament resources
     */
    async tournamentsGetRaw(requestParameters: TournamentsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Tournament>>> {
        const queryParameters: any = {};

        if (requestParameters.countryId !== undefined) {
            queryParameters['country_id'] = requestParameters.countryId;
        }

        if (requestParameters.clientOrder !== undefined) {
            queryParameters['client_order'] = requestParameters.clientOrder;
        }

        if (requestParameters.expandClientSortorder !== undefined) {
            queryParameters['expand_client_sortorder'] = requestParameters.expandClientSortorder;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tournaments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TournamentFromJSON));
    }

    /**
     * Get a list of available Tournament resources
     */
    async tournamentsGet(requestParameters: TournamentsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Tournament>> {
        const response = await this.tournamentsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tournamentsIdGetRaw(requestParameters: TournamentsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<TournamentWithSeasons>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tournamentsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tournaments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TournamentWithSeasonsFromJSON(jsonValue));
    }

    /**
     */
    async tournamentsIdGet(requestParameters: TournamentsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<TournamentWithSeasons> {
        const response = await this.tournamentsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of seasons for a given Tournament id
     */
    async tournamentsIdSeasonsGetRaw(requestParameters: TournamentsIdSeasonsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<TournamentSeason>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tournamentsIdSeasonsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tournaments/{id}/seasons`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TournamentSeasonFromJSON));
    }

    /**
     * Get a list of seasons for a given Tournament id
     */
    async tournamentsIdSeasonsGet(requestParameters: TournamentsIdSeasonsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<TournamentSeason>> {
        const response = await this.tournamentsIdSeasonsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get information for the latest season for a given Tournament. This is an alias to whatever resource is first in /tournaments/{id}/seasons
     */
    async tournamentsIdSeasonsLatestGetRaw(requestParameters: TournamentsIdSeasonsLatestGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<TournamentSeasonWithStages>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tournamentsIdSeasonsLatestGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tournaments/{id}/seasons/latest`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TournamentSeasonWithStagesFromJSON(jsonValue));
    }

    /**
     * Get information for the latest season for a given Tournament. This is an alias to whatever resource is first in /tournaments/{id}/seasons
     */
    async tournamentsIdSeasonsLatestGet(requestParameters: TournamentsIdSeasonsLatestGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<TournamentSeasonWithStages> {
        const response = await this.tournamentsIdSeasonsLatestGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a standing by red,yellow cards for a specific TournamentSeason resource.
     */
    async tournamentsSeasonsIdCardlistGetRaw(requestParameters: TournamentsSeasonsIdCardlistGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<CardlistStandingData>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tournamentsSeasonsIdCardlistGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tournaments/seasons/{id}/cardlist`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CardlistStandingDataFromJSON));
    }

    /**
     * Get a standing by red,yellow cards for a specific TournamentSeason resource.
     */
    async tournamentsSeasonsIdCardlistGet(requestParameters: TournamentsSeasonsIdCardlistGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<CardlistStandingData>> {
        const response = await this.tournamentsSeasonsIdCardlistGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of Events, for a given TournamentSeason
     */
    async tournamentsSeasonsIdEventsGetRaw(requestParameters: TournamentsSeasonsIdEventsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Event>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tournamentsSeasonsIdEventsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.groupBy !== undefined) {
            queryParameters['group_by'] = requestParameters.groupBy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tournaments/seasons/{id}/events`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EventFromJSON));
    }

    /**
     * Get a list of Events, for a given TournamentSeason
     */
    async tournamentsSeasonsIdEventsGet(requestParameters: TournamentsSeasonsIdEventsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Event>> {
        const response = await this.tournamentsSeasonsIdEventsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get information for a given TournamentSeason resource id.
     */
    async tournamentsSeasonsIdGetRaw(requestParameters: TournamentsSeasonsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<TournamentSeasonWithStages>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tournamentsSeasonsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tournaments/seasons/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TournamentSeasonWithStagesFromJSON(jsonValue));
    }

    /**
     * Get information for a given TournamentSeason resource id.
     */
    async tournamentsSeasonsIdGet(requestParameters: TournamentsSeasonsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<TournamentSeasonWithStages> {
        const response = await this.tournamentsSeasonsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of Teams, which are participating in a given TournamentSeason
     */
    async tournamentsSeasonsIdTeamsGetRaw(requestParameters: TournamentsSeasonsIdTeamsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<PartialTeam>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tournamentsSeasonsIdTeamsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tournaments/seasons/{id}/teams`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PartialTeamFromJSON));
    }

    /**
     * Get a list of Teams, which are participating in a given TournamentSeason
     */
    async tournamentsSeasonsIdTeamsGet(requestParameters: TournamentsSeasonsIdTeamsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<PartialTeam>> {
        const response = await this.tournamentsSeasonsIdTeamsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of topscorers for a specific TournamentSeason resource.
     */
    async tournamentsSeasonsIdTopscorerGetRaw(requestParameters: TournamentsSeasonsIdTopscorerGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<TopscorerStandingData>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tournamentsSeasonsIdTopscorerGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tournaments/seasons/{id}/topscorer`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TopscorerStandingDataFromJSON));
    }

    /**
     * Get a list of topscorers for a specific TournamentSeason resource.
     */
    async tournamentsSeasonsIdTopscorerGet(requestParameters: TournamentsSeasonsIdTopscorerGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<TopscorerStandingData>> {
        const response = await this.tournamentsSeasonsIdTopscorerGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all currently active tournament season stages
     */
    async tournamentsSeasonsStagesActiveGetRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<TournamentSeasonStage>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tournaments/seasons/stages/active`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TournamentSeasonStageFromJSON));
    }

    /**
     * Get all currently active tournament season stages
     */
    async tournamentsSeasonsStagesActiveGet(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<TournamentSeasonStage>> {
        const response = await this.tournamentsSeasonsStagesActiveGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get information for a StageGroup Resource
     */
    async tournamentsSeasonsStagesGroupsIdGetRaw(requestParameters: TournamentsSeasonsStagesGroupsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<StageGroupWithStandingTournamentSeasonStage>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tournamentsSeasonsStagesGroupsIdGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tournaments/seasons/stages/groups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StageGroupWithStandingTournamentSeasonStageFromJSON(jsonValue));
    }

    /**
     * Get information for a StageGroup Resource
     */
    async tournamentsSeasonsStagesGroupsIdGet(requestParameters: TournamentsSeasonsStagesGroupsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<StageGroupWithStandingTournamentSeasonStage> {
        const response = await this.tournamentsSeasonsStagesGroupsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Standing for a StageGroup Resource
     */
    async tournamentsSeasonsStagesGroupsIdStandingGetRaw(requestParameters: TournamentsSeasonsStagesGroupsIdStandingGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<LeagueStandingData>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tournamentsSeasonsStagesGroupsIdStandingGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tournaments/seasons/stages/groups/{id}/standing`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LeagueStandingDataFromJSON));
    }

    /**
     * Get Standing for a StageGroup Resource
     */
    async tournamentsSeasonsStagesGroupsIdStandingGet(requestParameters: TournamentsSeasonsStagesGroupsIdStandingGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<LeagueStandingData>> {
        const response = await this.tournamentsSeasonsStagesGroupsIdStandingGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of events which are fixtures in a given TournamentSeasonStage resource
     */
    async tournamentsSeasonsStagesIdEventsGetRaw(requestParameters: TournamentsSeasonsStagesIdEventsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<EventsByDate>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tournamentsSeasonsStagesIdEventsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.round !== undefined) {
            queryParameters['round'] = requestParameters.round;
        }

        if (requestParameters.sortDirection !== undefined) {
            queryParameters['sort_direction'] = requestParameters.sortDirection;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tournaments/seasons/stages/{id}/events`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EventsByDateFromJSON));
    }

    /**
     * Get a list of events which are fixtures in a given TournamentSeasonStage resource
     */
    async tournamentsSeasonsStagesIdEventsGet(requestParameters: TournamentsSeasonsStagesIdEventsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<EventsByDate>> {
        const response = await this.tournamentsSeasonsStagesIdEventsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get information for a TournamentSeasonStage Resource
     */
    async tournamentsSeasonsStagesIdGetRaw(requestParameters: TournamentsSeasonsStagesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<TournamentSeasonStageWithStandingGroups>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tournamentsSeasonsStagesIdGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tournaments/seasons/stages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TournamentSeasonStageWithStandingGroupsFromJSON(jsonValue));
    }

    /**
     * Get information for a TournamentSeasonStage Resource
     */
    async tournamentsSeasonsStagesIdGet(requestParameters: TournamentsSeasonsStagesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<TournamentSeasonStageWithStandingGroups> {
        const response = await this.tournamentsSeasonsStagesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of rounds for a specific TournamentSeasonStage
     */
    async tournamentsSeasonsStagesIdRoundsGetRaw(requestParameters: TournamentsSeasonsStagesIdRoundsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Round>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tournamentsSeasonsStagesIdRoundsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tournaments/seasons/stages/{id}/rounds`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoundFromJSON));
    }

    /**
     * Get a list of rounds for a specific TournamentSeasonStage
     */
    async tournamentsSeasonsStagesIdRoundsGet(requestParameters: TournamentsSeasonsStagesIdRoundsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Round>> {
        const response = await this.tournamentsSeasonsStagesIdRoundsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Standing for a TournamentSeasonStage Resource
     */
    async tournamentsSeasonsStagesIdStandingGetRaw(requestParameters: TournamentsSeasonsStagesIdStandingGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<LeagueStandingData>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tournamentsSeasonsStagesIdStandingGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tournaments/seasons/stages/{id}/standing`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LeagueStandingDataFromJSON));
    }

    /**
     * Get Standing for a TournamentSeasonStage Resource
     */
    async tournamentsSeasonsStagesIdStandingGet(requestParameters: TournamentsSeasonsStagesIdStandingGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<LeagueStandingData>> {
        const response = await this.tournamentsSeasonsStagesIdStandingGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of Teams, which are participating in a given TournamentSeasonStage
     */
    async tournamentsSeasonsStagesIdTeamsGetRaw(requestParameters: TournamentsSeasonsStagesIdTeamsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<PartialTeam>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tournamentsSeasonsStagesIdTeamsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tournaments/seasons/stages/{id}/teams`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PartialTeamFromJSON));
    }

    /**
     * Get a list of Teams, which are participating in a given TournamentSeasonStage
     */
    async tournamentsSeasonsStagesIdTeamsGet(requestParameters: TournamentsSeasonsStagesIdTeamsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<PartialTeam>> {
        const response = await this.tournamentsSeasonsStagesIdTeamsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const TournamentsGetClientOrderEnum = {
    Sportalios: 'sportalios'
} as const;
export type TournamentsGetClientOrderEnum = typeof TournamentsGetClientOrderEnum[keyof typeof TournamentsGetClientOrderEnum];
/**
 * @export
 */
export const TournamentsGetExpandClientSortorderEnum = {
    Sportalios: 'sportalios'
} as const;
export type TournamentsGetExpandClientSortorderEnum = typeof TournamentsGetExpandClientSortorderEnum[keyof typeof TournamentsGetExpandClientSortorderEnum];
/**
 * @export
 */
export const TournamentsSeasonsIdEventsGetGroupByEnum = {
    Date: 'date'
} as const;
export type TournamentsSeasonsIdEventsGetGroupByEnum = typeof TournamentsSeasonsIdEventsGetGroupByEnum[keyof typeof TournamentsSeasonsIdEventsGetGroupByEnum];
/**
 * @export
 */
export const TournamentsSeasonsStagesGroupsIdGetExpandEnum = {
    Standing: 'standing',
    StandingRules: 'standing.rules',
    StandingRulesstandingForm: 'standing.rules,standing.form',
    StandingRulesstandingFormEvents: 'standing.rules,standing.form.events',
    StandingForm: 'standing.form',
    StandingFormEvents: 'standing.form.events'
} as const;
export type TournamentsSeasonsStagesGroupsIdGetExpandEnum = typeof TournamentsSeasonsStagesGroupsIdGetExpandEnum[keyof typeof TournamentsSeasonsStagesGroupsIdGetExpandEnum];
/**
 * @export
 */
export const TournamentsSeasonsStagesGroupsIdStandingGetExpandEnum = {
    Rules: 'rules',
    Rulesform: 'rules,form',
    RulesformEvents: 'rules,form.events',
    Form: 'form',
    FormEvents: 'form.events'
} as const;
export type TournamentsSeasonsStagesGroupsIdStandingGetExpandEnum = typeof TournamentsSeasonsStagesGroupsIdStandingGetExpandEnum[keyof typeof TournamentsSeasonsStagesGroupsIdStandingGetExpandEnum];
/**
 * @export
 */
export const TournamentsSeasonsStagesIdEventsGetSortDirectionEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type TournamentsSeasonsStagesIdEventsGetSortDirectionEnum = typeof TournamentsSeasonsStagesIdEventsGetSortDirectionEnum[keyof typeof TournamentsSeasonsStagesIdEventsGetSortDirectionEnum];
/**
 * @export
 */
export const TournamentsSeasonsStagesIdGetExpandEnum = {
    Standing: 'standing',
    StandingRules: 'standing.rules',
    StandingRulesstandingForm: 'standing.rules,standing.form',
    StandingRulesstandingFormEvents: 'standing.rules,standing.form.events',
    StandingForm: 'standing.form',
    StandingFormEvents: 'standing.form.events'
} as const;
export type TournamentsSeasonsStagesIdGetExpandEnum = typeof TournamentsSeasonsStagesIdGetExpandEnum[keyof typeof TournamentsSeasonsStagesIdGetExpandEnum];
/**
 * @export
 */
export const TournamentsSeasonsStagesIdRoundsGetExpandEnum = {
    Events: 'events'
} as const;
export type TournamentsSeasonsStagesIdRoundsGetExpandEnum = typeof TournamentsSeasonsStagesIdRoundsGetExpandEnum[keyof typeof TournamentsSeasonsStagesIdRoundsGetExpandEnum];
/**
 * @export
 */
export const TournamentsSeasonsStagesIdStandingGetExpandEnum = {
    Rules: 'rules',
    Rulesform: 'rules,form',
    RulesformEvents: 'rules,form.events',
    Form: 'form',
    FormEvents: 'form.events'
} as const;
export type TournamentsSeasonsStagesIdStandingGetExpandEnum = typeof TournamentsSeasonsStagesIdStandingGetExpandEnum[keyof typeof TournamentsSeasonsStagesIdStandingGetExpandEnum];
