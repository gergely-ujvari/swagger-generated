/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Event,
    EventFromJSON,
    EventToJSON,
    NotFoundError,
    NotFoundErrorFromJSON,
    NotFoundErrorToJSON,
    PartialTeam,
    PartialTeamFromJSON,
    PartialTeamToJSON,
    Team,
    TeamFromJSON,
    TeamToJSON,
    TeamEditDto,
    TeamEditDtoFromJSON,
    TeamEditDtoToJSON,
    TeamForm,
    TeamFormFromJSON,
    TeamFormToJSON,
    TeamPageDto,
    TeamPageDtoFromJSON,
    TeamPageDtoToJSON,
    TeamPlayer,
    TeamPlayerFromJSON,
    TeamPlayerToJSON,
    TeamPlayerSeasonStatistics,
    TeamPlayerSeasonStatisticsFromJSON,
    TeamPlayerSeasonStatisticsToJSON,
    TeamSeasonStatistics,
    TeamSeasonStatisticsFromJSON,
    TeamSeasonStatisticsToJSON,
    TournamentSeasonWithTournament,
    TournamentSeasonWithTournamentFromJSON,
    TournamentSeasonWithTournamentToJSON,
    V2TeamColors,
    V2TeamColorsFromJSON,
    V2TeamColorsToJSON,
    V2TeamProfile,
    V2TeamProfileFromJSON,
    V2TeamProfileToJSON,
} from '../models';

export interface CountriesIdTeamsGetRequest {
    id: string;
    acceptLanguage?: string;
    national?: CountriesIdTeamsGetNationalEnum;
}

export interface TeamsGetRequest {
    name: string;
    acceptLanguage?: string;
    maxResults?: number;
    countryId?: number;
}

export interface TeamsIdEventsGetRequest {
    id: string;
    acceptLanguage?: string;
    fromTime?: Date;
    toTime?: Date;
    direction?: TeamsIdEventsGetDirectionEnum;
    tournamentSeasonStageId?: number;
}

export interface TeamsIdFormGetRequest {
    id: string;
    acceptLanguage?: string;
    expand?: TeamsIdFormGetExpandEnum;
}

export interface TeamsIdGetRequest {
    id: string;
    acceptLanguage?: string;
    expand?: TeamsIdGetExpandEnum;
}

export interface TeamsIdPlayersGetRequest {
    id: string;
    acceptLanguage?: string;
    groupBy?: TeamsIdPlayersGetGroupByEnum;
}

export interface TeamsIdPlayersStatisticsGetRequest {
    id: string;
    acceptLanguage?: string;
    groupBy?: TeamsIdPlayersStatisticsGetGroupByEnum;
}

export interface TeamsIdPlayersStatisticsSeasonsGetRequest {
    id: string;
    acceptLanguage?: string;
}

export interface TeamsIdPlayersStatisticsSeasonsSeasonIdGetRequest {
    seasonId: number;
    id: string;
    acceptLanguage?: string;
    groupBy?: TeamsIdPlayersStatisticsSeasonsSeasonIdGetGroupByEnum;
}

export interface TeamsIdStatisticsLeagueGetRequest {
    id: string;
    acceptLanguage?: string;
    standing?: TeamsIdStatisticsLeagueGetStandingEnum;
}

export interface TournamentsSeasonsIdTeamsGetRequest {
    id: number;
    acceptLanguage?: string;
}

export interface TournamentsSeasonsStagesIdTeamsGetRequest {
    id: number;
    acceptLanguage?: string;
}

export interface V2TeamsColorsPostRequest {
    teamColorsDto?: V2TeamColors;
}

export interface V2TeamsGetRequest {
    offset: number;
    limit: number;
    languageCode?: string;
}

export interface V2TeamsIdGetRequest {
    id: string;
    languageCode?: string;
}

export interface V2TeamsIdPutRequest {
    id: string;
    team: TeamEditDto;
}

export interface V2TeamsPostRequest {
    teamEditDto?: TeamEditDto;
}

/**
 * 
 */
export class TeamsApi extends runtime.BaseAPI {

    /**
     * Get Teams for a specific Country.id
     */
    async countriesIdTeamsGetRaw(requestParameters: CountriesIdTeamsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Team>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling countriesIdTeamsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.national !== undefined) {
            queryParameters['national'] = requestParameters.national;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/countries/{id}/teams`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TeamFromJSON));
    }

    /**
     * Get Teams for a specific Country.id
     */
    async countriesIdTeamsGet(requestParameters: CountriesIdTeamsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Team>> {
        const response = await this.countriesIdTeamsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search all teams by parameters
     */
    async teamsGetRaw(requestParameters: TeamsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Team>>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling teamsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.maxResults !== undefined) {
            queryParameters['max_results'] = requestParameters.maxResults;
        }

        if (requestParameters.countryId !== undefined) {
            queryParameters['country_id'] = requestParameters.countryId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/teams`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TeamFromJSON));
    }

    /**
     * Search all teams by parameters
     */
    async teamsGet(requestParameters: TeamsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Team>> {
        const response = await this.teamsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of events in which a team with a specified id has participated
     */
    async teamsIdEventsGetRaw(requestParameters: TeamsIdEventsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Event>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling teamsIdEventsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.fromTime !== undefined) {
            queryParameters['from_time'] = (requestParameters.fromTime as any).toISOString();
        }

        if (requestParameters.toTime !== undefined) {
            queryParameters['to_time'] = (requestParameters.toTime as any).toISOString();
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        if (requestParameters.tournamentSeasonStageId !== undefined) {
            queryParameters['tournament_season_stage_id'] = requestParameters.tournamentSeasonStageId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/teams/{id}/events`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EventFromJSON));
    }

    /**
     * Get a list of events in which a team with a specified id has participated
     */
    async teamsIdEventsGet(requestParameters: TeamsIdEventsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Event>> {
        const response = await this.teamsIdEventsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Team form information accross all tournaments
     */
    async teamsIdFormGetRaw(requestParameters: TeamsIdFormGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<TeamForm>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling teamsIdFormGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/teams/{id}/form`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TeamFormFromJSON));
    }

    /**
     * Get Team form information accross all tournaments
     */
    async teamsIdFormGet(requestParameters: TeamsIdFormGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<TeamForm>> {
        const response = await this.teamsIdFormGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get information about a specific Team
     */
    async teamsIdGetRaw(requestParameters: TeamsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Team>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling teamsIdGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/teams/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamFromJSON(jsonValue));
    }

    /**
     * Get information about a specific Team
     */
    async teamsIdGet(requestParameters: TeamsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Team> {
        const response = await this.teamsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the current squad for a Team
     */
    async teamsIdPlayersGetRaw(requestParameters: TeamsIdPlayersGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<TeamPlayer>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling teamsIdPlayersGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.groupBy !== undefined) {
            queryParameters['group_by'] = requestParameters.groupBy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/teams/{id}/players`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TeamPlayerFromJSON));
    }

    /**
     * Get the current squad for a Team
     */
    async teamsIdPlayersGet(requestParameters: TeamsIdPlayersGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<TeamPlayer>> {
        const response = await this.teamsIdPlayersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get player statistics for the current season in the Team\'s League
     */
    async teamsIdPlayersStatisticsGetRaw(requestParameters: TeamsIdPlayersStatisticsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<TeamPlayerSeasonStatistics>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling teamsIdPlayersStatisticsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.groupBy !== undefined) {
            queryParameters['group_by'] = requestParameters.groupBy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/teams/{id}/players/statistics`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamPlayerSeasonStatisticsFromJSON(jsonValue));
    }

    /**
     * Get player statistics for the current season in the Team\'s League
     */
    async teamsIdPlayersStatisticsGet(requestParameters: TeamsIdPlayersStatisticsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<TeamPlayerSeasonStatistics> {
        const response = await this.teamsIdPlayersStatisticsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of TournamentSeasons for which Player Statistics are available
     */
    async teamsIdPlayersStatisticsSeasonsGetRaw(requestParameters: TeamsIdPlayersStatisticsSeasonsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<TournamentSeasonWithTournament>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling teamsIdPlayersStatisticsSeasonsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/teams/{id}/players/statistics/seasons`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TournamentSeasonWithTournamentFromJSON));
    }

    /**
     * Get a list of TournamentSeasons for which Player Statistics are available
     */
    async teamsIdPlayersStatisticsSeasonsGet(requestParameters: TeamsIdPlayersStatisticsSeasonsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<TournamentSeasonWithTournament>> {
        const response = await this.teamsIdPlayersStatisticsSeasonsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get player statistics for the current season in the Team\'s League
     */
    async teamsIdPlayersStatisticsSeasonsSeasonIdGetRaw(requestParameters: TeamsIdPlayersStatisticsSeasonsSeasonIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<TeamPlayerSeasonStatistics>> {
        if (requestParameters.seasonId === null || requestParameters.seasonId === undefined) {
            throw new runtime.RequiredError('seasonId','Required parameter requestParameters.seasonId was null or undefined when calling teamsIdPlayersStatisticsSeasonsSeasonIdGet.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling teamsIdPlayersStatisticsSeasonsSeasonIdGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.groupBy !== undefined) {
            queryParameters['group_by'] = requestParameters.groupBy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/teams/{id}/players/statistics/seasons/{seasonId}`.replace(`{${"seasonId"}}`, encodeURIComponent(String(requestParameters.seasonId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamPlayerSeasonStatisticsFromJSON(jsonValue));
    }

    /**
     * Get player statistics for the current season in the Team\'s League
     */
    async teamsIdPlayersStatisticsSeasonsSeasonIdGet(requestParameters: TeamsIdPlayersStatisticsSeasonsSeasonIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<TeamPlayerSeasonStatistics> {
        const response = await this.teamsIdPlayersStatisticsSeasonsSeasonIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the statistics for the latest League the team participates in
     */
    async teamsIdStatisticsLeagueGetRaw(requestParameters: TeamsIdStatisticsLeagueGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<TeamSeasonStatistics>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling teamsIdStatisticsLeagueGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.standing !== undefined) {
            queryParameters['standing'] = requestParameters.standing;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/teams/{id}/statistics/league`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamSeasonStatisticsFromJSON(jsonValue));
    }

    /**
     * Get the statistics for the latest League the team participates in
     */
    async teamsIdStatisticsLeagueGet(requestParameters: TeamsIdStatisticsLeagueGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<TeamSeasonStatistics> {
        const response = await this.teamsIdStatisticsLeagueGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of Teams, which are participating in a given TournamentSeason
     */
    async tournamentsSeasonsIdTeamsGetRaw(requestParameters: TournamentsSeasonsIdTeamsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<PartialTeam>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tournamentsSeasonsIdTeamsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tournaments/seasons/{id}/teams`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PartialTeamFromJSON));
    }

    /**
     * Get a list of Teams, which are participating in a given TournamentSeason
     */
    async tournamentsSeasonsIdTeamsGet(requestParameters: TournamentsSeasonsIdTeamsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<PartialTeam>> {
        const response = await this.tournamentsSeasonsIdTeamsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of Teams, which are participating in a given TournamentSeasonStage
     */
    async tournamentsSeasonsStagesIdTeamsGetRaw(requestParameters: TournamentsSeasonsStagesIdTeamsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<PartialTeam>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tournamentsSeasonsStagesIdTeamsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tournaments/seasons/stages/{id}/teams`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PartialTeamFromJSON));
    }

    /**
     * Get a list of Teams, which are participating in a given TournamentSeasonStage
     */
    async tournamentsSeasonsStagesIdTeamsGet(requestParameters: TournamentsSeasonsStagesIdTeamsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<PartialTeam>> {
        const response = await this.tournamentsSeasonsStagesIdTeamsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Manually insert team colors by team or event.
     */
    async v2TeamsColorsPostRaw(requestParameters: V2TeamsColorsPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<V2TeamColors>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/teams/colors`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V2TeamColorsToJSON(requestParameters.teamColorsDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2TeamColorsFromJSON(jsonValue));
    }

    /**
     * Manually insert team colors by team or event.
     */
    async v2TeamsColorsPost(requestParameters: V2TeamsColorsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<V2TeamColors> {
        const response = await this.v2TeamsColorsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get teams list
     */
    async v2TeamsGetRaw(requestParameters: V2TeamsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<TeamPageDto>> {
        if (requestParameters.offset === null || requestParameters.offset === undefined) {
            throw new runtime.RequiredError('offset','Required parameter requestParameters.offset was null or undefined when calling v2TeamsGet.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling v2TeamsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.languageCode !== undefined) {
            queryParameters['language_code'] = requestParameters.languageCode;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/teams`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamPageDtoFromJSON(jsonValue));
    }

    /**
     * Get teams list
     */
    async v2TeamsGet(requestParameters: V2TeamsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<TeamPageDto> {
        const response = await this.v2TeamsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get team by id
     */
    async v2TeamsIdGetRaw(requestParameters: V2TeamsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<V2TeamProfile>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v2TeamsIdGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.languageCode !== undefined) {
            queryParameters['language_code'] = requestParameters.languageCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/teams/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2TeamProfileFromJSON(jsonValue));
    }

    /**
     * Get team by id
     */
    async v2TeamsIdGet(requestParameters: V2TeamsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<V2TeamProfile> {
        const response = await this.v2TeamsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Team information
     */
    async v2TeamsIdPutRaw(requestParameters: V2TeamsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<V2TeamProfile>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v2TeamsIdPut.');
        }

        if (requestParameters.team === null || requestParameters.team === undefined) {
            throw new runtime.RequiredError('team','Required parameter requestParameters.team was null or undefined when calling v2TeamsIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/teams/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TeamEditDtoToJSON(requestParameters.team),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2TeamProfileFromJSON(jsonValue));
    }

    /**
     * Update Team information
     */
    async v2TeamsIdPut(requestParameters: V2TeamsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<V2TeamProfile> {
        const response = await this.v2TeamsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Manually insert team.
     */
    async v2TeamsPostRaw(requestParameters: V2TeamsPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<V2TeamProfile>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/teams`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TeamEditDtoToJSON(requestParameters.teamEditDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2TeamProfileFromJSON(jsonValue));
    }

    /**
     * Manually insert team.
     */
    async v2TeamsPost(requestParameters: V2TeamsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<V2TeamProfile> {
        const response = await this.v2TeamsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CountriesIdTeamsGetNationalEnum = {
    _1: '1',
    _0: '0',
    True: 'true',
    False: 'false'
} as const;
export type CountriesIdTeamsGetNationalEnum = typeof CountriesIdTeamsGetNationalEnum[keyof typeof CountriesIdTeamsGetNationalEnum];
/**
 * @export
 */
export const TeamsIdEventsGetDirectionEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type TeamsIdEventsGetDirectionEnum = typeof TeamsIdEventsGetDirectionEnum[keyof typeof TeamsIdEventsGetDirectionEnum];
/**
 * @export
 */
export const TeamsIdFormGetExpandEnum = {
    Events: 'events'
} as const;
export type TeamsIdFormGetExpandEnum = typeof TeamsIdFormGetExpandEnum[keyof typeof TeamsIdFormGetExpandEnum];
/**
 * @export
 */
export const TeamsIdGetExpandEnum = {
    Form: 'form',
    FormEvents: 'form.events',
    FormEventsnextEvent: 'form.events,next_event'
} as const;
export type TeamsIdGetExpandEnum = typeof TeamsIdGetExpandEnum[keyof typeof TeamsIdGetExpandEnum];
/**
 * @export
 */
export const TeamsIdPlayersGetGroupByEnum = {
    Position: 'position'
} as const;
export type TeamsIdPlayersGetGroupByEnum = typeof TeamsIdPlayersGetGroupByEnum[keyof typeof TeamsIdPlayersGetGroupByEnum];
/**
 * @export
 */
export const TeamsIdPlayersStatisticsGetGroupByEnum = {
    PlayerPosition: 'player.position'
} as const;
export type TeamsIdPlayersStatisticsGetGroupByEnum = typeof TeamsIdPlayersStatisticsGetGroupByEnum[keyof typeof TeamsIdPlayersStatisticsGetGroupByEnum];
/**
 * @export
 */
export const TeamsIdPlayersStatisticsSeasonsSeasonIdGetGroupByEnum = {
    PlayerPosition: 'player.position'
} as const;
export type TeamsIdPlayersStatisticsSeasonsSeasonIdGetGroupByEnum = typeof TeamsIdPlayersStatisticsSeasonsSeasonIdGetGroupByEnum[keyof typeof TeamsIdPlayersStatisticsSeasonsSeasonIdGetGroupByEnum];
/**
 * @export
 */
export const TeamsIdStatisticsLeagueGetStandingEnum = {
    Team: 'team',
    Full: 'full'
} as const;
export type TeamsIdStatisticsLeagueGetStandingEnum = typeof TeamsIdStatisticsLeagueGetStandingEnum[keyof typeof TeamsIdStatisticsLeagueGetStandingEnum];
