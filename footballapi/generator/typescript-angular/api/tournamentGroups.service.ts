/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { NotFoundError } from '../model/notFoundError';
import { V2TournamentGroupCollection } from '../model/v2TournamentGroupCollection';
import { V2TournamentGroupGetOutput } from '../model/v2TournamentGroupGetOutput';
import { V2TournamentGroupInsertInput } from '../model/v2TournamentGroupInsertInput';
import { V2TournamentGroupSelection } from '../model/v2TournamentGroupSelection';
import { V2TournamentGroupUpdateInput } from '../model/v2TournamentGroupUpdateInput';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TournamentGroupsService {

    protected basePath = 'https://false/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * List all tournaments for a given group name and their order
     * @param code Tournament group code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v2TournamentsGroupsCodeGet(code: string, observe?: 'body', reportProgress?: boolean): Observable<V2TournamentGroupGetOutput>;
    public v2TournamentsGroupsCodeGet(code: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<V2TournamentGroupGetOutput>>;
    public v2TournamentsGroupsCodeGet(code: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<V2TournamentGroupGetOutput>>;
    public v2TournamentsGroupsCodeGet(code: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (code === null || code === undefined) {
            throw new Error('Required parameter code was null or undefined when calling v2TournamentsGroupsCodeGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<V2TournamentGroupGetOutput>('get',`${this.basePath}/v2/tournaments/groups/${encodeURIComponent(String(code))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Update an existing tournament group
     * @param body Tournament group information
     * @param code Tournament group unique code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v2TournamentsGroupsCodePut(body: V2TournamentGroupUpdateInput, code: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public v2TournamentsGroupsCodePut(body: V2TournamentGroupUpdateInput, code: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public v2TournamentsGroupsCodePut(body: V2TournamentGroupUpdateInput, code: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public v2TournamentsGroupsCodePut(body: V2TournamentGroupUpdateInput, code: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling v2TournamentsGroupsCodePut.');
        }

        if (code === null || code === undefined) {
            throw new Error('Required parameter code was null or undefined when calling v2TournamentsGroupsCodePut.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/v2/tournaments/groups/${encodeURIComponent(String(code))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param code Client code
     * @param date Date in ISO 8601 format (Y-m-d)
     * @param body Array of match ids
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v2TournamentsGroupsCodeSelectionDatePost(code: string, date: string, body?: Array<V2TournamentGroupSelection>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public v2TournamentsGroupsCodeSelectionDatePost(code: string, date: string, body?: Array<V2TournamentGroupSelection>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public v2TournamentsGroupsCodeSelectionDatePost(code: string, date: string, body?: Array<V2TournamentGroupSelection>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public v2TournamentsGroupsCodeSelectionDatePost(code: string, date: string, body?: Array<V2TournamentGroupSelection>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (code === null || code === undefined) {
            throw new Error('Required parameter code was null or undefined when calling v2TournamentsGroupsCodeSelectionDatePost.');
        }

        if (date === null || date === undefined) {
            throw new Error('Required parameter date was null or undefined when calling v2TournamentsGroupsCodeSelectionDatePost.');
        }


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/v2/tournaments/groups/${encodeURIComponent(String(code))}/selection/${encodeURIComponent(String(date))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * List all tournament groups
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v2TournamentsGroupsGet(observe?: 'body', reportProgress?: boolean): Observable<V2TournamentGroupCollection>;
    public v2TournamentsGroupsGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<V2TournamentGroupCollection>>;
    public v2TournamentsGroupsGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<V2TournamentGroupCollection>>;
    public v2TournamentsGroupsGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<V2TournamentGroupCollection>('get',`${this.basePath}/v2/tournaments/groups`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Create a new tournament group
     * @param body Tournament group information
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v2TournamentsGroupsPost(body: V2TournamentGroupInsertInput, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public v2TournamentsGroupsPost(body: V2TournamentGroupInsertInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public v2TournamentsGroupsPost(body: V2TournamentGroupInsertInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public v2TournamentsGroupsPost(body: V2TournamentGroupInsertInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling v2TournamentsGroupsPost.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/v2/tournaments/groups`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
