/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { LiveCommentaryOutputDto } from '../models';
import { NotFoundError } from '../models';
import { V2Match } from '../models';
import { V2MatchInput } from '../models';
/**
 * MatchesApi - axios parameter creator
 * @export
 */
export const MatchesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a list of live commentaries with specified match id and language
         * @param {string} id Unique identifier of the resource.
         * @param {string} languageCode Return translations depending on language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesIdCommentaryGet: async (id: string, languageCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling matchesIdCommentaryGet.');
            }
            // verify required parameter 'languageCode' is not null or undefined
            if (languageCode === null || languageCode === undefined) {
                throw new RequiredError('languageCode','Required parameter languageCode was null or undefined when calling matchesIdCommentaryGet.');
            }
            const localVarPath = `/matches/{id}/commentary`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (languageCode !== undefined) {
                localVarQueryParameter['language_code'] = languageCode;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of matches
         * @param {number} limit Select an upper limit for the matches that would be returned
         * @param {number} offset Select an offset for the matches that would be returned
         * @param {Array<number>} [tournamentIds] Filter matches, which have been played as part of the listed tournaments
         * @param {Array<number>} [seasonIds] Filter matches, which have been played as part of the listed tournament seasons
         * @param {Array<number>} [stageIds] Filter matches, which have been played as part of the listed tournament stages
         * @param {Array<number>} [groupIds] Filter matches, which have been played as part of the listed tournament groups
         * @param {Array<string>} [roundIds] Filter matches, which have been played as part of the listed tournament rounds
         * @param {Array<string>} [roundFilter] Filter matches by combinations of stage_id and round_id. Format: {stage_id}:{round_id}
         * @param {Date} [fromKickoffTime] Filter matches, which have a start_time after the specified date, format is ISO 8601
         * @param {Date} [toKickoffTime] Filter matches, which have a start_time before the specified date, format is ISO 8601
         * @param {Array<number>} [teamIds] Filter matches by teams which have taken part in them
         * @param {Array<string>} [statusTypes] Filter matches by their status types
         * @param {Array<string>} [statusCodes] Filter matches by their status codes
         * @param {number} [refereeId] Filter matches by the referee who has taken part in them
         * @param {string} [venueId] Filter matches by the venue that has hosted them
         * @param {string} [sortDirection] Sort matches in asc|desc order by start_time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2MatchesGet: async (limit: number, offset: number, tournamentIds?: Array<number>, seasonIds?: Array<number>, stageIds?: Array<number>, groupIds?: Array<number>, roundIds?: Array<string>, roundFilter?: Array<string>, fromKickoffTime?: Date, toKickoffTime?: Date, teamIds?: Array<number>, statusTypes?: Array<string>, statusCodes?: Array<string>, refereeId?: number, venueId?: string, sortDirection?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'limit' is not null or undefined
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling v2MatchesGet.');
            }
            // verify required parameter 'offset' is not null or undefined
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling v2MatchesGet.');
            }
            const localVarPath = `/v2/matches`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (tournamentIds) {
                localVarQueryParameter['tournament_ids'] = tournamentIds.join(COLLECTION_FORMATS.csv);
            }

            if (seasonIds) {
                localVarQueryParameter['season_ids'] = seasonIds.join(COLLECTION_FORMATS.csv);
            }

            if (stageIds) {
                localVarQueryParameter['stage_ids'] = stageIds.join(COLLECTION_FORMATS.csv);
            }

            if (groupIds) {
                localVarQueryParameter['group_ids'] = groupIds.join(COLLECTION_FORMATS.csv);
            }

            if (roundIds) {
                localVarQueryParameter['round_ids'] = roundIds.join(COLLECTION_FORMATS.csv);
            }

            if (roundFilter) {
                localVarQueryParameter['round_filter'] = roundFilter.join(COLLECTION_FORMATS.csv);
            }

            if (fromKickoffTime !== undefined) {
                localVarQueryParameter['from_kickoff_time'] = (fromKickoffTime as any instanceof Date) ?
                    (fromKickoffTime as any).toISOString() :
                    fromKickoffTime;
            }

            if (toKickoffTime !== undefined) {
                localVarQueryParameter['to_kickoff_time'] = (toKickoffTime as any instanceof Date) ?
                    (toKickoffTime as any).toISOString() :
                    toKickoffTime;
            }

            if (teamIds) {
                localVarQueryParameter['team_ids'] = teamIds.join(COLLECTION_FORMATS.csv);
            }

            if (statusTypes) {
                localVarQueryParameter['status_types'] = statusTypes.join(COLLECTION_FORMATS.csv);
            }

            if (statusCodes) {
                localVarQueryParameter['status_codes'] = statusCodes.join(COLLECTION_FORMATS.csv);
            }

            if (refereeId !== undefined) {
                localVarQueryParameter['referee_id'] = refereeId;
            }

            if (venueId !== undefined) {
                localVarQueryParameter['venue_id'] = venueId;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sort_direction'] = sortDirection;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id Unique identifier of the resource.
         * @param {string} [languageCode] Returns translated response based on the language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2MatchesIdGet: async (id: string, languageCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v2MatchesIdGet.');
            }
            const localVarPath = `/v2/matches/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (languageCode !== undefined) {
                localVarQueryParameter['language_code'] = languageCode;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {V2MatchInput} body Match information to save
         * @param {string} id Unique identifier of the resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2MatchesIdPut: async (body: V2MatchInput, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v2MatchesIdPut.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v2MatchesIdPut.');
            }
            const localVarPath = `/v2/matches/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of matches
         * @param {Array<number>} [matchIds] Filter matches by their IDs
         * @param {string} [date] Filter matches by the date when they were played, format is ISO 8601
         * @param {number} [utcOffset] Filter matches by date and UTC offset, allowed value range: [-12,14]
         * @param {string} [tournamentGroup] Filter matches by a tournament group code
         * @param {Array<string>} [statusTypes] Filter matches by status types
         * @param {string} [selectionFilter] Fetch selected matches for specific date and tournament_group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2MatchesLivescoreGet: async (matchIds?: Array<number>, date?: string, utcOffset?: number, tournamentGroup?: string, statusTypes?: Array<string>, selectionFilter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/matches/livescore`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (matchIds) {
                localVarQueryParameter['match_ids'] = matchIds.join(COLLECTION_FORMATS.csv);
            }

            if (date !== undefined) {
                localVarQueryParameter['date'] = (date as any instanceof Date) ?
                    (date as any).toISOString().substr(0,10) :
                    date;
            }

            if (utcOffset !== undefined) {
                localVarQueryParameter['utc_offset'] = utcOffset;
            }

            if (tournamentGroup !== undefined) {
                localVarQueryParameter['tournament_group'] = tournamentGroup;
            }

            if (statusTypes) {
                localVarQueryParameter['status_types'] = statusTypes.join(COLLECTION_FORMATS.csv);
            }

            if (selectionFilter !== undefined) {
                localVarQueryParameter['selection_filter'] = selectionFilter;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {V2MatchInput} body Match information to save
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2MatchesPost: async (body: V2MatchInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v2MatchesPost.');
            }
            const localVarPath = `/v2/matches`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MatchesApi - functional programming interface
 * @export
 */
export const MatchesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get a list of live commentaries with specified match id and language
         * @param {string} id Unique identifier of the resource.
         * @param {string} languageCode Return translations depending on language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async matchesIdCommentaryGet(id: string, languageCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<LiveCommentaryOutputDto>>>> {
            const localVarAxiosArgs = await MatchesApiAxiosParamCreator(configuration).matchesIdCommentaryGet(id, languageCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of matches
         * @param {number} limit Select an upper limit for the matches that would be returned
         * @param {number} offset Select an offset for the matches that would be returned
         * @param {Array<number>} [tournamentIds] Filter matches, which have been played as part of the listed tournaments
         * @param {Array<number>} [seasonIds] Filter matches, which have been played as part of the listed tournament seasons
         * @param {Array<number>} [stageIds] Filter matches, which have been played as part of the listed tournament stages
         * @param {Array<number>} [groupIds] Filter matches, which have been played as part of the listed tournament groups
         * @param {Array<string>} [roundIds] Filter matches, which have been played as part of the listed tournament rounds
         * @param {Array<string>} [roundFilter] Filter matches by combinations of stage_id and round_id. Format: {stage_id}:{round_id}
         * @param {Date} [fromKickoffTime] Filter matches, which have a start_time after the specified date, format is ISO 8601
         * @param {Date} [toKickoffTime] Filter matches, which have a start_time before the specified date, format is ISO 8601
         * @param {Array<number>} [teamIds] Filter matches by teams which have taken part in them
         * @param {Array<string>} [statusTypes] Filter matches by their status types
         * @param {Array<string>} [statusCodes] Filter matches by their status codes
         * @param {number} [refereeId] Filter matches by the referee who has taken part in them
         * @param {string} [venueId] Filter matches by the venue that has hosted them
         * @param {string} [sortDirection] Sort matches in asc|desc order by start_time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2MatchesGet(limit: number, offset: number, tournamentIds?: Array<number>, seasonIds?: Array<number>, stageIds?: Array<number>, groupIds?: Array<number>, roundIds?: Array<string>, roundFilter?: Array<string>, fromKickoffTime?: Date, toKickoffTime?: Date, teamIds?: Array<number>, statusTypes?: Array<string>, statusCodes?: Array<string>, refereeId?: number, venueId?: string, sortDirection?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<V2Match>>>> {
            const localVarAxiosArgs = await MatchesApiAxiosParamCreator(configuration).v2MatchesGet(limit, offset, tournamentIds, seasonIds, stageIds, groupIds, roundIds, roundFilter, fromKickoffTime, toKickoffTime, teamIds, statusTypes, statusCodes, refereeId, venueId, sortDirection, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id Unique identifier of the resource.
         * @param {string} [languageCode] Returns translated response based on the language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2MatchesIdGet(id: string, languageCode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<V2Match>>> {
            const localVarAxiosArgs = await MatchesApiAxiosParamCreator(configuration).v2MatchesIdGet(id, languageCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {V2MatchInput} body Match information to save
         * @param {string} id Unique identifier of the resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2MatchesIdPut(body: V2MatchInput, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<V2Match>>> {
            const localVarAxiosArgs = await MatchesApiAxiosParamCreator(configuration).v2MatchesIdPut(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of matches
         * @param {Array<number>} [matchIds] Filter matches by their IDs
         * @param {string} [date] Filter matches by the date when they were played, format is ISO 8601
         * @param {number} [utcOffset] Filter matches by date and UTC offset, allowed value range: [-12,14]
         * @param {string} [tournamentGroup] Filter matches by a tournament group code
         * @param {Array<string>} [statusTypes] Filter matches by status types
         * @param {string} [selectionFilter] Fetch selected matches for specific date and tournament_group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2MatchesLivescoreGet(matchIds?: Array<number>, date?: string, utcOffset?: number, tournamentGroup?: string, statusTypes?: Array<string>, selectionFilter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<V2Match>>>> {
            const localVarAxiosArgs = await MatchesApiAxiosParamCreator(configuration).v2MatchesLivescoreGet(matchIds, date, utcOffset, tournamentGroup, statusTypes, selectionFilter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {V2MatchInput} body Match information to save
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2MatchesPost(body: V2MatchInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<V2Match>>> {
            const localVarAxiosArgs = await MatchesApiAxiosParamCreator(configuration).v2MatchesPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MatchesApi - factory interface
 * @export
 */
export const MatchesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get a list of live commentaries with specified match id and language
         * @param {string} id Unique identifier of the resource.
         * @param {string} languageCode Return translations depending on language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async matchesIdCommentaryGet(id: string, languageCode: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<LiveCommentaryOutputDto>>> {
            return MatchesApiFp(configuration).matchesIdCommentaryGet(id, languageCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of matches
         * @param {number} limit Select an upper limit for the matches that would be returned
         * @param {number} offset Select an offset for the matches that would be returned
         * @param {Array<number>} [tournamentIds] Filter matches, which have been played as part of the listed tournaments
         * @param {Array<number>} [seasonIds] Filter matches, which have been played as part of the listed tournament seasons
         * @param {Array<number>} [stageIds] Filter matches, which have been played as part of the listed tournament stages
         * @param {Array<number>} [groupIds] Filter matches, which have been played as part of the listed tournament groups
         * @param {Array<string>} [roundIds] Filter matches, which have been played as part of the listed tournament rounds
         * @param {Array<string>} [roundFilter] Filter matches by combinations of stage_id and round_id. Format: {stage_id}:{round_id}
         * @param {Date} [fromKickoffTime] Filter matches, which have a start_time after the specified date, format is ISO 8601
         * @param {Date} [toKickoffTime] Filter matches, which have a start_time before the specified date, format is ISO 8601
         * @param {Array<number>} [teamIds] Filter matches by teams which have taken part in them
         * @param {Array<string>} [statusTypes] Filter matches by their status types
         * @param {Array<string>} [statusCodes] Filter matches by their status codes
         * @param {number} [refereeId] Filter matches by the referee who has taken part in them
         * @param {string} [venueId] Filter matches by the venue that has hosted them
         * @param {string} [sortDirection] Sort matches in asc|desc order by start_time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2MatchesGet(limit: number, offset: number, tournamentIds?: Array<number>, seasonIds?: Array<number>, stageIds?: Array<number>, groupIds?: Array<number>, roundIds?: Array<string>, roundFilter?: Array<string>, fromKickoffTime?: Date, toKickoffTime?: Date, teamIds?: Array<number>, statusTypes?: Array<string>, statusCodes?: Array<string>, refereeId?: number, venueId?: string, sortDirection?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<V2Match>>> {
            return MatchesApiFp(configuration).v2MatchesGet(limit, offset, tournamentIds, seasonIds, stageIds, groupIds, roundIds, roundFilter, fromKickoffTime, toKickoffTime, teamIds, statusTypes, statusCodes, refereeId, venueId, sortDirection, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id Unique identifier of the resource.
         * @param {string} [languageCode] Returns translated response based on the language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2MatchesIdGet(id: string, languageCode?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<V2Match>> {
            return MatchesApiFp(configuration).v2MatchesIdGet(id, languageCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {V2MatchInput} body Match information to save
         * @param {string} id Unique identifier of the resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2MatchesIdPut(body: V2MatchInput, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<V2Match>> {
            return MatchesApiFp(configuration).v2MatchesIdPut(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of matches
         * @param {Array<number>} [matchIds] Filter matches by their IDs
         * @param {string} [date] Filter matches by the date when they were played, format is ISO 8601
         * @param {number} [utcOffset] Filter matches by date and UTC offset, allowed value range: [-12,14]
         * @param {string} [tournamentGroup] Filter matches by a tournament group code
         * @param {Array<string>} [statusTypes] Filter matches by status types
         * @param {string} [selectionFilter] Fetch selected matches for specific date and tournament_group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2MatchesLivescoreGet(matchIds?: Array<number>, date?: string, utcOffset?: number, tournamentGroup?: string, statusTypes?: Array<string>, selectionFilter?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<V2Match>>> {
            return MatchesApiFp(configuration).v2MatchesLivescoreGet(matchIds, date, utcOffset, tournamentGroup, statusTypes, selectionFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {V2MatchInput} body Match information to save
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2MatchesPost(body: V2MatchInput, options?: AxiosRequestConfig): Promise<AxiosResponse<V2Match>> {
            return MatchesApiFp(configuration).v2MatchesPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MatchesApi - object-oriented interface
 * @export
 * @class MatchesApi
 * @extends {BaseAPI}
 */
export class MatchesApi extends BaseAPI {
    /**
     * Get a list of live commentaries with specified match id and language
     * @param {string} id Unique identifier of the resource.
     * @param {string} languageCode Return translations depending on language code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApi
     */
    public async matchesIdCommentaryGet(id: string, languageCode: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<LiveCommentaryOutputDto>>> {
        return MatchesApiFp(this.configuration).matchesIdCommentaryGet(id, languageCode, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of matches
     * @param {number} limit Select an upper limit for the matches that would be returned
     * @param {number} offset Select an offset for the matches that would be returned
     * @param {Array<number>} [tournamentIds] Filter matches, which have been played as part of the listed tournaments
     * @param {Array<number>} [seasonIds] Filter matches, which have been played as part of the listed tournament seasons
     * @param {Array<number>} [stageIds] Filter matches, which have been played as part of the listed tournament stages
     * @param {Array<number>} [groupIds] Filter matches, which have been played as part of the listed tournament groups
     * @param {Array<string>} [roundIds] Filter matches, which have been played as part of the listed tournament rounds
     * @param {Array<string>} [roundFilter] Filter matches by combinations of stage_id and round_id. Format: {stage_id}:{round_id}
     * @param {Date} [fromKickoffTime] Filter matches, which have a start_time after the specified date, format is ISO 8601
     * @param {Date} [toKickoffTime] Filter matches, which have a start_time before the specified date, format is ISO 8601
     * @param {Array<number>} [teamIds] Filter matches by teams which have taken part in them
     * @param {Array<string>} [statusTypes] Filter matches by their status types
     * @param {Array<string>} [statusCodes] Filter matches by their status codes
     * @param {number} [refereeId] Filter matches by the referee who has taken part in them
     * @param {string} [venueId] Filter matches by the venue that has hosted them
     * @param {string} [sortDirection] Sort matches in asc|desc order by start_time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApi
     */
    public async v2MatchesGet(limit: number, offset: number, tournamentIds?: Array<number>, seasonIds?: Array<number>, stageIds?: Array<number>, groupIds?: Array<number>, roundIds?: Array<string>, roundFilter?: Array<string>, fromKickoffTime?: Date, toKickoffTime?: Date, teamIds?: Array<number>, statusTypes?: Array<string>, statusCodes?: Array<string>, refereeId?: number, venueId?: string, sortDirection?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<V2Match>>> {
        return MatchesApiFp(this.configuration).v2MatchesGet(limit, offset, tournamentIds, seasonIds, stageIds, groupIds, roundIds, roundFilter, fromKickoffTime, toKickoffTime, teamIds, statusTypes, statusCodes, refereeId, venueId, sortDirection, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} id Unique identifier of the resource.
     * @param {string} [languageCode] Returns translated response based on the language code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApi
     */
    public async v2MatchesIdGet(id: string, languageCode?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<V2Match>> {
        return MatchesApiFp(this.configuration).v2MatchesIdGet(id, languageCode, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {V2MatchInput} body Match information to save
     * @param {string} id Unique identifier of the resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApi
     */
    public async v2MatchesIdPut(body: V2MatchInput, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<V2Match>> {
        return MatchesApiFp(this.configuration).v2MatchesIdPut(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of matches
     * @param {Array<number>} [matchIds] Filter matches by their IDs
     * @param {string} [date] Filter matches by the date when they were played, format is ISO 8601
     * @param {number} [utcOffset] Filter matches by date and UTC offset, allowed value range: [-12,14]
     * @param {string} [tournamentGroup] Filter matches by a tournament group code
     * @param {Array<string>} [statusTypes] Filter matches by status types
     * @param {string} [selectionFilter] Fetch selected matches for specific date and tournament_group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApi
     */
    public async v2MatchesLivescoreGet(matchIds?: Array<number>, date?: string, utcOffset?: number, tournamentGroup?: string, statusTypes?: Array<string>, selectionFilter?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<V2Match>>> {
        return MatchesApiFp(this.configuration).v2MatchesLivescoreGet(matchIds, date, utcOffset, tournamentGroup, statusTypes, selectionFilter, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {V2MatchInput} body Match information to save
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApi
     */
    public async v2MatchesPost(body: V2MatchInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<V2Match>> {
        return MatchesApiFp(this.configuration).v2MatchesPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
