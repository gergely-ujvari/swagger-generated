/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Odd } from '../models';
import { OddProvider } from '../models';
/**
 * OddsApi - axios parameter creator
 * @export
 */
export const OddsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get available liveodds for an event
         * @param {string} id Unique identifier of the resource.
         * @param {string} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#x27;coupon&#x27; key with the odds fo building URLs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsIdLiveoddsGet: async (id: string, xOddClient: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling eventsIdLiveoddsGet.');
            }
            // verify required parameter 'xOddClient' is not null or undefined
            if (xOddClient === null || xOddClient === undefined) {
                throw new RequiredError('xOddClient','Required parameter xOddClient was null or undefined when calling eventsIdLiveoddsGet.');
            }
            const localVarPath = `/events/{id}/liveodds`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (xOddClient !== undefined && xOddClient !== null) {
                localVarHeaderParameter['X-Odd-Client'] = String(xOddClient);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of odds available in the system
         * @param {string} id Unique identifier of the resource.
         * @param {string} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#x27;coupon&#x27; key with the odds fo building URLs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsIdOddsGet: async (id: string, xOddClient: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling eventsIdOddsGet.');
            }
            // verify required parameter 'xOddClient' is not null or undefined
            if (xOddClient === null || xOddClient === undefined) {
                throw new RequiredError('xOddClient','Required parameter xOddClient was null or undefined when calling eventsIdOddsGet.');
            }
            const localVarPath = `/events/{id}/odds`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (xOddClient !== undefined && xOddClient !== null) {
                localVarHeaderParameter['X-Odd-Client'] = String(xOddClient);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get available pre-game odds for an Event
         * @param {string} id Unique identifier of the resource.
         * @param {string} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#x27;coupon&#x27; key with the odds fo building URLs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsIdPregameoddsGet: async (id: string, xOddClient: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling eventsIdPregameoddsGet.');
            }
            // verify required parameter 'xOddClient' is not null or undefined
            if (xOddClient === null || xOddClient === undefined) {
                throw new RequiredError('xOddClient','Required parameter xOddClient was null or undefined when calling eventsIdPregameoddsGet.');
            }
            const localVarPath = `/events/{id}/pregameodds`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (xOddClient !== undefined && xOddClient !== null) {
                localVarHeaderParameter['X-Odd-Client'] = String(xOddClient);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of liveodds available in the system
         * @param {string} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#x27;coupon&#x27; key with the odds fo building URLs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        liveoddsGet: async (xOddClient: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xOddClient' is not null or undefined
            if (xOddClient === null || xOddClient === undefined) {
                throw new RequiredError('xOddClient','Required parameter xOddClient was null or undefined when calling liveoddsGet.');
            }
            const localVarPath = `/liveodds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (xOddClient !== undefined && xOddClient !== null) {
                localVarHeaderParameter['X-Odd-Client'] = String(xOddClient);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a list of OddProviders available in the system. If X-Odd-Client is specified they will be filtered and ordered by the client configuration.
         * @param {string} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#x27;coupon&#x27; key with the odds fo building URLs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oddProvidersGet: async (xOddClient: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xOddClient' is not null or undefined
            if (xOddClient === null || xOddClient === undefined) {
                throw new RequiredError('xOddClient','Required parameter xOddClient was null or undefined when calling oddProvidersGet.');
            }
            const localVarPath = `/odd_providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (xOddClient !== undefined && xOddClient !== null) {
                localVarHeaderParameter['X-Odd-Client'] = String(xOddClient);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of Odds
         * @param {string} oddClient Odd client code
         * @param {string} sportType Sport type filter
         * @param {string} eventType Event type filter
         * @param {Date} [fromEventStartTime] Return odds for Events with start_time &gt;&#x3D; from_event_start_time. RFC 3339 format
         * @param {Date} [toEventStartTime] Return odds for Events with start_time &lt;&#x3D; to_event_start_time. RFC 3339 format
         * @param {number} [teamId] Team ID
         * @param {string} [teamIds] List for team IDs separated by commas.
         * @param {string} [eventOrder] Order matching events for a specific client
         * @param {string} [matchIds] List for match IDs separated by commas.
         * @param {string} [tournamentIds] List for tournament IDs separated by commas.
         * @param {string} [seasonIds] List for season IDs separated by commas.
         * @param {string} [oddsType] Pregame or live odds selector.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oddsGet: async (oddClient: string, sportType: string, eventType: string, fromEventStartTime?: Date, toEventStartTime?: Date, teamId?: number, teamIds?: string, eventOrder?: string, matchIds?: string, tournamentIds?: string, seasonIds?: string, oddsType?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oddClient' is not null or undefined
            if (oddClient === null || oddClient === undefined) {
                throw new RequiredError('oddClient','Required parameter oddClient was null or undefined when calling oddsGet.');
            }
            // verify required parameter 'sportType' is not null or undefined
            if (sportType === null || sportType === undefined) {
                throw new RequiredError('sportType','Required parameter sportType was null or undefined when calling oddsGet.');
            }
            // verify required parameter 'eventType' is not null or undefined
            if (eventType === null || eventType === undefined) {
                throw new RequiredError('eventType','Required parameter eventType was null or undefined when calling oddsGet.');
            }
            const localVarPath = `/odds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (fromEventStartTime !== undefined) {
                localVarQueryParameter['from_event_start_time'] = (fromEventStartTime as any instanceof Date) ?
                    (fromEventStartTime as any).toISOString() :
                    fromEventStartTime;
            }

            if (toEventStartTime !== undefined) {
                localVarQueryParameter['to_event_start_time'] = (toEventStartTime as any instanceof Date) ?
                    (toEventStartTime as any).toISOString() :
                    toEventStartTime;
            }

            if (oddClient !== undefined) {
                localVarQueryParameter['odd_client'] = oddClient;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (teamIds !== undefined) {
                localVarQueryParameter['team_ids'] = teamIds;
            }

            if (eventOrder !== undefined) {
                localVarQueryParameter['event_order'] = eventOrder;
            }

            if (sportType !== undefined) {
                localVarQueryParameter['sport_type'] = sportType;
            }

            if (matchIds !== undefined) {
                localVarQueryParameter['match_ids'] = matchIds;
            }

            if (tournamentIds !== undefined) {
                localVarQueryParameter['tournament_ids'] = tournamentIds;
            }

            if (seasonIds !== undefined) {
                localVarQueryParameter['season_ids'] = seasonIds;
            }

            if (eventType !== undefined) {
                localVarQueryParameter['event_type'] = eventType;
            }

            if (oddsType !== undefined) {
                localVarQueryParameter['odds_type'] = oddsType;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of Odd Providers which have odds available for a given Event
         * @param {string} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#x27;coupon&#x27; key with the odds fo building URLs.
         * @param {Date} [fromTime] Return odds for Events with start_time &gt;&#x3D; from_time. RFC 3339 format
         * @param {Date} [toTime] Return odds for Events with start_time &lt;&#x3D; to_time. RFC 3339 format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pregameoddsGet: async (xOddClient: string, fromTime?: Date, toTime?: Date, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xOddClient' is not null or undefined
            if (xOddClient === null || xOddClient === undefined) {
                throw new RequiredError('xOddClient','Required parameter xOddClient was null or undefined when calling pregameoddsGet.');
            }
            const localVarPath = `/pregameodds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (fromTime !== undefined) {
                localVarQueryParameter['from_time'] = (fromTime as any instanceof Date) ?
                    (fromTime as any).toISOString() :
                    fromTime;
            }

            if (toTime !== undefined) {
                localVarQueryParameter['to_time'] = (toTime as any instanceof Date) ?
                    (toTime as any).toISOString() :
                    toTime;
            }

            if (xOddClient !== undefined && xOddClient !== null) {
                localVarHeaderParameter['X-Odd-Client'] = String(xOddClient);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OddsApi - functional programming interface
 * @export
 */
export const OddsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get available liveodds for an event
         * @param {string} id Unique identifier of the resource.
         * @param {string} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#x27;coupon&#x27; key with the odds fo building URLs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsIdLiveoddsGet(id: string, xOddClient: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Odd>>>> {
            const localVarAxiosArgs = await OddsApiAxiosParamCreator(configuration).eventsIdLiveoddsGet(id, xOddClient, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of odds available in the system
         * @param {string} id Unique identifier of the resource.
         * @param {string} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#x27;coupon&#x27; key with the odds fo building URLs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsIdOddsGet(id: string, xOddClient: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Odd>>>> {
            const localVarAxiosArgs = await OddsApiAxiosParamCreator(configuration).eventsIdOddsGet(id, xOddClient, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get available pre-game odds for an Event
         * @param {string} id Unique identifier of the resource.
         * @param {string} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#x27;coupon&#x27; key with the odds fo building URLs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsIdPregameoddsGet(id: string, xOddClient: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Odd>>>> {
            const localVarAxiosArgs = await OddsApiAxiosParamCreator(configuration).eventsIdPregameoddsGet(id, xOddClient, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of liveodds available in the system
         * @param {string} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#x27;coupon&#x27; key with the odds fo building URLs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async liveoddsGet(xOddClient: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Odd>>>> {
            const localVarAxiosArgs = await OddsApiAxiosParamCreator(configuration).liveoddsGet(xOddClient, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Return a list of OddProviders available in the system. If X-Odd-Client is specified they will be filtered and ordered by the client configuration.
         * @param {string} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#x27;coupon&#x27; key with the odds fo building URLs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oddProvidersGet(xOddClient: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<OddProvider>>>> {
            const localVarAxiosArgs = await OddsApiAxiosParamCreator(configuration).oddProvidersGet(xOddClient, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a list of Odds
         * @param {string} oddClient Odd client code
         * @param {string} sportType Sport type filter
         * @param {string} eventType Event type filter
         * @param {Date} [fromEventStartTime] Return odds for Events with start_time &gt;&#x3D; from_event_start_time. RFC 3339 format
         * @param {Date} [toEventStartTime] Return odds for Events with start_time &lt;&#x3D; to_event_start_time. RFC 3339 format
         * @param {number} [teamId] Team ID
         * @param {string} [teamIds] List for team IDs separated by commas.
         * @param {string} [eventOrder] Order matching events for a specific client
         * @param {string} [matchIds] List for match IDs separated by commas.
         * @param {string} [tournamentIds] List for tournament IDs separated by commas.
         * @param {string} [seasonIds] List for season IDs separated by commas.
         * @param {string} [oddsType] Pregame or live odds selector.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oddsGet(oddClient: string, sportType: string, eventType: string, fromEventStartTime?: Date, toEventStartTime?: Date, teamId?: number, teamIds?: string, eventOrder?: string, matchIds?: string, tournamentIds?: string, seasonIds?: string, oddsType?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Odd>>>> {
            const localVarAxiosArgs = await OddsApiAxiosParamCreator(configuration).oddsGet(oddClient, sportType, eventType, fromEventStartTime, toEventStartTime, teamId, teamIds, eventOrder, matchIds, tournamentIds, seasonIds, oddsType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a list of Odd Providers which have odds available for a given Event
         * @param {string} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#x27;coupon&#x27; key with the odds fo building URLs.
         * @param {Date} [fromTime] Return odds for Events with start_time &gt;&#x3D; from_time. RFC 3339 format
         * @param {Date} [toTime] Return odds for Events with start_time &lt;&#x3D; to_time. RFC 3339 format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pregameoddsGet(xOddClient: string, fromTime?: Date, toTime?: Date, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Odd>>>> {
            const localVarAxiosArgs = await OddsApiAxiosParamCreator(configuration).pregameoddsGet(xOddClient, fromTime, toTime, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OddsApi - factory interface
 * @export
 */
export const OddsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get available liveodds for an event
         * @param {string} id Unique identifier of the resource.
         * @param {string} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#x27;coupon&#x27; key with the odds fo building URLs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsIdLiveoddsGet(id: string, xOddClient: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Odd>>> {
            return OddsApiFp(configuration).eventsIdLiveoddsGet(id, xOddClient, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of odds available in the system
         * @param {string} id Unique identifier of the resource.
         * @param {string} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#x27;coupon&#x27; key with the odds fo building URLs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsIdOddsGet(id: string, xOddClient: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Odd>>> {
            return OddsApiFp(configuration).eventsIdOddsGet(id, xOddClient, options).then((request) => request(axios, basePath));
        },
        /**
         * Get available pre-game odds for an Event
         * @param {string} id Unique identifier of the resource.
         * @param {string} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#x27;coupon&#x27; key with the odds fo building URLs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsIdPregameoddsGet(id: string, xOddClient: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Odd>>> {
            return OddsApiFp(configuration).eventsIdPregameoddsGet(id, xOddClient, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of liveodds available in the system
         * @param {string} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#x27;coupon&#x27; key with the odds fo building URLs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async liveoddsGet(xOddClient: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Odd>>> {
            return OddsApiFp(configuration).liveoddsGet(xOddClient, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a list of OddProviders available in the system. If X-Odd-Client is specified they will be filtered and ordered by the client configuration.
         * @param {string} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#x27;coupon&#x27; key with the odds fo building URLs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oddProvidersGet(xOddClient: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<OddProvider>>> {
            return OddsApiFp(configuration).oddProvidersGet(xOddClient, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of Odds
         * @param {string} oddClient Odd client code
         * @param {string} sportType Sport type filter
         * @param {string} eventType Event type filter
         * @param {Date} [fromEventStartTime] Return odds for Events with start_time &gt;&#x3D; from_event_start_time. RFC 3339 format
         * @param {Date} [toEventStartTime] Return odds for Events with start_time &lt;&#x3D; to_event_start_time. RFC 3339 format
         * @param {number} [teamId] Team ID
         * @param {string} [teamIds] List for team IDs separated by commas.
         * @param {string} [eventOrder] Order matching events for a specific client
         * @param {string} [matchIds] List for match IDs separated by commas.
         * @param {string} [tournamentIds] List for tournament IDs separated by commas.
         * @param {string} [seasonIds] List for season IDs separated by commas.
         * @param {string} [oddsType] Pregame or live odds selector.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oddsGet(oddClient: string, sportType: string, eventType: string, fromEventStartTime?: Date, toEventStartTime?: Date, teamId?: number, teamIds?: string, eventOrder?: string, matchIds?: string, tournamentIds?: string, seasonIds?: string, oddsType?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Odd>>> {
            return OddsApiFp(configuration).oddsGet(oddClient, sportType, eventType, fromEventStartTime, toEventStartTime, teamId, teamIds, eventOrder, matchIds, tournamentIds, seasonIds, oddsType, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of Odd Providers which have odds available for a given Event
         * @param {string} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#x27;coupon&#x27; key with the odds fo building URLs.
         * @param {Date} [fromTime] Return odds for Events with start_time &gt;&#x3D; from_time. RFC 3339 format
         * @param {Date} [toTime] Return odds for Events with start_time &lt;&#x3D; to_time. RFC 3339 format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pregameoddsGet(xOddClient: string, fromTime?: Date, toTime?: Date, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Odd>>> {
            return OddsApiFp(configuration).pregameoddsGet(xOddClient, fromTime, toTime, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OddsApi - object-oriented interface
 * @export
 * @class OddsApi
 * @extends {BaseAPI}
 */
export class OddsApi extends BaseAPI {
    /**
     * Get available liveodds for an event
     * @param {string} id Unique identifier of the resource.
     * @param {string} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#x27;coupon&#x27; key with the odds fo building URLs.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OddsApi
     */
    public async eventsIdLiveoddsGet(id: string, xOddClient: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Odd>>> {
        return OddsApiFp(this.configuration).eventsIdLiveoddsGet(id, xOddClient, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of odds available in the system
     * @param {string} id Unique identifier of the resource.
     * @param {string} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#x27;coupon&#x27; key with the odds fo building URLs.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OddsApi
     */
    public async eventsIdOddsGet(id: string, xOddClient: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Odd>>> {
        return OddsApiFp(this.configuration).eventsIdOddsGet(id, xOddClient, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get available pre-game odds for an Event
     * @param {string} id Unique identifier of the resource.
     * @param {string} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#x27;coupon&#x27; key with the odds fo building URLs.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OddsApi
     */
    public async eventsIdPregameoddsGet(id: string, xOddClient: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Odd>>> {
        return OddsApiFp(this.configuration).eventsIdPregameoddsGet(id, xOddClient, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of liveodds available in the system
     * @param {string} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#x27;coupon&#x27; key with the odds fo building URLs.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OddsApi
     */
    public async liveoddsGet(xOddClient: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Odd>>> {
        return OddsApiFp(this.configuration).liveoddsGet(xOddClient, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Return a list of OddProviders available in the system. If X-Odd-Client is specified they will be filtered and ordered by the client configuration.
     * @param {string} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#x27;coupon&#x27; key with the odds fo building URLs.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OddsApi
     */
    public async oddProvidersGet(xOddClient: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<OddProvider>>> {
        return OddsApiFp(this.configuration).oddProvidersGet(xOddClient, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of Odds
     * @param {string} oddClient Odd client code
     * @param {string} sportType Sport type filter
     * @param {string} eventType Event type filter
     * @param {Date} [fromEventStartTime] Return odds for Events with start_time &gt;&#x3D; from_event_start_time. RFC 3339 format
     * @param {Date} [toEventStartTime] Return odds for Events with start_time &lt;&#x3D; to_event_start_time. RFC 3339 format
     * @param {number} [teamId] Team ID
     * @param {string} [teamIds] List for team IDs separated by commas.
     * @param {string} [eventOrder] Order matching events for a specific client
     * @param {string} [matchIds] List for match IDs separated by commas.
     * @param {string} [tournamentIds] List for tournament IDs separated by commas.
     * @param {string} [seasonIds] List for season IDs separated by commas.
     * @param {string} [oddsType] Pregame or live odds selector.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OddsApi
     */
    public async oddsGet(oddClient: string, sportType: string, eventType: string, fromEventStartTime?: Date, toEventStartTime?: Date, teamId?: number, teamIds?: string, eventOrder?: string, matchIds?: string, tournamentIds?: string, seasonIds?: string, oddsType?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Odd>>> {
        return OddsApiFp(this.configuration).oddsGet(oddClient, sportType, eventType, fromEventStartTime, toEventStartTime, teamId, teamIds, eventOrder, matchIds, tournamentIds, seasonIds, oddsType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of Odd Providers which have odds available for a given Event
     * @param {string} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#x27;coupon&#x27; key with the odds fo building URLs.
     * @param {Date} [fromTime] Return odds for Events with start_time &gt;&#x3D; from_time. RFC 3339 format
     * @param {Date} [toTime] Return odds for Events with start_time &lt;&#x3D; to_time. RFC 3339 format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OddsApi
     */
    public async pregameoddsGet(xOddClient: string, fromTime?: Date, toTime?: Date, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Odd>>> {
        return OddsApiFp(this.configuration).pregameoddsGet(xOddClient, fromTime, toTime, options).then((request) => request(this.axios, this.basePath));
    }
}
