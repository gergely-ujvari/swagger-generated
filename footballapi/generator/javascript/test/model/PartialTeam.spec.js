/*
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FootballApi);
  }
}(this, function(expect, FootballApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('PartialTeam', function() {
      beforeEach(function() {
        instance = new FootballApi.PartialTeam();
      });

      it('should create an instance of PartialTeam', function() {
        // TODO: update the code to test PartialTeam
        expect(instance).to.be.a(FootballApi.PartialTeam);
      });

      it('should have the property national (base name: "national")', function() {
        // TODO: update the code to test the property national
        expect(instance).to.have.property('national');
        // expect(instance.national).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property threeLetterCode (base name: "threeLetterCode")', function() {
        // TODO: update the code to test the property threeLetterCode
        expect(instance).to.have.property('threeLetterCode');
        // expect(instance.threeLetterCode).to.be(expectedValueLiteral);
      });

      it('should have the property shortName (base name: "shortName")', function() {
        // TODO: update the code to test the property shortName
        expect(instance).to.have.property('shortName');
        // expect(instance.shortName).to.be(expectedValueLiteral);
      });

      it('should have the property undecided (base name: "undecided")', function() {
        // TODO: update the code to test the property undecided
        expect(instance).to.have.property('undecided');
        // expect(instance.undecided).to.be(expectedValueLiteral);
      });

      it('should have the property gender (base name: "gender")', function() {
        // TODO: update the code to test the property gender
        expect(instance).to.have.property('gender');
        // expect(instance.gender).to.be(expectedValueLiteral);
      });

      it('should have the property urlLogo (base name: "url_logo")', function() {
        // TODO: update the code to test the property urlLogo
        expect(instance).to.have.property('urlLogo');
        // expect(instance.urlLogo).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

    });
  });

}));
