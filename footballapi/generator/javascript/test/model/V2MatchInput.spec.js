/*
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FootballApi);
  }
}(this, function(expect, FootballApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('V2MatchInput', function() {
      beforeEach(function() {
        instance = new FootballApi.V2MatchInput();
      });

      it('should create an instance of V2MatchInput', function() {
        // TODO: update the code to test V2MatchInput
        expect(instance).to.be.a(FootballApi.V2MatchInput);
      });

      it('should have the property statusId (base name: "status_id")', function() {
        // TODO: update the code to test the property statusId
        expect(instance).to.have.property('statusId');
        // expect(instance.statusId).to.be(expectedValueLiteral);
      });

      it('should have the property kickoffTime (base name: "kickoff_time")', function() {
        // TODO: update the code to test the property kickoffTime
        expect(instance).to.have.property('kickoffTime');
        // expect(instance.kickoffTime).to.be(expectedValueLiteral);
      });

      it('should have the property stageId (base name: "stage_id")', function() {
        // TODO: update the code to test the property stageId
        expect(instance).to.have.property('stageId');
        // expect(instance.stageId).to.be(expectedValueLiteral);
      });

      it('should have the property homeTeamId (base name: "home_team_id")', function() {
        // TODO: update the code to test the property homeTeamId
        expect(instance).to.have.property('homeTeamId');
        // expect(instance.homeTeamId).to.be(expectedValueLiteral);
      });

      it('should have the property awayTeamId (base name: "away_team_id")', function() {
        // TODO: update the code to test the property awayTeamId
        expect(instance).to.have.property('awayTeamId');
        // expect(instance.awayTeamId).to.be(expectedValueLiteral);
      });

      it('should have the property roundKey (base name: "round_key")', function() {
        // TODO: update the code to test the property roundKey
        expect(instance).to.have.property('roundKey');
        // expect(instance.roundKey).to.be(expectedValueLiteral);
      });

      it('should have the property groupId (base name: "group_id")', function() {
        // TODO: update the code to test the property groupId
        expect(instance).to.have.property('groupId');
        // expect(instance.groupId).to.be(expectedValueLiteral);
      });

      it('should have the property venueId (base name: "venue_id")', function() {
        // TODO: update the code to test the property venueId
        expect(instance).to.have.property('venueId');
        // expect(instance.venueId).to.be(expectedValueLiteral);
      });

      it('should have the property referees (base name: "referees")', function() {
        // TODO: update the code to test the property referees
        expect(instance).to.have.property('referees');
        // expect(instance.referees).to.be(expectedValueLiteral);
      });

      it('should have the property score (base name: "score")', function() {
        // TODO: update the code to test the property score
        expect(instance).to.have.property('score');
        // expect(instance.score).to.be(expectedValueLiteral);
      });

      it('should have the property spectators (base name: "spectators")', function() {
        // TODO: update the code to test the property spectators
        expect(instance).to.have.property('spectators');
        // expect(instance.spectators).to.be(expectedValueLiteral);
      });

      it('should have the property coverage (base name: "coverage")', function() {
        // TODO: update the code to test the property coverage
        expect(instance).to.have.property('coverage');
        // expect(instance.coverage).to.be(expectedValueLiteral);
      });

      it('should have the property finishedAt (base name: "finished_at")', function() {
        // TODO: update the code to test the property finishedAt
        expect(instance).to.have.property('finishedAt');
        // expect(instance.finishedAt).to.be(expectedValueLiteral);
      });

      it('should have the property phaseStartedAt (base name: "phase_started_at")', function() {
        // TODO: update the code to test the property phaseStartedAt
        expect(instance).to.have.property('phaseStartedAt');
        // expect(instance.phaseStartedAt).to.be(expectedValueLiteral);
      });

    });
  });

}));
