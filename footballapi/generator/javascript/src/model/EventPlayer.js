/*
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {EventPlayerType} from './EventPlayerType';
import {PartialPerson} from './PartialPerson';

/**
 * The EventPlayer model module.
 * @module model/EventPlayer
 * @version 0.0.1
 */
export class EventPlayer {
  /**
   * Constructs a new <code>EventPlayer</code>.
   * @alias module:model/EventPlayer
   * @class
   * @param id {Number} Unique identifier
   * @param player {module:model/PartialPerson} 
   * @param eventPlayerType {module:model/EventPlayerType} 
   * @param homeTeam {Boolean} Whether the player is from the home or the away team
   */
  constructor(id, player, eventPlayerType, homeTeam) {
    this.id = id;
    this.player = player;
    this.eventPlayerType = eventPlayerType;
    this.homeTeam = homeTeam;
  }

  /**
   * Constructs a <code>EventPlayer</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/EventPlayer} obj Optional instance to populate.
   * @return {module:model/EventPlayer} The populated <code>EventPlayer</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new EventPlayer();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('player'))
        obj.player = PartialPerson.constructFromObject(data['player']);
      if (data.hasOwnProperty('event_player_type'))
        obj.eventPlayerType = EventPlayerType.constructFromObject(data['event_player_type']);
      if (data.hasOwnProperty('home_team'))
        obj.homeTeam = ApiClient.convertToType(data['home_team'], 'Boolean');
      if (data.hasOwnProperty('position_x'))
        obj.positionX = ApiClient.convertToType(data['position_x'], 'Number');
      if (data.hasOwnProperty('position_y'))
        obj.positionY = ApiClient.convertToType(data['position_y'], 'Number');
      if (data.hasOwnProperty('position_number'))
        obj.positionNumber = ApiClient.convertToType(data['position_number'], 'Number');
      if (data.hasOwnProperty('shirt_number'))
        obj.shirtNumber = ApiClient.convertToType(data['shirt_number'], 'Number');
    }
    return obj;
  }
}

/**
 * Unique identifier
 * @member {Number} id
 */
EventPlayer.prototype.id = undefined;

/**
 * @member {module:model/PartialPerson} player
 */
EventPlayer.prototype.player = undefined;

/**
 * @member {module:model/EventPlayerType} eventPlayerType
 */
EventPlayer.prototype.eventPlayerType = undefined;

/**
 * Whether the player is from the home or the away team
 * @member {Boolean} homeTeam
 */
EventPlayer.prototype.homeTeam = undefined;

/**
 * Number indicating the player's vertical position on the field. 1 = Goalkeeper, 2-5 = Defender, 6-9 = Midfielder, 10-11 = Forward, where 5 is an offensive defender, 9 is an offensive midfielder, etc.
 * @member {Number} positionX
 */
EventPlayer.prototype.positionX = undefined;

/**
 * Number indicating the player's horizontal position on the field. Ranges from 1-9, where 1 = furthest right, 9 = furthest left.
 * @member {Number} positionY
 */
EventPlayer.prototype.positionY = undefined;

/**
 * Number 1-11 indicating the player's position in the lineup. 1 = goalkeeper, 2 = defender furthest right.
 * @member {Number} positionNumber
 */
EventPlayer.prototype.positionNumber = undefined;

/**
 * The shirt number the player is wearing
 * @member {Number} shirtNumber
 */
EventPlayer.prototype.shirtNumber = undefined;

