/*
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {Tournament} from './Tournament';
import {TournamentSeasonStage} from './TournamentSeasonStage';
import {TournamentSeasonWithTournament} from './TournamentSeasonWithTournament';

/**
 * The TournamentSeasonWithStages model module.
 * @module model/TournamentSeasonWithStages
 * @version 0.0.1
 */
export class TournamentSeasonWithStages extends TournamentSeasonWithTournament {
  /**
   * Constructs a new <code>TournamentSeasonWithStages</code>.
   * @alias module:model/TournamentSeasonWithStages
   * @class
   * @extends module:model/TournamentSeasonWithTournament
   * @param tournament {} 
   * @param stages {} List of stages which take place during the TournamentSeason. If the parent Tournament has regional_league = true, this will usually be one stage with cup = false.
   */
  constructor(tournament, stages) {
    super(id, name, active, tournament);
    this.stages = stages;
  }

  /**
   * Constructs a <code>TournamentSeasonWithStages</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TournamentSeasonWithStages} obj Optional instance to populate.
   * @return {module:model/TournamentSeasonWithStages} The populated <code>TournamentSeasonWithStages</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new TournamentSeasonWithStages();
      TournamentSeasonWithTournament.constructFromObject(data, obj);
      if (data.hasOwnProperty('stages'))
        obj.stages = ApiClient.convertToType(data['stages'], [TournamentSeasonStage]);
    }
    return obj;
  }
}

/**
 * List of stages which take place during the TournamentSeason. If the parent Tournament has regional_league = true, this will usually be one stage with cup = false.
 * @member {Array.<module:model/TournamentSeasonStage>} stages
 */
TournamentSeasonWithStages.prototype.stages = undefined;

