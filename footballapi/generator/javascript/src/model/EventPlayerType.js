/*
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The EventPlayerType model module.
 * @module model/EventPlayerType
 * @version 0.0.1
 */
export class EventPlayerType {
  /**
   * Constructs a new <code>EventPlayerType</code>.
   * @alias module:model/EventPlayerType
   * @class
   * @param category {module:model/EventPlayerType.CategoryEnum} Indicates what part of the lineup the player belongs to
   * @param name {String} Human readable name of the type
   * @param code {String} Internal unique code to identify the type
   */
  constructor(category, name, code) {
    this.category = category;
    this.name = name;
    this.code = code;
  }

  /**
   * Constructs a <code>EventPlayerType</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/EventPlayerType} obj Optional instance to populate.
   * @return {module:model/EventPlayerType} The populated <code>EventPlayerType</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new EventPlayerType();
      if (data.hasOwnProperty('category'))
        obj.category = ApiClient.convertToType(data['category'], 'String');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('code'))
        obj.code = ApiClient.convertToType(data['code'], 'String');
    }
    return obj;
  }
}

/**
 * Allowed values for the <code>category</code> property.
 * @enum {String}
 * @readonly
 */
EventPlayerType.CategoryEnum = {
  /**
   * value: "miss"
   * @const
   */
  miss: "miss",

  /**
   * value: "sub"
   * @const
   */
  sub: "sub",

  /**
   * value: "start"
   * @const
   */
  start: "start",

  /**
   * value: "unknown"
   * @const
   */
  unknown: "unknown"
};
/**
 * Indicates what part of the lineup the player belongs to
 * @member {module:model/EventPlayerType.CategoryEnum} category
 */
EventPlayerType.prototype.category = undefined;

/**
 * Human readable name of the type
 * @member {String} name
 */
EventPlayerType.prototype.name = undefined;

/**
 * Internal unique code to identify the type
 * @member {String} code
 */
EventPlayerType.prototype.code = undefined;

