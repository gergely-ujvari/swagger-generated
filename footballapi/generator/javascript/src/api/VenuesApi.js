/*
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {NotFoundError} from '../model/NotFoundError';
import {V2PostVenues} from '../model/V2PostVenues';
import {V2PutVenues} from '../model/V2PutVenues';
import {V2Venues} from '../model/V2Venues';
import {V2VenuesGetId} from '../model/V2VenuesGetId';
import {V2VenuesList} from '../model/V2VenuesList';
import {V2VenuesPut} from '../model/V2VenuesPut';

/**
* Venues service.
* @module api/VenuesApi
* @version 0.0.1
*/
export class VenuesApi {

    /**
    * Constructs a new VenuesApi. 
    * @alias module:api/VenuesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the v2VenuesGet operation.
     * @callback moduleapi/VenuesApi~v2VenuesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2VenuesList{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List venues with offset and limit parameters
     * @param {Number} offset The number of items to skip before starting to collect the result set
     * @param {Number} limit Limit the number of results returned
     * @param {Object} opts Optional parameters
     * @param {String} opts.seasonIds Filter venues which have hosted matches in the specified CSV season_ids
     * @param {String} opts.languageCode Returns translated response based on the language code (default to <.>)
     * @param {module:api/VenuesApi~v2VenuesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    v2VenuesGet(offset, limit, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling v2VenuesGet");
      }
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling v2VenuesGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'offset': offset,'limit': limit,'season_ids': opts['seasonIds'],'language_code': opts['languageCode']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = V2VenuesList;

      return this.apiClient.callApi(
        '/v2/venues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the v2VenuesIdGet operation.
     * @callback moduleapi/VenuesApi~v2VenuesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2VenuesGetId{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get venue by id
     * @param {String} id Unique identifier of the resource.
     * @param {Object} opts Optional parameters
     * @param {String} opts.languageCode Returns translated response based on the language code (default to <.>)
     * @param {module:api/VenuesApi~v2VenuesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    v2VenuesIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2VenuesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'language_code': opts['languageCode']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = V2VenuesGetId;

      return this.apiClient.callApi(
        '/v2/venues/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the v2VenuesIdPut operation.
     * @callback moduleapi/VenuesApi~v2VenuesIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2VenuesPut{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update venue information
     * @param {String} id Unique identifier of the resource.
     * @param {Object} opts Optional parameters
     * @param {module:model/V2PutVenues} opts.body Venue information to save in persistance
     * @param {module:api/VenuesApi~v2VenuesIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    v2VenuesIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2VenuesIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V2VenuesPut;

      return this.apiClient.callApi(
        '/v2/venues/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the v2VenuesPost operation.
     * @callback moduleapi/VenuesApi~v2VenuesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2Venues{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store a newly created venue in storage
     * @param {Object} opts Optional parameters
     * @param {module:model/V2PostVenues} opts.body 
     * @param {module:api/VenuesApi~v2VenuesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    v2VenuesPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V2Venues;

      return this.apiClient.callApi(
        '/v2/venues', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}