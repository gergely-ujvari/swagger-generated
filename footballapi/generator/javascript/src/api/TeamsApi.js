/*
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Event} from '../model/Event';
import {NotFoundError} from '../model/NotFoundError';
import {PartialTeam} from '../model/PartialTeam';
import {Team} from '../model/Team';
import {TeamEditDto} from '../model/TeamEditDto';
import {TeamForm} from '../model/TeamForm';
import {TeamPageDto} from '../model/TeamPageDto';
import {TeamPlayer} from '../model/TeamPlayer';
import {TeamPlayerSeasonStatistics} from '../model/TeamPlayerSeasonStatistics';
import {TeamSeasonStatistics} from '../model/TeamSeasonStatistics';
import {TournamentSeasonWithTournament} from '../model/TournamentSeasonWithTournament';
import {V2TeamColors} from '../model/V2TeamColors';
import {V2TeamProfile} from '../model/V2TeamProfile';

/**
* Teams service.
* @module api/TeamsApi
* @version 0.0.1
*/
export class TeamsApi {

    /**
    * Constructs a new TeamsApi. 
    * @alias module:api/TeamsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the countriesIdTeamsGet operation.
     * @callback moduleapi/TeamsApi~countriesIdTeamsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Team>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Teams for a specific Country.id
     * @param {String} id Unique identifier of the resource.
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation (default to <.>)
     * @param {module:model/String} opts.national Filter teams for different types of national and non national
     * @param {module:api/TeamsApi~countriesIdTeamsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    countriesIdTeamsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling countriesIdTeamsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'national': opts['national']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = [Team];

      return this.apiClient.callApi(
        '/countries/{id}/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the teamsGet operation.
     * @callback moduleapi/TeamsApi~teamsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Team>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search all teams by parameters
     * @param {String} name Filter by team. Length must be &gt;&#x3D; 4. The filter matches on a per word basis. If you query for &#x27;United&#x27; it will match both &#x27;West Ham United&#x27; and &#x27;Newcastle United&#x27;
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation (default to <.>)
     * @param {Number} opts.maxResults Limit the number of results returned (default to <.>)
     * @param {Number} opts.countryId Filter teams just from the specified country
     * @param {module:api/TeamsApi~teamsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    teamsGet(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling teamsGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'name': name,'max_results': opts['maxResults'],'country_id': opts['countryId']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = [Team];

      return this.apiClient.callApi(
        '/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the teamsIdEventsGet operation.
     * @callback moduleapi/TeamsApi~teamsIdEventsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of events in which a team with a specified id has participated
     * @param {String} id Unique identifier of the resource.
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation (default to <.>)
     * @param {Date} opts.fromTime Filter events, which have a start_time after the specified date, format is RFC 3339
     * @param {Date} opts.toTime Filter events, which have a start_time before the specified date, format is RFC 3339
     * @param {module:model/String} opts.direction Whether to sort the results by ascending or descending order
     * @param {Number} opts.tournamentSeasonStageId Filter events for a specific tournament_season_stage.id
     * @param {module:api/TeamsApi~teamsIdEventsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    teamsIdEventsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling teamsIdEventsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'from_time': opts['fromTime'],'to_time': opts['toTime'],'direction': opts['direction'],'tournament_season_stage_id': opts['tournamentSeasonStageId']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = [Event];

      return this.apiClient.callApi(
        '/teams/{id}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the teamsIdFormGet operation.
     * @callback moduleapi/TeamsApi~teamsIdFormGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamForm>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Team form information accross all tournaments
     * @param {String} id Unique identifier of the resource.
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation (default to <.>)
     * @param {module:model/String} opts.expand Whether to include information about every event in the TeamForm response
     * @param {module:api/TeamsApi~teamsIdFormGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    teamsIdFormGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling teamsIdFormGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = [TeamForm];

      return this.apiClient.callApi(
        '/teams/{id}/form', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the teamsIdGet operation.
     * @callback moduleapi/TeamsApi~teamsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Team{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about a specific Team
     * @param {String} id Unique identifier of the resource.
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation (default to <.>)
     * @param {module:model/String} opts.expand Specifies additional information to include with the Team response
     * @param {module:api/TeamsApi~teamsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    teamsIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling teamsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = Team;

      return this.apiClient.callApi(
        '/teams/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the teamsIdPlayersGet operation.
     * @callback moduleapi/TeamsApi~teamsIdPlayersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamPlayer>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the current squad for a Team
     * @param {String} id Unique identifier of the resource.
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation (default to <.>)
     * @param {module:model/String} opts.groupBy Group players by a specific property
     * @param {module:api/TeamsApi~teamsIdPlayersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    teamsIdPlayersGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling teamsIdPlayersGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'group_by': opts['groupBy']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = [TeamPlayer];

      return this.apiClient.callApi(
        '/teams/{id}/players', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the teamsIdPlayersStatisticsGet operation.
     * @callback moduleapi/TeamsApi~teamsIdPlayersStatisticsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamPlayerSeasonStatistics{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get player statistics for the current season in the Team&#x27;s League
     * @param {String} id Unique identifier of the resource.
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation (default to <.>)
     * @param {module:model/String} opts.groupBy Group the response by a specific property
     * @param {module:api/TeamsApi~teamsIdPlayersStatisticsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    teamsIdPlayersStatisticsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling teamsIdPlayersStatisticsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'group_by': opts['groupBy']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = TeamPlayerSeasonStatistics;

      return this.apiClient.callApi(
        '/teams/{id}/players/statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the teamsIdPlayersStatisticsSeasonsGet operation.
     * @callback moduleapi/TeamsApi~teamsIdPlayersStatisticsSeasonsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TournamentSeasonWithTournament>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of TournamentSeasons for which Player Statistics are available
     * @param {String} id Unique identifier of the resource.
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation (default to <.>)
     * @param {module:api/TeamsApi~teamsIdPlayersStatisticsSeasonsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    teamsIdPlayersStatisticsSeasonsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling teamsIdPlayersStatisticsSeasonsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = [TournamentSeasonWithTournament];

      return this.apiClient.callApi(
        '/teams/{id}/players/statistics/seasons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the teamsIdPlayersStatisticsSeasonsSeasonIdGet operation.
     * @callback moduleapi/TeamsApi~teamsIdPlayersStatisticsSeasonsSeasonIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamPlayerSeasonStatistics{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get player statistics for the current season in the Team&#x27;s League
     * @param {Number} seasonId Unique identifier of the TournamentSeason resource
     * @param {String} id Unique identifier of the resource.
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation (default to <.>)
     * @param {module:model/String} opts.groupBy Group the response by a specific property
     * @param {module:api/TeamsApi~teamsIdPlayersStatisticsSeasonsSeasonIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    teamsIdPlayersStatisticsSeasonsSeasonIdGet(seasonId, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'seasonId' is set
      if (seasonId === undefined || seasonId === null) {
        throw new Error("Missing the required parameter 'seasonId' when calling teamsIdPlayersStatisticsSeasonsSeasonIdGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling teamsIdPlayersStatisticsSeasonsSeasonIdGet");
      }

      let pathParams = {
        'seasonId': seasonId,'id': id
      };
      let queryParams = {
        'group_by': opts['groupBy']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = TeamPlayerSeasonStatistics;

      return this.apiClient.callApi(
        '/teams/{id}/players/statistics/seasons/{seasonId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the teamsIdStatisticsLeagueGet operation.
     * @callback moduleapi/TeamsApi~teamsIdStatisticsLeagueGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamSeasonStatistics{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the statistics for the latest League the team participates in
     * @param {String} id Unique identifier of the resource.
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation (default to <.>)
     * @param {module:model/String} opts.standing Select whether to include a full league standing or just the team&#x27;s position (default to <.>)
     * @param {module:api/TeamsApi~teamsIdStatisticsLeagueGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    teamsIdStatisticsLeagueGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling teamsIdStatisticsLeagueGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'standing': opts['standing']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = TeamSeasonStatistics;

      return this.apiClient.callApi(
        '/teams/{id}/statistics/league', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the tournamentsSeasonsIdTeamsGet operation.
     * @callback moduleapi/TeamsApi~tournamentsSeasonsIdTeamsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PartialTeam>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of Teams, which are participating in a given TournamentSeason
     * @param {Number} id Unique identifier of the TournamentSeason resource
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation (default to <.>)
     * @param {module:api/TeamsApi~tournamentsSeasonsIdTeamsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    tournamentsSeasonsIdTeamsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tournamentsSeasonsIdTeamsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = [PartialTeam];

      return this.apiClient.callApi(
        '/tournaments/seasons/{id}/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the tournamentsSeasonsStagesIdTeamsGet operation.
     * @callback moduleapi/TeamsApi~tournamentsSeasonsStagesIdTeamsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PartialTeam>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of Teams, which are participating in a given TournamentSeasonStage
     * @param {Number} id Unique identifier of the TournamentSeasonStage resource
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation (default to <.>)
     * @param {module:api/TeamsApi~tournamentsSeasonsStagesIdTeamsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    tournamentsSeasonsStagesIdTeamsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tournamentsSeasonsStagesIdTeamsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = [PartialTeam];

      return this.apiClient.callApi(
        '/tournaments/seasons/stages/{id}/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the v2TeamsColorsPost operation.
     * @callback moduleapi/TeamsApi~v2TeamsColorsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2TeamColors{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Manually insert team colors by team or event.
     * @param {Object} opts Optional parameters
     * @param {module:model/V2TeamColors} opts.body Team shirt colors data
     * @param {module:api/TeamsApi~v2TeamsColorsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    v2TeamsColorsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = V2TeamColors;

      return this.apiClient.callApi(
        '/v2/teams/colors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the v2TeamsGet operation.
     * @callback moduleapi/TeamsApi~v2TeamsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamPageDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get teams list
     * @param {Number} offset The number of items to skip before starting to collect the result set
     * @param {Number} limit Limit the number of results returned
     * @param {Object} opts Optional parameters
     * @param {String} opts.languageCode Returns translated response based on the language code (default to <.>)
     * @param {module:api/TeamsApi~v2TeamsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    v2TeamsGet(offset, limit, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling v2TeamsGet");
      }
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling v2TeamsGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'language_code': opts['languageCode'],'offset': offset,'limit': limit
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = TeamPageDto;

      return this.apiClient.callApi(
        '/v2/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the v2TeamsIdGet operation.
     * @callback moduleapi/TeamsApi~v2TeamsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2TeamProfile{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get team by id
     * @param {String} id Unique identifier of the resource.
     * @param {Object} opts Optional parameters
     * @param {String} opts.languageCode Returns translated response based on the language code (default to <.>)
     * @param {module:api/TeamsApi~v2TeamsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    v2TeamsIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2TeamsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'language_code': opts['languageCode']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = V2TeamProfile;

      return this.apiClient.callApi(
        '/v2/teams/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the v2TeamsIdPut operation.
     * @callback moduleapi/TeamsApi~v2TeamsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2TeamProfile{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Team information
     * @param {module:model/TeamEditDto} body Team information to save in persistance
     * @param {String} id Unique identifier of the resource.
     * @param {module:api/TeamsApi~v2TeamsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    v2TeamsIdPut(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling v2TeamsIdPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2TeamsIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V2TeamProfile;

      return this.apiClient.callApi(
        '/v2/teams/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the v2TeamsPost operation.
     * @callback moduleapi/TeamsApi~v2TeamsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2TeamProfile{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Manually insert team.
     * @param {Object} opts Optional parameters
     * @param {module:model/TeamEditDto} opts.body TeamEditDto object
     * @param {module:api/TeamsApi~v2TeamsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    v2TeamsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = V2TeamProfile;

      return this.apiClient.callApi(
        '/v2/teams', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}