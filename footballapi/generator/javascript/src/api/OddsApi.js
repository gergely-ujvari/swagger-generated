/*
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Odd} from '../model/Odd';
import {OddProvider} from '../model/OddProvider';

/**
* Odds service.
* @module api/OddsApi
* @version 0.0.1
*/
export class OddsApi {

    /**
    * Constructs a new OddsApi. 
    * @alias module:api/OddsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the eventsIdLiveoddsGet operation.
     * @callback moduleapi/OddsApi~eventsIdLiveoddsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Odd>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get available liveodds for an event
     * @param {String} id Unique identifier of the resource.
     * @param {String} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#x27;coupon&#x27; key with the odds fo building URLs.
     * @param {module:api/OddsApi~eventsIdLiveoddsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    eventsIdLiveoddsGet(id, xOddClient, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling eventsIdLiveoddsGet");
      }
      // verify the required parameter 'xOddClient' is set
      if (xOddClient === undefined || xOddClient === null) {
        throw new Error("Missing the required parameter 'xOddClient' when calling eventsIdLiveoddsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Odd-Client': xOddClient
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = [Odd];

      return this.apiClient.callApi(
        '/events/{id}/liveodds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the eventsIdOddsGet operation.
     * @callback moduleapi/OddsApi~eventsIdOddsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Odd>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of odds available in the system
     * @param {String} id Unique identifier of the resource.
     * @param {String} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#x27;coupon&#x27; key with the odds fo building URLs.
     * @param {module:api/OddsApi~eventsIdOddsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    eventsIdOddsGet(id, xOddClient, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling eventsIdOddsGet");
      }
      // verify the required parameter 'xOddClient' is set
      if (xOddClient === undefined || xOddClient === null) {
        throw new Error("Missing the required parameter 'xOddClient' when calling eventsIdOddsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Odd-Client': xOddClient
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = [Odd];

      return this.apiClient.callApi(
        '/events/{id}/odds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the eventsIdPregameoddsGet operation.
     * @callback moduleapi/OddsApi~eventsIdPregameoddsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Odd>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get available pre-game odds for an Event
     * @param {String} id Unique identifier of the resource.
     * @param {String} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#x27;coupon&#x27; key with the odds fo building URLs.
     * @param {module:api/OddsApi~eventsIdPregameoddsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    eventsIdPregameoddsGet(id, xOddClient, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling eventsIdPregameoddsGet");
      }
      // verify the required parameter 'xOddClient' is set
      if (xOddClient === undefined || xOddClient === null) {
        throw new Error("Missing the required parameter 'xOddClient' when calling eventsIdPregameoddsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Odd-Client': xOddClient
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = [Odd];

      return this.apiClient.callApi(
        '/events/{id}/pregameodds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the liveoddsGet operation.
     * @callback moduleapi/OddsApi~liveoddsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Odd>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of liveodds available in the system
     * @param {String} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#x27;coupon&#x27; key with the odds fo building URLs.
     * @param {module:api/OddsApi~liveoddsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    liveoddsGet(xOddClient, callback) {
      
      let postBody = null;
      // verify the required parameter 'xOddClient' is set
      if (xOddClient === undefined || xOddClient === null) {
        throw new Error("Missing the required parameter 'xOddClient' when calling liveoddsGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Odd-Client': xOddClient
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = [Odd];

      return this.apiClient.callApi(
        '/liveodds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the oddProvidersGet operation.
     * @callback moduleapi/OddsApi~oddProvidersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OddProvider>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of OddProviders available in the system. If X-Odd-Client is specified they will be filtered and ordered by the client configuration.
     * @param {String} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#x27;coupon&#x27; key with the odds fo building URLs.
     * @param {module:api/OddsApi~oddProvidersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    oddProvidersGet(xOddClient, callback) {
      
      let postBody = null;
      // verify the required parameter 'xOddClient' is set
      if (xOddClient === undefined || xOddClient === null) {
        throw new Error("Missing the required parameter 'xOddClient' when calling oddProvidersGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'X-Odd-Client': xOddClient
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = [OddProvider];

      return this.apiClient.callApi(
        '/odd_providers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the oddsGet operation.
     * @callback moduleapi/OddsApi~oddsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Odd>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of Odds
     * @param {String} oddClient Odd client code
     * @param {module:model/String} sportType Sport type filter
     * @param {module:model/String} eventType Event type filter
     * @param {Object} opts Optional parameters
     * @param {Date} opts.fromEventStartTime Return odds for Events with start_time &gt;&#x3D; from_event_start_time. RFC 3339 format
     * @param {Date} opts.toEventStartTime Return odds for Events with start_time &lt;&#x3D; to_event_start_time. RFC 3339 format
     * @param {Number} opts.teamId Team ID
     * @param {String} opts.teamIds List for team IDs separated by commas.
     * @param {String} opts.eventOrder Order matching events for a specific client
     * @param {String} opts.matchIds List for match IDs separated by commas.
     * @param {String} opts.tournamentIds List for tournament IDs separated by commas.
     * @param {String} opts.seasonIds List for season IDs separated by commas.
     * @param {module:model/String} opts.oddsType Pregame or live odds selector.
     * @param {module:api/OddsApi~oddsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    oddsGet(oddClient, sportType, eventType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'oddClient' is set
      if (oddClient === undefined || oddClient === null) {
        throw new Error("Missing the required parameter 'oddClient' when calling oddsGet");
      }
      // verify the required parameter 'sportType' is set
      if (sportType === undefined || sportType === null) {
        throw new Error("Missing the required parameter 'sportType' when calling oddsGet");
      }
      // verify the required parameter 'eventType' is set
      if (eventType === undefined || eventType === null) {
        throw new Error("Missing the required parameter 'eventType' when calling oddsGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'from_event_start_time': opts['fromEventStartTime'],'to_event_start_time': opts['toEventStartTime'],'odd_client': oddClient,'team_id': opts['teamId'],'team_ids': opts['teamIds'],'event_order': opts['eventOrder'],'sport_type': sportType,'match_ids': opts['matchIds'],'tournament_ids': opts['tournamentIds'],'season_ids': opts['seasonIds'],'event_type': eventType,'odds_type': opts['oddsType']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = [Odd];

      return this.apiClient.callApi(
        '/odds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the pregameoddsGet operation.
     * @callback moduleapi/OddsApi~pregameoddsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Odd>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of Odd Providers which have odds available for a given Event
     * @param {String} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#x27;coupon&#x27; key with the odds fo building URLs.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.fromTime Return odds for Events with start_time &gt;&#x3D; from_time. RFC 3339 format
     * @param {Date} opts.toTime Return odds for Events with start_time &lt;&#x3D; to_time. RFC 3339 format
     * @param {module:api/OddsApi~pregameoddsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    pregameoddsGet(xOddClient, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xOddClient' is set
      if (xOddClient === undefined || xOddClient === null) {
        throw new Error("Missing the required parameter 'xOddClient' when calling pregameoddsGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'from_time': opts['fromTime'],'to_time': opts['toTime']
      };
      let headerParams = {
        'X-Odd-Client': xOddClient
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = [Odd];

      return this.apiClient.callApi(
        '/pregameodds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}