/*
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {V2LeagueStandingInput} from '../model/V2LeagueStandingInput';
import {V2StandingEntryRuleWrapper} from '../model/V2StandingEntryRuleWrapper';
import {V2TopScorerStandingInput} from '../model/V2TopScorerStandingInput';

/**
* Standings service.
* @module api/StandingsApi
* @version 0.0.1
*/
export class StandingsApi {

    /**
    * Constructs a new StandingsApi. 
    * @alias module:api/StandingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the v2StandingsLeagueEntityIdPut operation.
     * @callback moduleapi/StandingsApi~v2StandingsLeagueEntityIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a league standing table
     * @param {module:model/V2LeagueStandingInput} body List of all entries for the standing
     * @param {module:model/String} entity type of entity to attach standing to
     * @param {String} id Unique identifier of the resource.
     * @param {module:api/StandingsApi~v2StandingsLeagueEntityIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v2StandingsLeagueEntityIdPut(body, entity, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling v2StandingsLeagueEntityIdPut");
      }
      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling v2StandingsLeagueEntityIdPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2StandingsLeagueEntityIdPut");
      }

      let pathParams = {
        'entity': entity,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v2/standings/league/{entity}/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the v2StandingsLeagueEntityIdRulesPut operation.
     * @callback moduleapi/StandingsApi~v2StandingsLeagueEntityIdRulesPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach standing rules to a league standing
     * @param {module:model/V2StandingEntryRuleWrapper} body list of rules for every rank
     * @param {module:model/String} entity type of entity to attach standing to
     * @param {String} id Unique identifier of the resource.
     * @param {module:api/StandingsApi~v2StandingsLeagueEntityIdRulesPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v2StandingsLeagueEntityIdRulesPut(body, entity, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling v2StandingsLeagueEntityIdRulesPut");
      }
      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling v2StandingsLeagueEntityIdRulesPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2StandingsLeagueEntityIdRulesPut");
      }

      let pathParams = {
        'entity': entity,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v2/standings/league/{entity}/{id}/rules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the v2StandingsTopscorerEntityIdPut operation.
     * @callback moduleapi/StandingsApi~v2StandingsTopscorerEntityIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a topscorer standing table
     * @param {module:model/V2TopScorerStandingInput} body List of all entries for the standing
     * @param {module:model/String} entity type of entity to attach standing to
     * @param {String} id Unique identifier of the resource.
     * @param {module:api/StandingsApi~v2StandingsTopscorerEntityIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v2StandingsTopscorerEntityIdPut(body, entity, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling v2StandingsTopscorerEntityIdPut");
      }
      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling v2StandingsTopscorerEntityIdPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2StandingsTopscorerEntityIdPut");
      }

      let pathParams = {
        'entity': entity,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v2/standings/topscorer/{entity}/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}