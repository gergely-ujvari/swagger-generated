/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    NotFoundError,
    NotFoundErrorFromJSON,
    NotFoundErrorToJSON,
    V2PostVenues,
    V2PostVenuesFromJSON,
    V2PostVenuesToJSON,
    V2PutVenues,
    V2PutVenuesFromJSON,
    V2PutVenuesToJSON,
    V2Venues,
    V2VenuesFromJSON,
    V2VenuesToJSON,
    V2VenuesGetId,
    V2VenuesGetIdFromJSON,
    V2VenuesGetIdToJSON,
    V2VenuesList,
    V2VenuesListFromJSON,
    V2VenuesListToJSON,
    V2VenuesPut,
    V2VenuesPutFromJSON,
    V2VenuesPutToJSON,
} from '../models';

export interface V2VenuesGetRequest {
    offset: number;
    limit: number;
    seasonIds?: string;
    languageCode?: string;
}

export interface V2VenuesIdGetRequest {
    id: string;
    languageCode?: string;
}

export interface V2VenuesIdPutRequest {
    id: string;
    venue?: V2PutVenues;
}

export interface V2VenuesPostRequest {
    venue?: V2PostVenues;
}

/**
 * 
 */
export class VenuesApi extends runtime.BaseAPI {

    /**
     * List venues with offset and limit parameters
     */
    async v2VenuesGetRaw(requestParameters: V2VenuesGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<V2VenuesList>> {
        if (requestParameters.offset === null || requestParameters.offset === undefined) {
            throw new runtime.RequiredError('offset','Required parameter requestParameters.offset was null or undefined when calling v2VenuesGet.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling v2VenuesGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.seasonIds !== undefined) {
            queryParameters['season_ids'] = requestParameters.seasonIds;
        }

        if (requestParameters.languageCode !== undefined) {
            queryParameters['language_code'] = requestParameters.languageCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/venues`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2VenuesListFromJSON(jsonValue));
    }

    /**
     * List venues with offset and limit parameters
     */
    async v2VenuesGet(requestParameters: V2VenuesGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<V2VenuesList> {
        const response = await this.v2VenuesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get venue by id
     */
    async v2VenuesIdGetRaw(requestParameters: V2VenuesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<V2VenuesGetId>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v2VenuesIdGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.languageCode !== undefined) {
            queryParameters['language_code'] = requestParameters.languageCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/venues/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2VenuesGetIdFromJSON(jsonValue));
    }

    /**
     * Get venue by id
     */
    async v2VenuesIdGet(requestParameters: V2VenuesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<V2VenuesGetId> {
        const response = await this.v2VenuesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update venue information
     */
    async v2VenuesIdPutRaw(requestParameters: V2VenuesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<V2VenuesPut>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v2VenuesIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/venues/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V2PutVenuesToJSON(requestParameters.venue),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2VenuesPutFromJSON(jsonValue));
    }

    /**
     * Update venue information
     */
    async v2VenuesIdPut(requestParameters: V2VenuesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<V2VenuesPut> {
        const response = await this.v2VenuesIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store a newly created venue in storage
     */
    async v2VenuesPostRaw(requestParameters: V2VenuesPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<V2Venues>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/venues`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V2PostVenuesToJSON(requestParameters.venue),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2VenuesFromJSON(jsonValue));
    }

    /**
     * Store a newly created venue in storage
     */
    async v2VenuesPost(requestParameters: V2VenuesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<V2Venues> {
        const response = await this.v2VenuesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
