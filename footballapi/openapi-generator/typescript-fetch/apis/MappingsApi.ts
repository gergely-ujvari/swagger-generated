/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface MappingsSportalGetRequest {
    object?: MappingsSportalGetObjectEnum;
    id?: number;
}

export interface MappingsSportalReverseGetRequest {
    object?: MappingsSportalReverseGetObjectEnum;
    id?: number;
}

/**
 * 
 */
export class MappingsApi extends runtime.BaseAPI {

    /**
     * Get FootballApi ID to Sportal ID maps for various types of objects
     */
    async mappingsSportalGetRaw(requestParameters: MappingsSportalGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.object !== undefined) {
            queryParameters['object'] = requestParameters.object;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/mappings/sportal`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get FootballApi ID to Sportal ID maps for various types of objects
     */
    async mappingsSportalGet(requestParameters: MappingsSportalGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<object> {
        const response = await this.mappingsSportalGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Sportal to Football API ID maps for various types of objects
     */
    async mappingsSportalReverseGetRaw(requestParameters: MappingsSportalReverseGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.object !== undefined) {
            queryParameters['object'] = requestParameters.object;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/mappings/sportal/reverse`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get Sportal to Football API ID maps for various types of objects
     */
    async mappingsSportalReverseGet(requestParameters: MappingsSportalReverseGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<object> {
        const response = await this.mappingsSportalReverseGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const MappingsSportalGetObjectEnum = {
    Player: 'player',
    Team: 'team',
    Tournament: 'tournament',
    TournamentSeason: 'tournament_season',
    TournamentSeasonStage: 'tournament_season_stage'
} as const;
export type MappingsSportalGetObjectEnum = typeof MappingsSportalGetObjectEnum[keyof typeof MappingsSportalGetObjectEnum];
/**
 * @export
 */
export const MappingsSportalReverseGetObjectEnum = {
    Player: 'player',
    Team: 'team',
    Tournament: 'tournament',
    TournamentSeason: 'tournament_season',
    TournamentSeasonStage: 'tournament_season_stage'
} as const;
export type MappingsSportalReverseGetObjectEnum = typeof MappingsSportalReverseGetObjectEnum[keyof typeof MappingsSportalReverseGetObjectEnum];
