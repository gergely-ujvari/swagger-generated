/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    NotFoundError,
    NotFoundErrorFromJSON,
    NotFoundErrorToJSON,
    V2Season,
    V2SeasonFromJSON,
    V2SeasonToJSON,
    V2SeasonDetails,
    V2SeasonDetailsFromJSON,
    V2SeasonDetailsToJSON,
    V2SeasonList,
    V2SeasonListFromJSON,
    V2SeasonListToJSON,
    V2SeasonStage,
    V2SeasonStageFromJSON,
    V2SeasonStageToJSON,
    V2SeasonStageCollection,
    V2SeasonStageCollectionFromJSON,
    V2SeasonStageCollectionToJSON,
    V2TournamentSeasonInsertInput,
    V2TournamentSeasonInsertInputFromJSON,
    V2TournamentSeasonInsertInputToJSON,
    V2TournamentSeasonStatusInput,
    V2TournamentSeasonStatusInputFromJSON,
    V2TournamentSeasonStatusInputToJSON,
    V2TournamentSeasonUpdateInput,
    V2TournamentSeasonUpdateInputFromJSON,
    V2TournamentSeasonUpdateInputToJSON,
} from '../models';

export interface V2SeasonsDetailsGetRequest {
    seasonId?: string;
    tournamentId?: string;
    status?: V2SeasonsDetailsGetStatusEnum;
    languageCode?: string;
}

export interface V2SeasonsGetRequest {
    tournamentId?: string;
    teamId?: string;
    status?: V2SeasonsGetStatusEnum;
    languageCode?: string;
}

export interface V2SeasonsIdPutRequest {
    id: string;
    name: V2TournamentSeasonUpdateInput;
}

export interface V2SeasonsIdStagesGetRequest {
    id: string;
    languageCode?: string;
}

export interface V2SeasonsIdStagesPostRequest {
    id: string;
    stages: Array<V2SeasonStage>;
}

export interface V2SeasonsPostRequest {
    season: V2TournamentSeasonInsertInput;
}

export interface V2StagesIdDeleteRequest {
    id: string;
}

export interface V2TournamentsIdSeasonsCurrentPatchRequest {
    id: string;
    seasonId: V2TournamentSeasonStatusInput;
}

/**
 * 
 */
export class SeasonApi extends runtime.BaseAPI {

    /**
     * Get the details of a season by season_id, or by tournament_id and active status
     */
    async v2SeasonsDetailsGetRaw(requestParameters: V2SeasonsDetailsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<V2SeasonDetails>> {
        const queryParameters: any = {};

        if (requestParameters.seasonId !== undefined) {
            queryParameters['season_id'] = requestParameters.seasonId;
        }

        if (requestParameters.tournamentId !== undefined) {
            queryParameters['tournament_id'] = requestParameters.tournamentId;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.languageCode !== undefined) {
            queryParameters['language_code'] = requestParameters.languageCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/seasons/details`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2SeasonDetailsFromJSON(jsonValue));
    }

    /**
     * Get the details of a season by season_id, or by tournament_id and active status
     */
    async v2SeasonsDetailsGet(requestParameters: V2SeasonsDetailsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<V2SeasonDetails> {
        const response = await this.v2SeasonsDetailsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get seasons by tournament_id, team_id and status
     */
    async v2SeasonsGetRaw(requestParameters: V2SeasonsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<V2SeasonList>> {
        const queryParameters: any = {};

        if (requestParameters.tournamentId !== undefined) {
            queryParameters['tournament_id'] = requestParameters.tournamentId;
        }

        if (requestParameters.teamId !== undefined) {
            queryParameters['team_id'] = requestParameters.teamId;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.languageCode !== undefined) {
            queryParameters['language_code'] = requestParameters.languageCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/seasons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2SeasonListFromJSON(jsonValue));
    }

    /**
     * Get seasons by tournament_id, team_id and status
     */
    async v2SeasonsGet(requestParameters: V2SeasonsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<V2SeasonList> {
        const response = await this.v2SeasonsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing season
     */
    async v2SeasonsIdPutRaw(requestParameters: V2SeasonsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<V2Season>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v2SeasonsIdPut.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling v2SeasonsIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/seasons/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V2TournamentSeasonUpdateInputToJSON(requestParameters.name),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2SeasonFromJSON(jsonValue));
    }

    /**
     * Update an existing season
     */
    async v2SeasonsIdPut(requestParameters: V2SeasonsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<V2Season> {
        const response = await this.v2SeasonsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all stages for specific season
     */
    async v2SeasonsIdStagesGetRaw(requestParameters: V2SeasonsIdStagesGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<V2SeasonStageCollection>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v2SeasonsIdStagesGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.languageCode !== undefined) {
            queryParameters['language_code'] = requestParameters.languageCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/seasons/{id}/stages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2SeasonStageCollectionFromJSON(jsonValue));
    }

    /**
     * List all stages for specific season
     */
    async v2SeasonsIdStagesGet(requestParameters: V2SeasonsIdStagesGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<V2SeasonStageCollection> {
        const response = await this.v2SeasonsIdStagesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create or update multiple stages
     */
    async v2SeasonsIdStagesPostRaw(requestParameters: V2SeasonsIdStagesPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<V2SeasonStageCollection>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v2SeasonsIdStagesPost.');
        }

        if (requestParameters.stages === null || requestParameters.stages === undefined) {
            throw new runtime.RequiredError('stages','Required parameter requestParameters.stages was null or undefined when calling v2SeasonsIdStagesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/seasons/{id}/stages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.stages.map(V2SeasonStageToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2SeasonStageCollectionFromJSON(jsonValue));
    }

    /**
     * Create or update multiple stages
     */
    async v2SeasonsIdStagesPost(requestParameters: V2SeasonsIdStagesPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<V2SeasonStageCollection> {
        const response = await this.v2SeasonsIdStagesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new season
     */
    async v2SeasonsPostRaw(requestParameters: V2SeasonsPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<V2Season>> {
        if (requestParameters.season === null || requestParameters.season === undefined) {
            throw new runtime.RequiredError('season','Required parameter requestParameters.season was null or undefined when calling v2SeasonsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/seasons`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V2TournamentSeasonInsertInputToJSON(requestParameters.season),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2SeasonFromJSON(jsonValue));
    }

    /**
     * Create a new season
     */
    async v2SeasonsPost(requestParameters: V2SeasonsPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<V2Season> {
        const response = await this.v2SeasonsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Permanently delete stage
     */
    async v2StagesIdDeleteRaw(requestParameters: V2StagesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v2StagesIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/stages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Permanently delete stage
     */
    async v2StagesIdDelete(requestParameters: V2StagesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.v2StagesIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Set the current season as active and change all other seasons in the tournament to inactive
     */
    async v2TournamentsIdSeasonsCurrentPatchRaw(requestParameters: V2TournamentsIdSeasonsCurrentPatchRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<V2Season>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v2TournamentsIdSeasonsCurrentPatch.');
        }

        if (requestParameters.seasonId === null || requestParameters.seasonId === undefined) {
            throw new runtime.RequiredError('seasonId','Required parameter requestParameters.seasonId was null or undefined when calling v2TournamentsIdSeasonsCurrentPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/tournaments/{id}/seasons/current`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: V2TournamentSeasonStatusInputToJSON(requestParameters.seasonId),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2SeasonFromJSON(jsonValue));
    }

    /**
     * Set the current season as active and change all other seasons in the tournament to inactive
     */
    async v2TournamentsIdSeasonsCurrentPatch(requestParameters: V2TournamentsIdSeasonsCurrentPatchRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<V2Season> {
        const response = await this.v2TournamentsIdSeasonsCurrentPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const V2SeasonsDetailsGetStatusEnum = {
    Current: 'CURRENT'
} as const;
export type V2SeasonsDetailsGetStatusEnum = typeof V2SeasonsDetailsGetStatusEnum[keyof typeof V2SeasonsDetailsGetStatusEnum];
/**
 * @export
 */
export const V2SeasonsGetStatusEnum = {
    Active: 'ACTIVE'
} as const;
export type V2SeasonsGetStatusEnum = typeof V2SeasonsGetStatusEnum[keyof typeof V2SeasonsGetStatusEnum];
