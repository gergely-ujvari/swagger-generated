/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    V2Asset,
    V2AssetFromJSON,
    V2AssetToJSON,
    V2AssetInput,
    V2AssetInputFromJSON,
    V2AssetInputToJSON,
} from '../models';

export interface V2AssetsDeleteRequest {
    assets?: Array<V2AssetInput>;
}

export interface V2AssetsPostRequest {
    assets?: Array<V2AssetInput>;
}

/**
 * 
 */
export class AssetsApi extends runtime.BaseAPI {

    /**
     * Bulk delete assets
     */
    async v2AssetsDeleteRaw(requestParameters: V2AssetsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/assets`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.assets.map(V2AssetInputToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Bulk delete assets
     */
    async v2AssetsDelete(requestParameters: V2AssetsDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.v2AssetsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Bulk Upsert assets
     */
    async v2AssetsPostRaw(requestParameters: V2AssetsPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<V2Asset>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/assets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.assets.map(V2AssetInputToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2AssetFromJSON(jsonValue));
    }

    /**
     * Bulk Upsert assets
     */
    async v2AssetsPost(requestParameters: V2AssetsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<V2Asset> {
        const response = await this.v2AssetsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
