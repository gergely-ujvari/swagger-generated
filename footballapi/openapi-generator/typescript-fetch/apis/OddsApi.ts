/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Odd,
    OddFromJSON,
    OddToJSON,
    OddProvider,
    OddProviderFromJSON,
    OddProviderToJSON,
} from '../models';

export interface EventsIdLiveoddsGetRequest {
    id: string;
    xOddClient: string;
}

export interface EventsIdOddsGetRequest {
    id: string;
    xOddClient: string;
}

export interface EventsIdPregameoddsGetRequest {
    id: string;
    xOddClient: string;
}

export interface LiveoddsGetRequest {
    xOddClient: string;
}

export interface OddProvidersGetRequest {
    xOddClient: string;
}

export interface OddsGetRequest {
    oddClient: string;
    sportType: OddsGetSportTypeEnum;
    eventType: OddsGetEventTypeEnum;
    fromEventStartTime?: Date;
    toEventStartTime?: Date;
    teamId?: number;
    teamIds?: string;
    eventOrder?: string;
    matchIds?: string;
    tournamentIds?: string;
    seasonIds?: string;
    oddsType?: OddsGetOddsTypeEnum;
}

export interface PregameoddsGetRequest {
    xOddClient: string;
    fromTime?: Date;
    toTime?: Date;
}

/**
 * 
 */
export class OddsApi extends runtime.BaseAPI {

    /**
     * Get available liveodds for an event
     */
    async eventsIdLiveoddsGetRaw(requestParameters: EventsIdLiveoddsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Odd>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventsIdLiveoddsGet.');
        }

        if (requestParameters.xOddClient === null || requestParameters.xOddClient === undefined) {
            throw new runtime.RequiredError('xOddClient','Required parameter requestParameters.xOddClient was null or undefined when calling eventsIdLiveoddsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xOddClient !== undefined && requestParameters.xOddClient !== null) {
            headerParameters['X-Odd-Client'] = String(requestParameters.xOddClient);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/events/{id}/liveodds`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OddFromJSON));
    }

    /**
     * Get available liveodds for an event
     */
    async eventsIdLiveoddsGet(requestParameters: EventsIdLiveoddsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Odd>> {
        const response = await this.eventsIdLiveoddsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of odds available in the system
     */
    async eventsIdOddsGetRaw(requestParameters: EventsIdOddsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Odd>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventsIdOddsGet.');
        }

        if (requestParameters.xOddClient === null || requestParameters.xOddClient === undefined) {
            throw new runtime.RequiredError('xOddClient','Required parameter requestParameters.xOddClient was null or undefined when calling eventsIdOddsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xOddClient !== undefined && requestParameters.xOddClient !== null) {
            headerParameters['X-Odd-Client'] = String(requestParameters.xOddClient);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/events/{id}/odds`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OddFromJSON));
    }

    /**
     * Get a list of odds available in the system
     */
    async eventsIdOddsGet(requestParameters: EventsIdOddsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Odd>> {
        const response = await this.eventsIdOddsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get available pre-game odds for an Event
     */
    async eventsIdPregameoddsGetRaw(requestParameters: EventsIdPregameoddsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Odd>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventsIdPregameoddsGet.');
        }

        if (requestParameters.xOddClient === null || requestParameters.xOddClient === undefined) {
            throw new runtime.RequiredError('xOddClient','Required parameter requestParameters.xOddClient was null or undefined when calling eventsIdPregameoddsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xOddClient !== undefined && requestParameters.xOddClient !== null) {
            headerParameters['X-Odd-Client'] = String(requestParameters.xOddClient);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/events/{id}/pregameodds`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OddFromJSON));
    }

    /**
     * Get available pre-game odds for an Event
     */
    async eventsIdPregameoddsGet(requestParameters: EventsIdPregameoddsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Odd>> {
        const response = await this.eventsIdPregameoddsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of liveodds available in the system
     */
    async liveoddsGetRaw(requestParameters: LiveoddsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Odd>>> {
        if (requestParameters.xOddClient === null || requestParameters.xOddClient === undefined) {
            throw new runtime.RequiredError('xOddClient','Required parameter requestParameters.xOddClient was null or undefined when calling liveoddsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xOddClient !== undefined && requestParameters.xOddClient !== null) {
            headerParameters['X-Odd-Client'] = String(requestParameters.xOddClient);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/liveodds`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OddFromJSON));
    }

    /**
     * Get a list of liveodds available in the system
     */
    async liveoddsGet(requestParameters: LiveoddsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Odd>> {
        const response = await this.liveoddsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a list of OddProviders available in the system. If X-Odd-Client is specified they will be filtered and ordered by the client configuration.
     */
    async oddProvidersGetRaw(requestParameters: OddProvidersGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<OddProvider>>> {
        if (requestParameters.xOddClient === null || requestParameters.xOddClient === undefined) {
            throw new runtime.RequiredError('xOddClient','Required parameter requestParameters.xOddClient was null or undefined when calling oddProvidersGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xOddClient !== undefined && requestParameters.xOddClient !== null) {
            headerParameters['X-Odd-Client'] = String(requestParameters.xOddClient);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/odd_providers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OddProviderFromJSON));
    }

    /**
     * Return a list of OddProviders available in the system. If X-Odd-Client is specified they will be filtered and ordered by the client configuration.
     */
    async oddProvidersGet(requestParameters: OddProvidersGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<OddProvider>> {
        const response = await this.oddProvidersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of Odds
     */
    async oddsGetRaw(requestParameters: OddsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Odd>>> {
        if (requestParameters.oddClient === null || requestParameters.oddClient === undefined) {
            throw new runtime.RequiredError('oddClient','Required parameter requestParameters.oddClient was null or undefined when calling oddsGet.');
        }

        if (requestParameters.sportType === null || requestParameters.sportType === undefined) {
            throw new runtime.RequiredError('sportType','Required parameter requestParameters.sportType was null or undefined when calling oddsGet.');
        }

        if (requestParameters.eventType === null || requestParameters.eventType === undefined) {
            throw new runtime.RequiredError('eventType','Required parameter requestParameters.eventType was null or undefined when calling oddsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.fromEventStartTime !== undefined) {
            queryParameters['from_event_start_time'] = (requestParameters.fromEventStartTime as any).toISOString();
        }

        if (requestParameters.toEventStartTime !== undefined) {
            queryParameters['to_event_start_time'] = (requestParameters.toEventStartTime as any).toISOString();
        }

        if (requestParameters.oddClient !== undefined) {
            queryParameters['odd_client'] = requestParameters.oddClient;
        }

        if (requestParameters.teamId !== undefined) {
            queryParameters['team_id'] = requestParameters.teamId;
        }

        if (requestParameters.teamIds !== undefined) {
            queryParameters['team_ids'] = requestParameters.teamIds;
        }

        if (requestParameters.eventOrder !== undefined) {
            queryParameters['event_order'] = requestParameters.eventOrder;
        }

        if (requestParameters.sportType !== undefined) {
            queryParameters['sport_type'] = requestParameters.sportType;
        }

        if (requestParameters.matchIds !== undefined) {
            queryParameters['match_ids'] = requestParameters.matchIds;
        }

        if (requestParameters.tournamentIds !== undefined) {
            queryParameters['tournament_ids'] = requestParameters.tournamentIds;
        }

        if (requestParameters.seasonIds !== undefined) {
            queryParameters['season_ids'] = requestParameters.seasonIds;
        }

        if (requestParameters.eventType !== undefined) {
            queryParameters['event_type'] = requestParameters.eventType;
        }

        if (requestParameters.oddsType !== undefined) {
            queryParameters['odds_type'] = requestParameters.oddsType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/odds`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OddFromJSON));
    }

    /**
     * Returns a list of Odds
     */
    async oddsGet(requestParameters: OddsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Odd>> {
        const response = await this.oddsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of Odd Providers which have odds available for a given Event
     */
    async pregameoddsGetRaw(requestParameters: PregameoddsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Odd>>> {
        if (requestParameters.xOddClient === null || requestParameters.xOddClient === undefined) {
            throw new runtime.RequiredError('xOddClient','Required parameter requestParameters.xOddClient was null or undefined when calling pregameoddsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.fromTime !== undefined) {
            queryParameters['from_time'] = (requestParameters.fromTime as any).toISOString();
        }

        if (requestParameters.toTime !== undefined) {
            queryParameters['to_time'] = (requestParameters.toTime as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xOddClient !== undefined && requestParameters.xOddClient !== null) {
            headerParameters['X-Odd-Client'] = String(requestParameters.xOddClient);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/pregameodds`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OddFromJSON));
    }

    /**
     * Returns a list of Odd Providers which have odds available for a given Event
     */
    async pregameoddsGet(requestParameters: PregameoddsGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Odd>> {
        const response = await this.pregameoddsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const OddsGetSportTypeEnum = {
    Football: 'football'
} as const;
export type OddsGetSportTypeEnum = typeof OddsGetSportTypeEnum[keyof typeof OddsGetSportTypeEnum];
/**
 * @export
 */
export const OddsGetEventTypeEnum = {
    Match: 'match'
} as const;
export type OddsGetEventTypeEnum = typeof OddsGetEventTypeEnum[keyof typeof OddsGetEventTypeEnum];
/**
 * @export
 */
export const OddsGetOddsTypeEnum = {
    Prematch: 'prematch',
    Live: 'live',
    All: 'all'
} as const;
export type OddsGetOddsTypeEnum = typeof OddsGetOddsTypeEnum[keyof typeof OddsGetOddsTypeEnum];
