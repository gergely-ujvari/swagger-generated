/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    V2LeagueStandingInput,
    V2LeagueStandingInputFromJSON,
    V2LeagueStandingInputToJSON,
    V2StandingEntryRuleWrapper,
    V2StandingEntryRuleWrapperFromJSON,
    V2StandingEntryRuleWrapperToJSON,
    V2TopScorerStandingInput,
    V2TopScorerStandingInputFromJSON,
    V2TopScorerStandingInputToJSON,
} from '../models';

export interface V2StandingsLeagueEntityIdPutRequest {
    entity: V2StandingsLeagueEntityIdPutEntityEnum;
    id: string;
    standingEntries: V2LeagueStandingInput;
}

export interface V2StandingsLeagueEntityIdRulesPutRequest {
    entity: V2StandingsLeagueEntityIdRulesPutEntityEnum;
    id: string;
    standingRules: V2StandingEntryRuleWrapper;
}

export interface V2StandingsTopscorerEntityIdPutRequest {
    entity: V2StandingsTopscorerEntityIdPutEntityEnum;
    id: string;
    standingEntries: V2TopScorerStandingInput;
}

/**
 * 
 */
export class StandingsApi extends runtime.BaseAPI {

    /**
     * Update a league standing table
     */
    async v2StandingsLeagueEntityIdPutRaw(requestParameters: V2StandingsLeagueEntityIdPutRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.entity === null || requestParameters.entity === undefined) {
            throw new runtime.RequiredError('entity','Required parameter requestParameters.entity was null or undefined when calling v2StandingsLeagueEntityIdPut.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v2StandingsLeagueEntityIdPut.');
        }

        if (requestParameters.standingEntries === null || requestParameters.standingEntries === undefined) {
            throw new runtime.RequiredError('standingEntries','Required parameter requestParameters.standingEntries was null or undefined when calling v2StandingsLeagueEntityIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/standings/league/{entity}/{id}`.replace(`{${"entity"}}`, encodeURIComponent(String(requestParameters.entity))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V2LeagueStandingInputToJSON(requestParameters.standingEntries),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a league standing table
     */
    async v2StandingsLeagueEntityIdPut(requestParameters: V2StandingsLeagueEntityIdPutRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.v2StandingsLeagueEntityIdPutRaw(requestParameters, initOverrides);
    }

    /**
     * Attach standing rules to a league standing
     */
    async v2StandingsLeagueEntityIdRulesPutRaw(requestParameters: V2StandingsLeagueEntityIdRulesPutRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.entity === null || requestParameters.entity === undefined) {
            throw new runtime.RequiredError('entity','Required parameter requestParameters.entity was null or undefined when calling v2StandingsLeagueEntityIdRulesPut.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v2StandingsLeagueEntityIdRulesPut.');
        }

        if (requestParameters.standingRules === null || requestParameters.standingRules === undefined) {
            throw new runtime.RequiredError('standingRules','Required parameter requestParameters.standingRules was null or undefined when calling v2StandingsLeagueEntityIdRulesPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/standings/league/{entity}/{id}/rules`.replace(`{${"entity"}}`, encodeURIComponent(String(requestParameters.entity))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V2StandingEntryRuleWrapperToJSON(requestParameters.standingRules),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Attach standing rules to a league standing
     */
    async v2StandingsLeagueEntityIdRulesPut(requestParameters: V2StandingsLeagueEntityIdRulesPutRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.v2StandingsLeagueEntityIdRulesPutRaw(requestParameters, initOverrides);
    }

    /**
     * Update a topscorer standing table
     */
    async v2StandingsTopscorerEntityIdPutRaw(requestParameters: V2StandingsTopscorerEntityIdPutRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.entity === null || requestParameters.entity === undefined) {
            throw new runtime.RequiredError('entity','Required parameter requestParameters.entity was null or undefined when calling v2StandingsTopscorerEntityIdPut.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v2StandingsTopscorerEntityIdPut.');
        }

        if (requestParameters.standingEntries === null || requestParameters.standingEntries === undefined) {
            throw new runtime.RequiredError('standingEntries','Required parameter requestParameters.standingEntries was null or undefined when calling v2StandingsTopscorerEntityIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v2/standings/topscorer/{entity}/{id}`.replace(`{${"entity"}}`, encodeURIComponent(String(requestParameters.entity))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V2TopScorerStandingInputToJSON(requestParameters.standingEntries),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a topscorer standing table
     */
    async v2StandingsTopscorerEntityIdPut(requestParameters: V2StandingsTopscorerEntityIdPutRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.v2StandingsTopscorerEntityIdPutRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const V2StandingsLeagueEntityIdPutEntityEnum = {
    Season: 'season',
    Stage: 'stage',
    Group: 'group'
} as const;
export type V2StandingsLeagueEntityIdPutEntityEnum = typeof V2StandingsLeagueEntityIdPutEntityEnum[keyof typeof V2StandingsLeagueEntityIdPutEntityEnum];
/**
 * @export
 */
export const V2StandingsLeagueEntityIdRulesPutEntityEnum = {
    Season: 'season',
    Stage: 'stage',
    Group: 'group'
} as const;
export type V2StandingsLeagueEntityIdRulesPutEntityEnum = typeof V2StandingsLeagueEntityIdRulesPutEntityEnum[keyof typeof V2StandingsLeagueEntityIdRulesPutEntityEnum];
/**
 * @export
 */
export const V2StandingsTopscorerEntityIdPutEntityEnum = {
    Season: 'season',
    Stage: 'stage',
    Group: 'group'
} as const;
export type V2StandingsTopscorerEntityIdPutEntityEnum = typeof V2StandingsTopscorerEntityIdPutEntityEnum[keyof typeof V2StandingsTopscorerEntityIdPutEntityEnum];
