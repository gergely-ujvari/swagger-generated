/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    V2MatchRefereeInput,
    V2MatchRefereeInputFromJSON,
    V2MatchRefereeInputFromJSONTyped,
    V2MatchRefereeInputToJSON,
} from './V2MatchRefereeInput';
import {
    V2MatchScoreInput,
    V2MatchScoreInputFromJSON,
    V2MatchScoreInputFromJSONTyped,
    V2MatchScoreInputToJSON,
} from './V2MatchScoreInput';

/**
 * 
 * @export
 * @interface V2MatchInput
 */
export interface V2MatchInput {
    /**
     * 
     * @type {string}
     * @memberof V2MatchInput
     */
    statusId?: string;
    /**
     * 
     * @type {Date}
     * @memberof V2MatchInput
     */
    kickoffTime?: Date;
    /**
     * 
     * @type {string}
     * @memberof V2MatchInput
     */
    stageId?: string;
    /**
     * 
     * @type {string}
     * @memberof V2MatchInput
     */
    homeTeamId?: string;
    /**
     * 
     * @type {string}
     * @memberof V2MatchInput
     */
    awayTeamId?: string;
    /**
     * 
     * @type {string}
     * @memberof V2MatchInput
     */
    roundKey?: string;
    /**
     * 
     * @type {string}
     * @memberof V2MatchInput
     */
    groupId?: string;
    /**
     * 
     * @type {string}
     * @memberof V2MatchInput
     */
    venueId?: string;
    /**
     * 
     * @type {Array<V2MatchRefereeInput>}
     * @memberof V2MatchInput
     */
    referees?: Array<V2MatchRefereeInput>;
    /**
     * 
     * @type {V2MatchScoreInput}
     * @memberof V2MatchInput
     */
    score?: V2MatchScoreInput;
    /**
     * 
     * @type {number}
     * @memberof V2MatchInput
     */
    spectators?: number;
    /**
     * 
     * @type {string}
     * @memberof V2MatchInput
     */
    coverage?: V2MatchInputCoverageEnum;
    /**
     * 
     * @type {Date}
     * @memberof V2MatchInput
     */
    finishedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof V2MatchInput
     */
    phaseStartedAt?: Date;
}


/**
 * @export
 */
export const V2MatchInputCoverageEnum = {
    Live: 'LIVE',
    NotLive: 'NOT_LIVE',
    Unknown: 'UNKNOWN'
} as const;
export type V2MatchInputCoverageEnum = typeof V2MatchInputCoverageEnum[keyof typeof V2MatchInputCoverageEnum];


export function V2MatchInputFromJSON(json: any): V2MatchInput {
    return V2MatchInputFromJSONTyped(json, false);
}

export function V2MatchInputFromJSONTyped(json: any, ignoreDiscriminator: boolean): V2MatchInput {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'statusId': !exists(json, 'status_id') ? undefined : json['status_id'],
        'kickoffTime': !exists(json, 'kickoff_time') ? undefined : (new Date(json['kickoff_time'])),
        'stageId': !exists(json, 'stage_id') ? undefined : json['stage_id'],
        'homeTeamId': !exists(json, 'home_team_id') ? undefined : json['home_team_id'],
        'awayTeamId': !exists(json, 'away_team_id') ? undefined : json['away_team_id'],
        'roundKey': !exists(json, 'round_key') ? undefined : json['round_key'],
        'groupId': !exists(json, 'group_id') ? undefined : json['group_id'],
        'venueId': !exists(json, 'venue_id') ? undefined : json['venue_id'],
        'referees': !exists(json, 'referees') ? undefined : ((json['referees'] as Array<any>).map(V2MatchRefereeInputFromJSON)),
        'score': !exists(json, 'score') ? undefined : V2MatchScoreInputFromJSON(json['score']),
        'spectators': !exists(json, 'spectators') ? undefined : json['spectators'],
        'coverage': !exists(json, 'coverage') ? undefined : json['coverage'],
        'finishedAt': !exists(json, 'finished_at') ? undefined : (new Date(json['finished_at'])),
        'phaseStartedAt': !exists(json, 'phase_started_at') ? undefined : (new Date(json['phase_started_at'])),
    };
}

export function V2MatchInputToJSON(value?: V2MatchInput | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'status_id': value.statusId,
        'kickoff_time': value.kickoffTime === undefined ? undefined : (value.kickoffTime.toISOString()),
        'stage_id': value.stageId,
        'home_team_id': value.homeTeamId,
        'away_team_id': value.awayTeamId,
        'round_key': value.roundKey,
        'group_id': value.groupId,
        'venue_id': value.venueId,
        'referees': value.referees === undefined ? undefined : ((value.referees as Array<any>).map(V2MatchRefereeInputToJSON)),
        'score': V2MatchScoreInputToJSON(value.score),
        'spectators': value.spectators,
        'coverage': value.coverage,
        'finished_at': value.finishedAt === undefined ? undefined : (value.finishedAt.toISOString()),
        'phase_started_at': value.phaseStartedAt === undefined ? undefined : (value.phaseStartedAt.toISOString()),
    };
}

