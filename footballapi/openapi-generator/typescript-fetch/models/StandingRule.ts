/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface StandingRule
 */
export interface StandingRule {
    /**
     * Human readable name describing the standing rule
     * @type {string}
     * @memberof StandingRule
     */
    name: string;
    /**
     * Unique code identifying the standing rule
     * @type {string}
     * @memberof StandingRule
     */
    code: string;
    /**
     * Type classification of the standing rule
     * @type {string}
     * @memberof StandingRule
     */
    type: StandingRuleTypeEnum;
    /**
     * Detailed description of the standing rule
     * @type {string}
     * @memberof StandingRule
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof StandingRule
     */
    id?: number;
}


/**
 * @export
 */
export const StandingRuleTypeEnum = {
    Promotion: 'promotion',
    PromotionPlayoff: 'promotion_playoff',
    Relegation: 'relegation',
    RelegationPlayoff: 'relegation_playoff',
    Tiertwo: 'tiertwo',
    TiertwoPlayoff: 'tiertwo_playoff'
} as const;
export type StandingRuleTypeEnum = typeof StandingRuleTypeEnum[keyof typeof StandingRuleTypeEnum];


export function StandingRuleFromJSON(json: any): StandingRule {
    return StandingRuleFromJSONTyped(json, false);
}

export function StandingRuleFromJSONTyped(json: any, ignoreDiscriminator: boolean): StandingRule {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'code': json['code'],
        'type': json['type'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'id': !exists(json, 'id') ? undefined : json['id'],
    };
}

export function StandingRuleToJSON(value?: StandingRule | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'code': value.code,
        'type': value.type,
        'description': value.description,
        'id': value.id,
    };
}

