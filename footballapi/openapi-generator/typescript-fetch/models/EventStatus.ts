/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface EventStatus
 */
export interface EventStatus {
    /**
     * Status classification
     * @type {string}
     * @memberof EventStatus
     */
    type: EventStatusTypeEnum;
    /**
     * Human readable name describing the status, can be translated
     * @type {string}
     * @memberof EventStatus
     */
    name: string;
    /**
     * Human readable short name describing the status, can be translated
     * @type {string}
     * @memberof EventStatus
     */
    shortName?: string;
    /**
     * Unique string used to identify the status
     * @type {string}
     * @memberof EventStatus
     */
    code: EventStatusCodeEnum;
}


/**
 * @export
 */
export const EventStatusTypeEnum = {
    Finished: 'finished',
    Cancelled: 'cancelled',
    Notstarted: 'notstarted',
    Interrupted: 'interrupted',
    Inprogress: 'inprogress'
} as const;
export type EventStatusTypeEnum = typeof EventStatusTypeEnum[keyof typeof EventStatusTypeEnum];

/**
 * @export
 */
export const EventStatusCodeEnum = {
    Finished: 'finished',
    NotStarted: 'not_started',
    _1stHalf: '1st_half',
    _2ndHalf: '2nd_half'
} as const;
export type EventStatusCodeEnum = typeof EventStatusCodeEnum[keyof typeof EventStatusCodeEnum];


export function EventStatusFromJSON(json: any): EventStatus {
    return EventStatusFromJSONTyped(json, false);
}

export function EventStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventStatus {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'name': json['name'],
        'shortName': !exists(json, 'short_name') ? undefined : json['short_name'],
        'code': json['code'],
    };
}

export function EventStatusToJSON(value?: EventStatus | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'name': value.name,
        'short_name': value.shortName,
        'code': value.code,
    };
}

