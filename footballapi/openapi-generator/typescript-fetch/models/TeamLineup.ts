/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EventPlayer,
    EventPlayerFromJSON,
    EventPlayerFromJSONTyped,
    EventPlayerToJSON,
} from './EventPlayer';
import {
    PartialPerson,
    PartialPersonFromJSON,
    PartialPersonFromJSONTyped,
    PartialPersonToJSON,
} from './PartialPerson';

/**
 * 
 * @export
 * @interface TeamLineup
 */
export interface TeamLineup {
    /**
     * resource id of the team
     * @type {number}
     * @memberof TeamLineup
     */
    teamId?: number;
    /**
     * List of players involved for the team
     * @type {Array<EventPlayer>}
     * @memberof TeamLineup
     */
    players?: Array<EventPlayer>;
    /**
     * 
     * @type {PartialPerson}
     * @memberof TeamLineup
     */
    coach?: PartialPerson;
    /**
     * Lineup formation
     * @type {string}
     * @memberof TeamLineup
     */
    formation?: string;
}

export function TeamLineupFromJSON(json: any): TeamLineup {
    return TeamLineupFromJSONTyped(json, false);
}

export function TeamLineupFromJSONTyped(json: any, ignoreDiscriminator: boolean): TeamLineup {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'teamId': !exists(json, 'team_id') ? undefined : json['team_id'],
        'players': !exists(json, 'players') ? undefined : ((json['players'] as Array<any>).map(EventPlayerFromJSON)),
        'coach': !exists(json, 'coach') ? undefined : PartialPersonFromJSON(json['coach']),
        'formation': !exists(json, 'formation') ? undefined : json['formation'],
    };
}

export function TeamLineupToJSON(value?: TeamLineup | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'team_id': value.teamId,
        'players': value.players === undefined ? undefined : ((value.players as Array<any>).map(EventPlayerToJSON)),
        'coach': PartialPersonToJSON(value.coach),
        'formation': value.formation,
    };
}

