/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BasicPlayerStats,
    BasicPlayerStatsFromJSON,
    BasicPlayerStatsFromJSONTyped,
    BasicPlayerStatsToJSON,
} from './BasicPlayerStats';
import {
    TournamentSeasonStage,
    TournamentSeasonStageFromJSON,
    TournamentSeasonStageFromJSONTyped,
    TournamentSeasonStageToJSON,
} from './TournamentSeasonStage';

/**
 * 
 * @export
 * @interface TeamSeasonStatistics
 */
export interface TeamSeasonStatistics {
    /**
     * 
     * @type {number}
     * @memberof TeamSeasonStatistics
     */
    teamId?: number;
    /**
     * 
     * @type {TournamentSeasonStage}
     * @memberof TeamSeasonStatistics
     */
    latestLeagueStage?: TournamentSeasonStage;
    /**
     * Player statistics for the TournamentSeason
     * @type {Array<BasicPlayerStats>}
     * @memberof TeamSeasonStatistics
     */
    playerStatistics?: Array<BasicPlayerStats>;
}

export function TeamSeasonStatisticsFromJSON(json: any): TeamSeasonStatistics {
    return TeamSeasonStatisticsFromJSONTyped(json, false);
}

export function TeamSeasonStatisticsFromJSONTyped(json: any, ignoreDiscriminator: boolean): TeamSeasonStatistics {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'teamId': !exists(json, 'team_id') ? undefined : json['team_id'],
        'latestLeagueStage': !exists(json, 'latest_league_stage') ? undefined : TournamentSeasonStageFromJSON(json['latest_league_stage']),
        'playerStatistics': !exists(json, 'player_statistics') ? undefined : ((json['player_statistics'] as Array<any>).map(BasicPlayerStatsFromJSON)),
    };
}

export function TeamSeasonStatisticsToJSON(value?: TeamSeasonStatistics | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'team_id': value.teamId,
        'latest_league_stage': TournamentSeasonStageToJSON(value.latestLeagueStage),
        'player_statistics': value.playerStatistics === undefined ? undefined : ((value.playerStatistics as Array<any>).map(BasicPlayerStatsToJSON)),
    };
}

