/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EventPlayerType,
    EventPlayerTypeFromJSON,
    EventPlayerTypeFromJSONTyped,
    EventPlayerTypeToJSON,
} from './EventPlayerType';
import {
    PartialPerson,
    PartialPersonFromJSON,
    PartialPersonFromJSONTyped,
    PartialPersonToJSON,
} from './PartialPerson';

/**
 * 
 * @export
 * @interface EventPlayer
 */
export interface EventPlayer {
    /**
     * Unique identifier
     * @type {number}
     * @memberof EventPlayer
     */
    id: number;
    /**
     * 
     * @type {PartialPerson}
     * @memberof EventPlayer
     */
    player: PartialPerson;
    /**
     * 
     * @type {EventPlayerType}
     * @memberof EventPlayer
     */
    eventPlayerType: EventPlayerType;
    /**
     * Whether the player is from the home or the away team
     * @type {boolean}
     * @memberof EventPlayer
     */
    homeTeam: boolean;
    /**
     * Number indicating the player's vertical position on the field. 1 = Goalkeeper, 2-5 = Defender, 6-9 = Midfielder, 10-11 = Forward, where 5 is an offensive defender, 9 is an offensive midfielder, etc.
     * @type {number}
     * @memberof EventPlayer
     */
    positionX?: number;
    /**
     * Number indicating the player's horizontal position on the field. Ranges from 1-9, where 1 = furthest right, 9 = furthest left.
     * @type {number}
     * @memberof EventPlayer
     */
    positionY?: number;
    /**
     * Number 1-11 indicating the player's position in the lineup. 1 = goalkeeper, 2 = defender furthest right.
     * @type {number}
     * @memberof EventPlayer
     */
    positionNumber?: number;
    /**
     * The shirt number the player is wearing
     * @type {number}
     * @memberof EventPlayer
     */
    shirtNumber?: number;
}

export function EventPlayerFromJSON(json: any): EventPlayer {
    return EventPlayerFromJSONTyped(json, false);
}

export function EventPlayerFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventPlayer {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'player': PartialPersonFromJSON(json['player']),
        'eventPlayerType': EventPlayerTypeFromJSON(json['event_player_type']),
        'homeTeam': json['home_team'],
        'positionX': !exists(json, 'position_x') ? undefined : json['position_x'],
        'positionY': !exists(json, 'position_y') ? undefined : json['position_y'],
        'positionNumber': !exists(json, 'position_number') ? undefined : json['position_number'],
        'shirtNumber': !exists(json, 'shirt_number') ? undefined : json['shirt_number'],
    };
}

export function EventPlayerToJSON(value?: EventPlayer | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'player': PartialPersonToJSON(value.player),
        'event_player_type': EventPlayerTypeToJSON(value.eventPlayerType),
        'home_team': value.homeTeam,
        'position_x': value.positionX,
        'position_y': value.positionY,
        'position_number': value.positionNumber,
        'shirt_number': value.shirtNumber,
    };
}

