/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EventStatus,
    EventStatusFromJSON,
    EventStatusFromJSONTyped,
    EventStatusToJSON,
} from './EventStatus';
import {
    PartialPerson,
    PartialPersonFromJSON,
    PartialPersonFromJSONTyped,
    PartialPersonToJSON,
} from './PartialPerson';
import {
    PartialTeam,
    PartialTeamFromJSON,
    PartialTeamFromJSONTyped,
    PartialTeamToJSON,
} from './PartialTeam';
import {
    PartialTournamentSeasonStage,
    PartialTournamentSeasonStageFromJSON,
    PartialTournamentSeasonStageFromJSONTyped,
    PartialTournamentSeasonStageToJSON,
} from './PartialTournamentSeasonStage';
import {
    StageGroup,
    StageGroupFromJSON,
    StageGroupFromJSONTyped,
    StageGroupToJSON,
} from './StageGroup';
import {
    TeamScore,
    TeamScoreFromJSON,
    TeamScoreFromJSONTyped,
    TeamScoreToJSON,
} from './TeamScore';
import {
    Venue,
    VenueFromJSON,
    VenueFromJSONTyped,
    VenueToJSON,
} from './Venue';

/**
 * 
 * @export
 * @interface Event
 */
export interface Event {
    /**
     * Number of spectators at the event
     * @type {number}
     * @memberof Event
     */
    spectators?: number;
    /**
     * 
     * @type {PartialTournamentSeasonStage}
     * @memberof Event
     */
    tournamentSeasonStage: PartialTournamentSeasonStage;
    /**
     * Live minute ticker. Only available if the event_status.type is 'inprogress'
     * @type {number}
     * @memberof Event
     */
    minute?: number;
    /**
     * 
     * @type {StageGroup}
     * @memberof Event
     */
    stageGroup?: StageGroup;
    /**
     * 
     * @type {PartialPerson}
     * @memberof Event
     */
    referee?: PartialPerson;
    /**
     * 
     * @type {Venue}
     * @memberof Event
     */
    venue?: Venue;
    /**
     * Number of incidents which have occured in the Event (goals, red cards, yellow cards, etc).
     * @type {number}
     * @memberof Event
     */
    incidents?: number;
    /**
     * Indicates whether player lineup information is available or not
     * @type {boolean}
     * @memberof Event
     */
    lineupAvailable?: boolean;
    /**
     * Indicates whether the event has livescore updates. If false the event will be updated after FT.
     * @type {boolean}
     * @memberof Event
     */
    liveUpdates?: boolean;
    /**
     * Indicates whether teamstats are available for this event
     * @type {boolean}
     * @memberof Event
     */
    teamstatsAvailable?: boolean;
    /**
     * 
     * @type {TeamScore}
     * @memberof Event
     */
    homeScore?: TeamScore;
    /**
     * 
     * @type {TeamScore}
     * @memberof Event
     */
    awayScore?: TeamScore;
    /**
     * timestamp when the current phase (1st_half, 2nd_half, et, etc) has started. Can be used for calculating the minute ticker
     * @type {Date}
     * @memberof Event
     */
    startedAt?: Date;
    /**
     * Unique identifier
     * @type {number}
     * @memberof Event
     */
    id: number;
    /**
     * 
     * @type {EventStatus}
     * @memberof Event
     */
    eventStatus: EventStatus;
    /**
     * Timestamp when the event is scheduled to start
     * @type {Date}
     * @memberof Event
     */
    startTime: Date;
    /**
     * Goals scored by the home team
     * @type {number}
     * @memberof Event
     */
    goalHome?: number;
    /**
     * Goals scored by the away team
     * @type {number}
     * @memberof Event
     */
    goalAway?: number;
    /**
     * Penalties scored by the home team. Available only if the game goes to penalty shootouts
     * @type {number}
     * @memberof Event
     */
    penaltyHome?: number;
    /**
     * Penalties scored by the away team. Available only if the game goes to penalty shootouts
     * @type {number}
     * @memberof Event
     */
    penaltyAway?: number;
    /**
     * Goals scored by home team over 1 or more legs. Available only if the tie has mutliple legs
     * @type {number}
     * @memberof Event
     */
    aggHome?: number;
    /**
     * Goals scored by home team over 1 or more legs. Available only if the tie has mutliple legs
     * @type {number}
     * @memberof Event
     */
    aggAway?: number;
    /**
     * 
     * @type {PartialTeam}
     * @memberof Event
     */
    homeTeam: PartialTeam;
    /**
     * 
     * @type {PartialTeam}
     * @memberof Event
     */
    awayTeam: PartialTeam;
}

export function EventFromJSON(json: any): Event {
    return EventFromJSONTyped(json, false);
}

export function EventFromJSONTyped(json: any, ignoreDiscriminator: boolean): Event {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'spectators': !exists(json, 'spectators') ? undefined : json['spectators'],
        'tournamentSeasonStage': PartialTournamentSeasonStageFromJSON(json['tournament_season_stage']),
        'minute': !exists(json, 'minute') ? undefined : json['minute'],
        'stageGroup': !exists(json, 'stage_group') ? undefined : StageGroupFromJSON(json['stage_group']),
        'referee': !exists(json, 'referee') ? undefined : PartialPersonFromJSON(json['referee']),
        'venue': !exists(json, 'venue') ? undefined : VenueFromJSON(json['venue']),
        'incidents': !exists(json, 'incidents') ? undefined : json['incidents'],
        'lineupAvailable': !exists(json, 'lineup_available') ? undefined : json['lineup_available'],
        'liveUpdates': !exists(json, 'live_updates') ? undefined : json['live_updates'],
        'teamstatsAvailable': !exists(json, 'teamstats_available') ? undefined : json['teamstats_available'],
        'homeScore': !exists(json, 'home_score') ? undefined : TeamScoreFromJSON(json['home_score']),
        'awayScore': !exists(json, 'away_score') ? undefined : TeamScoreFromJSON(json['away_score']),
        'startedAt': !exists(json, 'started_at') ? undefined : (new Date(json['started_at'])),
        'id': json['id'],
        'eventStatus': EventStatusFromJSON(json['event_status']),
        'startTime': (new Date(json['start_time'])),
        'goalHome': !exists(json, 'goal_home') ? undefined : json['goal_home'],
        'goalAway': !exists(json, 'goal_away') ? undefined : json['goal_away'],
        'penaltyHome': !exists(json, 'penalty_home') ? undefined : json['penalty_home'],
        'penaltyAway': !exists(json, 'penalty_away') ? undefined : json['penalty_away'],
        'aggHome': !exists(json, 'agg_home') ? undefined : json['agg_home'],
        'aggAway': !exists(json, 'agg_away') ? undefined : json['agg_away'],
        'homeTeam': PartialTeamFromJSON(json['home_team']),
        'awayTeam': PartialTeamFromJSON(json['away_team']),
    };
}

export function EventToJSON(value?: Event | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'spectators': value.spectators,
        'tournament_season_stage': PartialTournamentSeasonStageToJSON(value.tournamentSeasonStage),
        'minute': value.minute,
        'stage_group': StageGroupToJSON(value.stageGroup),
        'referee': PartialPersonToJSON(value.referee),
        'venue': VenueToJSON(value.venue),
        'incidents': value.incidents,
        'lineup_available': value.lineupAvailable,
        'live_updates': value.liveUpdates,
        'teamstats_available': value.teamstatsAvailable,
        'home_score': TeamScoreToJSON(value.homeScore),
        'away_score': TeamScoreToJSON(value.awayScore),
        'started_at': value.startedAt === undefined ? undefined : (value.startedAt.toISOString()),
        'id': value.id,
        'event_status': EventStatusToJSON(value.eventStatus),
        'start_time': (value.startTime.toISOString()),
        'goal_home': value.goalHome,
        'goal_away': value.goalAway,
        'penalty_home': value.penaltyHome,
        'penalty_away': value.penaltyAway,
        'agg_home': value.aggHome,
        'agg_away': value.aggAway,
        'home_team': PartialTeamToJSON(value.homeTeam),
        'away_team': PartialTeamToJSON(value.awayTeam),
    };
}

