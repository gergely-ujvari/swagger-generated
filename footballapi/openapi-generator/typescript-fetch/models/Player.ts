/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Country,
    CountryFromJSON,
    CountryFromJSONTyped,
    CountryToJSON,
} from './Country';

/**
 * 
 * @export
 * @interface Player
 */
export interface Player {
    /**
     * Playing position of the player
     * @type {string}
     * @memberof Player
     */
    position?: PlayerPositionEnum;
    /**
     * 
     * @type {Country}
     * @memberof Player
     */
    country: Country;
    /**
     * Date when the person was born
     * @type {Date}
     * @memberof Player
     */
    birthdate?: Date;
    /**
     * Human readable first(given) name
     * @type {string}
     * @memberof Player
     */
    firstName?: string;
    /**
     * Human readable last(family) name
     * @type {string}
     * @memberof Player
     */
    lastName?: string;
    /**
     * True if currently active, false if retired
     * @type {boolean}
     * @memberof Player
     */
    active?: boolean;
    /**
     * Person's gender
     * @type {string}
     * @memberof Player
     */
    gender?: PlayerGenderEnum;
    /**
     * Unique identifier within the system
     * @type {number}
     * @memberof Player
     */
    id: number;
    /**
     * Human readable name of the Person
     * @type {string}
     * @memberof Player
     */
    name: string;
    /**
     * 150x150 face image of Person
     * @type {string}
     * @memberof Player
     */
    urlThumb?: string;
    /**
     * 277x338 full body image of Person
     * @type {string}
     * @memberof Player
     */
    urlImage?: string;
}


/**
 * @export
 */
export const PlayerPositionEnum = {
    Keeper: 'keeper',
    Defender: 'defender',
    Midfielder: 'midfielder',
    Forward: 'forward'
} as const;
export type PlayerPositionEnum = typeof PlayerPositionEnum[keyof typeof PlayerPositionEnum];

/**
 * @export
 */
export const PlayerGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE'
} as const;
export type PlayerGenderEnum = typeof PlayerGenderEnum[keyof typeof PlayerGenderEnum];


export function PlayerFromJSON(json: any): Player {
    return PlayerFromJSONTyped(json, false);
}

export function PlayerFromJSONTyped(json: any, ignoreDiscriminator: boolean): Player {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'position': !exists(json, 'position') ? undefined : json['position'],
        'country': CountryFromJSON(json['country']),
        'birthdate': !exists(json, 'birthdate') ? undefined : (new Date(json['birthdate'])),
        'firstName': !exists(json, 'first_name') ? undefined : json['first_name'],
        'lastName': !exists(json, 'last_name') ? undefined : json['last_name'],
        'active': !exists(json, 'active') ? undefined : json['active'],
        'gender': !exists(json, 'gender') ? undefined : json['gender'],
        'id': json['id'],
        'name': json['name'],
        'urlThumb': !exists(json, 'url_thumb') ? undefined : json['url_thumb'],
        'urlImage': !exists(json, 'url_image') ? undefined : json['url_image'],
    };
}

export function PlayerToJSON(value?: Player | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'position': value.position,
        'country': CountryToJSON(value.country),
        'birthdate': value.birthdate === undefined ? undefined : (value.birthdate.toISOString().substr(0,10)),
        'first_name': value.firstName,
        'last_name': value.lastName,
        'active': value.active,
        'gender': value.gender,
        'id': value.id,
        'name': value.name,
        'url_thumb': value.urlThumb,
        'url_image': value.urlImage,
    };
}

