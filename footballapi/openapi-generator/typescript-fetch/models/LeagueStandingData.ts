/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LeagueStandingDataAllOf,
    LeagueStandingDataAllOfFromJSON,
    LeagueStandingDataAllOfFromJSONTyped,
    LeagueStandingDataAllOfToJSON,
} from './LeagueStandingDataAllOf';
import {
    PartialTeamWithForm,
    PartialTeamWithFormFromJSON,
    PartialTeamWithFormFromJSONTyped,
    PartialTeamWithFormToJSON,
} from './PartialTeamWithForm';
import {
    StandingData,
    StandingDataFromJSON,
    StandingDataFromJSONTyped,
    StandingDataToJSON,
} from './StandingData';
import {
    StandingRule,
    StandingRuleFromJSON,
    StandingRuleFromJSONTyped,
    StandingRuleToJSON,
} from './StandingRule';

/**
 * 
 * @export
 * @interface LeagueStandingData
 */
export interface LeagueStandingData {
    /**
     * Position of the team/player in the standing
     * @type {number}
     * @memberof LeagueStandingData
     */
    rank: number;
    /**
     * 
     * @type {PartialTeamWithForm}
     * @memberof LeagueStandingData
     */
    team: PartialTeamWithForm;
    /**
     * List of applicable rules to the current standing rank
     * @type {Array<StandingRule>}
     * @memberof LeagueStandingData
     */
    rules?: Array<StandingRule>;
    /**
     * Games won
     * @type {number}
     * @memberof LeagueStandingData
     */
    wins: number;
    /**
     * Games drawn
     * @type {number}
     * @memberof LeagueStandingData
     */
    draws: number;
    /**
     * Total games played
     * @type {number}
     * @memberof LeagueStandingData
     */
    played: number;
    /**
     * Number of points
     * @type {number}
     * @memberof LeagueStandingData
     */
    points: number;
    /**
     * Games lost
     * @type {number}
     * @memberof LeagueStandingData
     */
    defeits: number;
    /**
     * Total number of goals scored
     * @type {number}
     * @memberof LeagueStandingData
     */
    goalsFor: number;
    /**
     * Total number of goals conceded
     * @type {number}
     * @memberof LeagueStandingData
     */
    goalsAgainst: number;
}

export function LeagueStandingDataFromJSON(json: any): LeagueStandingData {
    return LeagueStandingDataFromJSONTyped(json, false);
}

export function LeagueStandingDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): LeagueStandingData {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'rank': json['rank'],
        'team': PartialTeamWithFormFromJSON(json['team']),
        'rules': !exists(json, 'rules') ? undefined : ((json['rules'] as Array<any>).map(StandingRuleFromJSON)),
        'wins': json['wins'],
        'draws': json['draws'],
        'played': json['played'],
        'points': json['points'],
        'defeits': json['defeits'],
        'goalsFor': json['goals_for'],
        'goalsAgainst': json['goals_against'],
    };
}

export function LeagueStandingDataToJSON(value?: LeagueStandingData | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'rank': value.rank,
        'team': PartialTeamWithFormToJSON(value.team),
        'rules': value.rules === undefined ? undefined : ((value.rules as Array<any>).map(StandingRuleToJSON)),
        'wins': value.wins,
        'draws': value.draws,
        'played': value.played,
        'points': value.points,
        'defeits': value.defeits,
        'goals_for': value.goalsFor,
        'goals_against': value.goalsAgainst,
    };
}

