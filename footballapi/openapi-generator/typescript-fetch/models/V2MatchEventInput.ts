/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface V2MatchEventInput
 */
export interface V2MatchEventInput {
    /**
     * 
     * @type {string}
     * @memberof V2MatchEventInput
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof V2MatchEventInput
     */
    typeCode?: V2MatchEventInputTypeCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof V2MatchEventInput
     */
    teamPosition?: V2MatchEventInputTeamPositionEnum;
    /**
     * 
     * @type {number}
     * @memberof V2MatchEventInput
     */
    minute?: number;
    /**
     * 
     * @type {string}
     * @memberof V2MatchEventInput
     */
    primaryPlayerId?: string;
    /**
     * 
     * @type {string}
     * @memberof V2MatchEventInput
     */
    secondaryPlayerId?: string;
    /**
     * Property is used to determine the order of events, if two or more events have the same minute
     * @type {number}
     * @memberof V2MatchEventInput
     */
    sortOrder?: number;
}


/**
 * @export
 */
export const V2MatchEventInputTypeCodeEnum = {
    YellowRedCard: 'YELLOW_RED_CARD',
    PenaltyShootoutMissed: 'PENALTY_SHOOTOUT_MISSED',
    PenaltyShootoutScored: 'PENALTY_SHOOTOUT_SCORED',
    Substitution: 'SUBSTITUTION',
    Goal: 'GOAL',
    RedCard: 'RED_CARD',
    PenaltyMiss: 'PENALTY_MISS',
    YellowCard: 'YELLOW_CARD',
    Assist: 'ASSIST',
    PenaltyGoal: 'PENALTY_GOAL',
    OwnGoal: 'OWN_GOAL'
} as const;
export type V2MatchEventInputTypeCodeEnum = typeof V2MatchEventInputTypeCodeEnum[keyof typeof V2MatchEventInputTypeCodeEnum];

/**
 * @export
 */
export const V2MatchEventInputTeamPositionEnum = {
    Home: 'HOME',
    Away: 'AWAY'
} as const;
export type V2MatchEventInputTeamPositionEnum = typeof V2MatchEventInputTeamPositionEnum[keyof typeof V2MatchEventInputTeamPositionEnum];


export function V2MatchEventInputFromJSON(json: any): V2MatchEventInput {
    return V2MatchEventInputFromJSONTyped(json, false);
}

export function V2MatchEventInputFromJSONTyped(json: any, ignoreDiscriminator: boolean): V2MatchEventInput {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'typeCode': !exists(json, 'type_code') ? undefined : json['type_code'],
        'teamPosition': !exists(json, 'team_position') ? undefined : json['team_position'],
        'minute': !exists(json, 'minute') ? undefined : json['minute'],
        'primaryPlayerId': !exists(json, 'primary_player_id') ? undefined : json['primary_player_id'],
        'secondaryPlayerId': !exists(json, 'secondary_player_id') ? undefined : json['secondary_player_id'],
        'sortOrder': !exists(json, 'sort_order') ? undefined : json['sort_order'],
    };
}

export function V2MatchEventInputToJSON(value?: V2MatchEventInput | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'type_code': value.typeCode,
        'team_position': value.teamPosition,
        'minute': value.minute,
        'primary_player_id': value.primaryPlayerId,
        'secondary_player_id': value.secondaryPlayerId,
        'sort_order': value.sortOrder,
    };
}

