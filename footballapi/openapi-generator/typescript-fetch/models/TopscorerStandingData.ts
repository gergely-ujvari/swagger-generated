/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    PartialPerson,
    PartialPersonFromJSON,
    PartialPersonFromJSONTyped,
    PartialPersonToJSON,
} from './PartialPerson';
import {
    PartialTeam,
    PartialTeamFromJSON,
    PartialTeamFromJSONTyped,
    PartialTeamToJSON,
} from './PartialTeam';
import {
    StandingData,
    StandingDataFromJSON,
    StandingDataFromJSONTyped,
    StandingDataToJSON,
} from './StandingData';
import {
    StandingRule,
    StandingRuleFromJSON,
    StandingRuleFromJSONTyped,
    StandingRuleToJSON,
} from './StandingRule';
import {
    TopscorerStandingDataAllOf,
    TopscorerStandingDataAllOfFromJSON,
    TopscorerStandingDataAllOfFromJSONTyped,
    TopscorerStandingDataAllOfToJSON,
} from './TopscorerStandingDataAllOf';

/**
 * 
 * @export
 * @interface TopscorerStandingData
 */
export interface TopscorerStandingData {
    /**
     * Position of the team/player in the standing
     * @type {number}
     * @memberof TopscorerStandingData
     */
    rank: number;
    /**
     * 
     * @type {PartialTeam}
     * @memberof TopscorerStandingData
     */
    team: PartialTeam;
    /**
     * List of applicable rules to the current standing rank
     * @type {Array<StandingRule>}
     * @memberof TopscorerStandingData
     */
    rules?: Array<StandingRule>;
    /**
     * 
     * @type {PartialPerson}
     * @memberof TopscorerStandingData
     */
    player: PartialPerson;
    /**
     * Number of goals scored
     * @type {number}
     * @memberof TopscorerStandingData
     */
    goals: number;
    /**
     * Total games played
     * @type {number}
     * @memberof TopscorerStandingData
     */
    played?: number;
    /**
     * Number of assists
     * @type {number}
     * @memberof TopscorerStandingData
     */
    assists?: number;
    /**
     * Total number of minutes played
     * @type {number}
     * @memberof TopscorerStandingData
     */
    minutes?: number;
    /**
     * Number of goals scored from the penalty spot
     * @type {number}
     * @memberof TopscorerStandingData
     */
    penalties?: number;
    /**
     * Number of red cards
     * @type {number}
     * @memberof TopscorerStandingData
     */
    redCards?: number;
    /**
     * Number of times the player scored first for the team
     * @type {number}
     * @memberof TopscorerStandingData
     */
    scoredFirst?: number;
    /**
     * Number of yellow cards
     * @type {number}
     * @memberof TopscorerStandingData
     */
    yellowCards?: number;
}

export function TopscorerStandingDataFromJSON(json: any): TopscorerStandingData {
    return TopscorerStandingDataFromJSONTyped(json, false);
}

export function TopscorerStandingDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): TopscorerStandingData {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'rank': json['rank'],
        'team': PartialTeamFromJSON(json['team']),
        'rules': !exists(json, 'rules') ? undefined : ((json['rules'] as Array<any>).map(StandingRuleFromJSON)),
        'player': PartialPersonFromJSON(json['player']),
        'goals': json['goals'],
        'played': !exists(json, 'played') ? undefined : json['played'],
        'assists': !exists(json, 'assists') ? undefined : json['assists'],
        'minutes': !exists(json, 'minutes') ? undefined : json['minutes'],
        'penalties': !exists(json, 'penalties') ? undefined : json['penalties'],
        'redCards': !exists(json, 'red_cards') ? undefined : json['red_cards'],
        'scoredFirst': !exists(json, 'scored_first') ? undefined : json['scored_first'],
        'yellowCards': !exists(json, 'yellow_cards') ? undefined : json['yellow_cards'],
    };
}

export function TopscorerStandingDataToJSON(value?: TopscorerStandingData | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'rank': value.rank,
        'team': PartialTeamToJSON(value.team),
        'rules': value.rules === undefined ? undefined : ((value.rules as Array<any>).map(StandingRuleToJSON)),
        'player': PartialPersonToJSON(value.player),
        'goals': value.goals,
        'played': value.played,
        'assists': value.assists,
        'minutes': value.minutes,
        'penalties': value.penalties,
        'red_cards': value.redCards,
        'scored_first': value.scoredFirst,
        'yellow_cards': value.yellowCards,
    };
}

