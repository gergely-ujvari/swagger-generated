/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    PartialTeam,
    PartialTeamFromJSON,
    PartialTeamFromJSONTyped,
    PartialTeamToJSON,
} from './PartialTeam';
import {
    StandingRule,
    StandingRuleFromJSON,
    StandingRuleFromJSONTyped,
    StandingRuleToJSON,
} from './StandingRule';

/**
 * 
 * @export
 * @interface StandingData
 */
export interface StandingData {
    /**
     * Position of the team/player in the standing
     * @type {number}
     * @memberof StandingData
     */
    rank: number;
    /**
     * 
     * @type {PartialTeam}
     * @memberof StandingData
     */
    team: PartialTeam;
    /**
     * List of applicable rules to the current standing rank
     * @type {Array<StandingRule>}
     * @memberof StandingData
     */
    rules?: Array<StandingRule>;
}

export function StandingDataFromJSON(json: any): StandingData {
    return StandingDataFromJSONTyped(json, false);
}

export function StandingDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): StandingData {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'rank': json['rank'],
        'team': PartialTeamFromJSON(json['team']),
        'rules': !exists(json, 'rules') ? undefined : ((json['rules'] as Array<any>).map(StandingRuleFromJSON)),
    };
}

export function StandingDataToJSON(value?: StandingData | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'rank': value.rank,
        'team': PartialTeamToJSON(value.team),
        'rules': value.rules === undefined ? undefined : ((value.rules as Array<any>).map(StandingRuleToJSON)),
    };
}

