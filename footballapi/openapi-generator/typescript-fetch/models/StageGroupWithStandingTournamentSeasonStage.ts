/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LeagueStandingData,
    LeagueStandingDataFromJSON,
    LeagueStandingDataFromJSONTyped,
    LeagueStandingDataToJSON,
} from './LeagueStandingData';
import {
    StageGroupWithStanding,
    StageGroupWithStandingFromJSON,
    StageGroupWithStandingFromJSONTyped,
    StageGroupWithStandingToJSON,
} from './StageGroupWithStanding';
import {
    StageGroupWithStandingTournamentSeasonStageAllOf,
    StageGroupWithStandingTournamentSeasonStageAllOfFromJSON,
    StageGroupWithStandingTournamentSeasonStageAllOfFromJSONTyped,
    StageGroupWithStandingTournamentSeasonStageAllOfToJSON,
} from './StageGroupWithStandingTournamentSeasonStageAllOf';
import {
    TournamentSeasonStage,
    TournamentSeasonStageFromJSON,
    TournamentSeasonStageFromJSONTyped,
    TournamentSeasonStageToJSON,
} from './TournamentSeasonStage';

/**
 * 
 * @export
 * @interface StageGroupWithStandingTournamentSeasonStage
 */
export interface StageGroupWithStandingTournamentSeasonStage {
    /**
     * Unique resource identifier
     * @type {number}
     * @memberof StageGroupWithStandingTournamentSeasonStage
     */
    id: number;
    /**
     * Human readable name of the Group
     * @type {string}
     * @memberof StageGroupWithStandingTournamentSeasonStage
     */
    name: string;
    /**
     * The order in the stage of the group
     * @type {number}
     * @memberof StageGroupWithStandingTournamentSeasonStage
     */
    orderInStage?: number;
    /**
     * League Standing for the StageGroup if available and requested
     * @type {Array<LeagueStandingData>}
     * @memberof StageGroupWithStandingTournamentSeasonStage
     */
    standing?: Array<LeagueStandingData>;
    /**
     * 
     * @type {TournamentSeasonStage}
     * @memberof StageGroupWithStandingTournamentSeasonStage
     */
    tournamentSeasonStage: TournamentSeasonStage;
}

export function StageGroupWithStandingTournamentSeasonStageFromJSON(json: any): StageGroupWithStandingTournamentSeasonStage {
    return StageGroupWithStandingTournamentSeasonStageFromJSONTyped(json, false);
}

export function StageGroupWithStandingTournamentSeasonStageFromJSONTyped(json: any, ignoreDiscriminator: boolean): StageGroupWithStandingTournamentSeasonStage {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'orderInStage': !exists(json, 'order_in_stage') ? undefined : json['order_in_stage'],
        'standing': !exists(json, 'standing') ? undefined : ((json['standing'] as Array<any>).map(LeagueStandingDataFromJSON)),
        'tournamentSeasonStage': TournamentSeasonStageFromJSON(json['tournament_season_stage']),
    };
}

export function StageGroupWithStandingTournamentSeasonStageToJSON(value?: StageGroupWithStandingTournamentSeasonStage | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'order_in_stage': value.orderInStage,
        'standing': value.standing === undefined ? undefined : ((value.standing as Array<any>).map(LeagueStandingDataToJSON)),
        'tournament_season_stage': TournamentSeasonStageToJSON(value.tournamentSeasonStage),
    };
}

