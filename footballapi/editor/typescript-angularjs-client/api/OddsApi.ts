/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class OddsApi {
    protected basePath = 'https://false';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
     * Get available liveodds for an event
     * @param id Unique identifier of the resource.
     * @param xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#39;coupon&#39; key with the odds fo building URLs.
     */
    public eventsIdLiveoddsGet (id: string, xOddClient: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.Odd>> {
        const localVarPath = this.basePath + '/events/{id}/liveodds'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling eventsIdLiveoddsGet.');
        }

        // verify required parameter 'xOddClient' is not null or undefined
        if (xOddClient === null || xOddClient === undefined) {
            throw new Error('Required parameter xOddClient was null or undefined when calling eventsIdLiveoddsGet.');
        }

        headerParams['X-Odd-Client'] = xOddClient;

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Get a list of odds available in the system
     * @param id Unique identifier of the resource.
     * @param xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#39;coupon&#39; key with the odds fo building URLs.
     */
    public eventsIdOddsGet (id: string, xOddClient: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.Odd>> {
        const localVarPath = this.basePath + '/events/{id}/odds'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling eventsIdOddsGet.');
        }

        // verify required parameter 'xOddClient' is not null or undefined
        if (xOddClient === null || xOddClient === undefined) {
            throw new Error('Required parameter xOddClient was null or undefined when calling eventsIdOddsGet.');
        }

        headerParams['X-Odd-Client'] = xOddClient;

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Get available pre-game odds for an Event
     * @param id Unique identifier of the resource.
     * @param xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#39;coupon&#39; key with the odds fo building URLs.
     */
    public eventsIdPregameoddsGet (id: string, xOddClient: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.Odd>> {
        const localVarPath = this.basePath + '/events/{id}/pregameodds'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling eventsIdPregameoddsGet.');
        }

        // verify required parameter 'xOddClient' is not null or undefined
        if (xOddClient === null || xOddClient === undefined) {
            throw new Error('Required parameter xOddClient was null or undefined when calling eventsIdPregameoddsGet.');
        }

        headerParams['X-Odd-Client'] = xOddClient;

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Get a list of liveodds available in the system
     * @param xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#39;coupon&#39; key with the odds fo building URLs.
     */
    public liveoddsGet (xOddClient: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.Odd>> {
        const localVarPath = this.basePath + '/liveodds';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'xOddClient' is not null or undefined
        if (xOddClient === null || xOddClient === undefined) {
            throw new Error('Required parameter xOddClient was null or undefined when calling liveoddsGet.');
        }

        headerParams['X-Odd-Client'] = xOddClient;

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Return a list of OddProviders available in the system. If X-Odd-Client is specified they will be filtered and ordered by the client configuration.
     * @param xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#39;coupon&#39; key with the odds fo building URLs.
     */
    public oddProvidersGet (xOddClient: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.OddProvider>> {
        const localVarPath = this.basePath + '/odd_providers';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'xOddClient' is not null or undefined
        if (xOddClient === null || xOddClient === undefined) {
            throw new Error('Required parameter xOddClient was null or undefined when calling oddProvidersGet.');
        }

        headerParams['X-Odd-Client'] = xOddClient;

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Returns a list of Odds
     * @param oddClient Odd client code
     * @param sportType Sport type filter
     * @param eventType Event type filter
     * @param fromEventStartTime Return odds for Events with start_time &gt;&#x3D; from_event_start_time. RFC 3339 format
     * @param toEventStartTime Return odds for Events with start_time &lt;&#x3D; to_event_start_time. RFC 3339 format
     * @param teamId Team ID
     * @param teamIds List for team IDs separated by commas.
     * @param eventOrder Order matching events for a specific client
     * @param matchIds List for match IDs separated by commas.
     * @param tournamentIds List for tournament IDs separated by commas.
     * @param seasonIds List for season IDs separated by commas.
     * @param oddsType Pregame or live odds selector.
     */
    public oddsGet (oddClient: string, sportType: models.'football', eventType: models.'match', fromEventStartTime?: Date, toEventStartTime?: Date, teamId?: number, teamIds?: string, eventOrder?: string, matchIds?: string, tournamentIds?: string, seasonIds?: string, oddsType?: models.'prematch' | 'live' | 'all', extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.Odd>> {
        const localVarPath = this.basePath + '/odds';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'oddClient' is not null or undefined
        if (oddClient === null || oddClient === undefined) {
            throw new Error('Required parameter oddClient was null or undefined when calling oddsGet.');
        }

        // verify required parameter 'sportType' is not null or undefined
        if (sportType === null || sportType === undefined) {
            throw new Error('Required parameter sportType was null or undefined when calling oddsGet.');
        }

        // verify required parameter 'eventType' is not null or undefined
        if (eventType === null || eventType === undefined) {
            throw new Error('Required parameter eventType was null or undefined when calling oddsGet.');
        }

        if (fromEventStartTime !== undefined) {
            queryParameters['from_event_start_time'] = fromEventStartTime;
        }

        if (toEventStartTime !== undefined) {
            queryParameters['to_event_start_time'] = toEventStartTime;
        }

        if (oddClient !== undefined) {
            queryParameters['odd_client'] = oddClient;
        }

        if (teamId !== undefined) {
            queryParameters['team_id'] = teamId;
        }

        if (teamIds !== undefined) {
            queryParameters['team_ids'] = teamIds;
        }

        if (eventOrder !== undefined) {
            queryParameters['event_order'] = eventOrder;
        }

        if (sportType !== undefined) {
            queryParameters['sport_type'] = sportType;
        }

        if (matchIds !== undefined) {
            queryParameters['match_ids'] = matchIds;
        }

        if (tournamentIds !== undefined) {
            queryParameters['tournament_ids'] = tournamentIds;
        }

        if (seasonIds !== undefined) {
            queryParameters['season_ids'] = seasonIds;
        }

        if (eventType !== undefined) {
            queryParameters['event_type'] = eventType;
        }

        if (oddsType !== undefined) {
            queryParameters['odds_type'] = oddsType;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Returns a list of Odd Providers which have odds available for a given Event
     * @param xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#39;coupon&#39; key with the odds fo building URLs.
     * @param fromTime Return odds for Events with start_time &gt;&#x3D; from_time. RFC 3339 format
     * @param toTime Return odds for Events with start_time &lt;&#x3D; to_time. RFC 3339 format
     */
    public pregameoddsGet (xOddClient: string, fromTime?: Date, toTime?: Date, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.Odd>> {
        const localVarPath = this.basePath + '/pregameodds';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'xOddClient' is not null or undefined
        if (xOddClient === null || xOddClient === undefined) {
            throw new Error('Required parameter xOddClient was null or undefined when calling pregameoddsGet.');
        }

        if (fromTime !== undefined) {
            queryParameters['from_time'] = fromTime;
        }

        if (toTime !== undefined) {
            queryParameters['to_time'] = toTime;
        }

        headerParams['X-Odd-Client'] = xOddClient;

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
