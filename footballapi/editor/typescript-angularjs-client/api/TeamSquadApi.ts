/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class TeamSquadApi {
    protected basePath = 'https://false';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
     * Get teams squad
     * @param id Unique identifier of the resource.
     * @param memberStatus 
     * @param languageCode Returns translated response based on the language code
     */
    public v2TeamsIdSquadGet (id: string, memberStatus?: models.'ALL' | 'ACTIVE' | 'INACTIVE', languageCode?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.V2TeamSquad> {
        const localVarPath = this.basePath + '/v2/teams/{id}/squad'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v2TeamsIdSquadGet.');
        }

        if (memberStatus !== undefined) {
            queryParameters['memberStatus'] = memberStatus;
        }

        if (languageCode !== undefined) {
            queryParameters['language_code'] = languageCode;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Update TeamSquad members
     * @param squadMembers TeamSquad members to update. Null value for a property means no update
     * @param id Unique identifier of the resource.
     */
    public v2TeamsIdSquadPatch (squadMembers: models.V2TeamSquadInput, id: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.V2TeamSquad> {
        const localVarPath = this.basePath + '/v2/teams/{id}/squad'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'squadMembers' is not null or undefined
        if (squadMembers === null || squadMembers === undefined) {
            throw new Error('Required parameter squadMembers was null or undefined when calling v2TeamsIdSquadPatch.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v2TeamsIdSquadPatch.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PATCH',
            url: localVarPath,
            data: squadMembers,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
