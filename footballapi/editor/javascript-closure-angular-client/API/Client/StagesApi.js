/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.StagesApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * API for accessing various kinds of football data, updated in real time.
 * Version: 0.0.1
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.StagesApi');

goog.require('API.Client.NotFoundError');
goog.require('API.Client.StageDto');
goog.require('API.Client.v2_StageGroup');
goog.require('API.Client.v2_StageGroupCollection');
goog.require('API.Client.v2_StageTeamInput');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.StagesApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('StagesApiBasePath') ?
                   /** @type {!string} */ ($injector.get('StagesApiBasePath')) :
                   'https://false';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('StagesApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('StagesApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.StagesApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * 
 * Listing for Stages resources
 * @param {!number=} opt_teamId Filter stages by a team which is participating in the stage
 * @param {!string=} opt_tournamentIds CSV list of tournament.id values to filter stages
 * @param {!string=} opt_acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.StageDto>>}
 */
API.Client.StagesApi.prototype.stagesGet = function(opt_teamId, opt_tournamentIds, opt_acceptLanguage, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/stages';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_teamId !== undefined) {
    queryParameters['team_id'] = opt_teamId;
  }

  if (opt_tournamentIds !== undefined) {
    queryParameters['tournament_ids'] = opt_tournamentIds;
  }

  headerParams['Accept-Language'] = opt_acceptLanguage;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Permanently delete group
 * @param {!string} id Unique identifier of the resource.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.StagesApi.prototype.v2GroupsIdDelete = function(id, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v2/groups/{id}'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling v2GroupsIdDelete');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * List all groups for specific stage
 * @param {!string} id Unique identifier of the resource.
 * @param {!string=} opt_languageCode Returns translated response based on the language code
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.v2_StageGroupCollection>}
 */
API.Client.StagesApi.prototype.v2StagesIdGroupsGet = function(id, opt_languageCode, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v2/stages/{id}/groups'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling v2StagesIdGroupsGet');
  }
  if (opt_languageCode !== undefined) {
    queryParameters['language_code'] = opt_languageCode;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Create or update multiple groups
 * @param {!Array<!API.Client.v2_StageGroup>} groups List of groups to be updated or created
 * @param {!string} id Unique identifier of the resource.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.v2_StageGroupCollection>}
 */
API.Client.StagesApi.prototype.v2StagesIdGroupsPost = function(groups, id, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v2/stages/{id}/groups'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'groups' is set
  if (!groups) {
    throw new Error('Missing required parameter groups when calling v2StagesIdGroupsPost');
  }
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling v2StagesIdGroupsPost');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: groups,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Replace teams in stage
 * @param {!string} id Unique identifier of the resource.
 * @param {!Array<!API.Client.v2_StageTeamInput>} teamId List of team ids
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.StagesApi.prototype.v2StagesIdTeamsPut = function(id, teamId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v2/stages/{id}/teams'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling v2StagesIdTeamsPut');
  }
  // verify required parameter 'teamId' is set
  if (!teamId) {
    throw new Error('Missing required parameter teamId when calling v2StagesIdTeamsPut');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: teamId,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
