/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.PlayersApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * API for accessing various kinds of football data, updated in real time.
 * Version: 0.0.1
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.PlayersApi');

goog.require('API.Client.NotFoundError');
goog.require('API.Client.Player');
goog.require('API.Client.PlayerDto');
goog.require('API.Client.PlayerEditDto');
goog.require('API.Client.PlayerPageDto');
goog.require('API.Client.PlayerProfile');
goog.require('API.Client.PlayerStatistics');
goog.require('API.Client.PlayerTeam');
goog.require('API.Client.V2ActiveClubsInput');
goog.require('API.Client.v2_PlayerActiveClub');
goog.require('API.Client.v2_PlayerProfile');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.PlayersApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('PlayersApiBasePath') ?
                   /** @type {!string} */ ($injector.get('PlayersApiBasePath')) :
                   'https://false';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('PlayersApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('PlayersApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.PlayersApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * 
 * Search player list by parameters
 * @param {!string} name Filter players by names. Length must be &gt;&#x3D; 4. The filter matches on a per word basis. If you query for &#39;Ronaldo&#39; it will match both &#39;Cristiono Ronaldo&#39; and &#39;Ronaldo&#39;
 * @param {!string=} opt_acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
 * @param {!number=} opt_maxResults Limit the number of results returned
 * @param {!number=} opt_teamId Return only players which are currently in the specified team&#39;s squad
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.Player>>}
 */
API.Client.PlayersApi.prototype.playersGet = function(name, opt_acceptLanguage, opt_maxResults, opt_teamId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/players';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'name' is set
  if (!name) {
    throw new Error('Missing required parameter name when calling playersGet');
  }
  if (name !== undefined) {
    queryParameters['name'] = name;
  }

  if (opt_maxResults !== undefined) {
    queryParameters['max_results'] = opt_maxResults;
  }

  if (opt_teamId !== undefined) {
    queryParameters['team_id'] = opt_teamId;
  }

  headerParams['Accept-Language'] = opt_acceptLanguage;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get information about a specific Player
 * @param {!string} id Unique identifier of the resource.
 * @param {!string=} opt_acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
 * @param {!string=} opt_expand Specify additional information to include in the response
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.PlayerProfile>}
 */
API.Client.PlayersApi.prototype.playersIdGet = function(id, opt_acceptLanguage, opt_expand, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/players/{id}'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling playersIdGet');
  }
  if (opt_expand !== undefined) {
    queryParameters['expand'] = opt_expand;
  }

  headerParams['Accept-Language'] = opt_acceptLanguage;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Returns statistics throughout a Player&#39;s career
 * @param {!string} id Unique identifier of the resource.
 * @param {!string=} opt_acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
 * @param {!string=} opt_type Filter statistics for different types of team and competition
 * @param {!string=} opt_groupBy Group response by a given property
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.PlayerStatistics>>}
 */
API.Client.PlayersApi.prototype.playersIdStatisticsGet = function(id, opt_acceptLanguage, opt_type, opt_groupBy, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/players/{id}/statistics'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling playersIdStatisticsGet');
  }
  if (opt_type !== undefined) {
    queryParameters['type'] = opt_type;
  }

  if (opt_groupBy !== undefined) {
    queryParameters['group_by'] = opt_groupBy;
  }

  headerParams['Accept-Language'] = opt_acceptLanguage;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get the Teams in which a Player has participated during his career
 * @param {!string} id Unique identifier of the resource.
 * @param {!string=} opt_acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.PlayerTeam>>}
 */
API.Client.PlayersApi.prototype.playersIdTeamsGet = function(id, opt_acceptLanguage, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/players/{id}/teams'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling playersIdTeamsGet');
  }
  headerParams['Accept-Language'] = opt_acceptLanguage;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Search player list by parameters
 * @param {!number} offset The number of items to skip before starting to collect the result set
 * @param {!number} limit Limit the number of results returned
 * @param {!string=} opt_languageCode Returns translated response based on the language code
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.PlayerPageDto>}
 */
API.Client.PlayersApi.prototype.v2PlayersGet = function(offset, limit, opt_languageCode, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v2/players';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'offset' is set
  if (!offset) {
    throw new Error('Missing required parameter offset when calling v2PlayersGet');
  }
  // verify required parameter 'limit' is set
  if (!limit) {
    throw new Error('Missing required parameter limit when calling v2PlayersGet');
  }
  if (opt_languageCode !== undefined) {
    queryParameters['language_code'] = opt_languageCode;
  }

  if (offset !== undefined) {
    queryParameters['offset'] = offset;
  }

  if (limit !== undefined) {
    queryParameters['limit'] = limit;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Update the active clubs of a player
 * @param {!string} id Unique identifier of the resource.
 * @param {!V2ActiveClubsInput=} opt_clubs Active clubs input
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.v2_PlayerActiveClub>>}
 */
API.Client.PlayersApi.prototype.v2PlayersIdClubsActivePut = function(id, opt_clubs, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v2/players/{id}/clubs/active'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling v2PlayersIdClubsActivePut');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: opt_clubs,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get player by id
 * @param {!string} id Unique identifier of the resource.
 * @param {!string=} opt_languageCode Returns translated response based on the language code
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.v2_PlayerProfile>}
 */
API.Client.PlayersApi.prototype.v2PlayersIdGet = function(id, opt_languageCode, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v2/players/{id}'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling v2PlayersIdGet');
  }
  if (opt_languageCode !== undefined) {
    queryParameters['language_code'] = opt_languageCode;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Update Player information
 * @param {!PlayerEditDto} player Player information to save in persistance
 * @param {!string} id Unique identifier of the resource.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.PlayersApi.prototype.v2PlayersIdPut = function(player, id, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v2/players/{id}'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'player' is set
  if (!player) {
    throw new Error('Missing required parameter player when calling v2PlayersIdPut');
  }
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling v2PlayersIdPut');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: player,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Store a newly created player in storage.
 * @param {!PlayerEditDto=} opt_player PlayerEditDto object
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.PlayerDto>}
 */
API.Client.PlayersApi.prototype.v2PlayersPost = function(opt_player, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v2/players';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: opt_player,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
