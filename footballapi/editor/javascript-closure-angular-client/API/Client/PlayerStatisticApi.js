/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.PlayerStatisticApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * API for accessing various kinds of football data, updated in real time.
 * Version: 0.0.1
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.PlayerStatisticApi');

goog.require('API.Client.NotFoundError');
goog.require('API.Client.OutputDto');
goog.require('API.Client.v2_PlayerSeasonStatisticOutputCollection');
goog.require('API.Client.v2_PlayerStatisticInput');
goog.require('API.Client.v2_PlayerStatisticOutput');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.PlayerStatisticApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('PlayerStatisticApiBasePath') ?
                   /** @type {!string} */ ($injector.get('PlayerStatisticApiBasePath')) :
                   'https://false';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('PlayerStatisticApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('PlayerStatisticApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.PlayerStatisticApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * 
 * 
 * @param {!string} languageCode Return translations depending on language code
 * @param {!string=} opt_playerIds List for player IDs separated by commas.
 * @param {!string=} opt_seasonIds List for season IDs separated by commas.
 * @param {!number=} opt_teamId Return only statistics for players which are currently in the specified team&#39;s squad
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.OutputDto>>}
 */
API.Client.PlayerStatisticApi.prototype.statisticsPlayersGet = function(languageCode, opt_playerIds, opt_seasonIds, opt_teamId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/statistics/players';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'languageCode' is set
  if (!languageCode) {
    throw new Error('Missing required parameter languageCode when calling statisticsPlayersGet');
  }
  if (opt_playerIds !== undefined) {
    queryParameters['player_ids'] = opt_playerIds;
  }

  if (opt_seasonIds !== undefined) {
    queryParameters['season_ids'] = opt_seasonIds;
  }

  if (opt_teamId !== undefined) {
    queryParameters['team_id'] = opt_teamId;
  }

  if (languageCode !== undefined) {
    queryParameters['language_code'] = languageCode;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Bulk Upsert player statistics
 * @param {!Array<!API.Client.v2_PlayerStatisticInput>=} opt_playerStatistics Array of player match statistics
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.v2_PlayerStatisticOutput>>}
 */
API.Client.PlayerStatisticApi.prototype.v2StatisticsPlayersMatchPut = function(opt_playerStatistics, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v2/statistics/players/match';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: opt_playerStatistics,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve player statistics, grouped by player and season
 * @param {!string=} opt_playerIds CSV list of player id values
 * @param {!string=} opt_seasonIds CSV list of tournament season id values
 * @param {!number=} opt_teamId Team unique identifier
 * @param {!string=} opt_languageCode Returns translated response based on the language code
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.v2_PlayerSeasonStatisticOutputCollection>>}
 */
API.Client.PlayerStatisticApi.prototype.v2StatisticsPlayersSeasonGet = function(opt_playerIds, opt_seasonIds, opt_teamId, opt_languageCode, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v2/statistics/players/season';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_playerIds !== undefined) {
    queryParameters['player_ids'] = opt_playerIds;
  }

  if (opt_seasonIds !== undefined) {
    queryParameters['season_ids'] = opt_seasonIds;
  }

  if (opt_teamId !== undefined) {
    queryParameters['team_id'] = opt_teamId;
  }

  if (opt_languageCode !== undefined) {
    queryParameters['language_code'] = opt_languageCode;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
