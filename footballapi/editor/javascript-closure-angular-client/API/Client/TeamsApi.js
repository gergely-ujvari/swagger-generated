/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.TeamsApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * API for accessing various kinds of football data, updated in real time.
 * Version: 0.0.1
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.TeamsApi');

goog.require('API.Client.Event');
goog.require('API.Client.NotFoundError');
goog.require('API.Client.PartialTeam');
goog.require('API.Client.Team');
goog.require('API.Client.TeamEditDto');
goog.require('API.Client.TeamForm');
goog.require('API.Client.TeamPageDto');
goog.require('API.Client.TeamPlayer');
goog.require('API.Client.TeamPlayerSeasonStatistics');
goog.require('API.Client.TeamSeasonStatistics');
goog.require('API.Client.TournamentSeasonWithTournament');
goog.require('API.Client.V2TeamColors');
goog.require('API.Client.v2_TeamColors');
goog.require('API.Client.v2_TeamProfile');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.TeamsApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('TeamsApiBasePath') ?
                   /** @type {!string} */ ($injector.get('TeamsApiBasePath')) :
                   'https://false';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('TeamsApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('TeamsApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.TeamsApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * 
 * Get Teams for a specific Country.id
 * @param {!string} id Unique identifier of the resource.
 * @param {!string=} opt_acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
 * @param {!string=} opt_national Filter teams for different types of national and non national
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.Team>>}
 */
API.Client.TeamsApi.prototype.countriesIdTeamsGet = function(id, opt_acceptLanguage, opt_national, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/countries/{id}/teams'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling countriesIdTeamsGet');
  }
  if (opt_national !== undefined) {
    queryParameters['national'] = opt_national;
  }

  headerParams['Accept-Language'] = opt_acceptLanguage;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Search all teams by parameters
 * @param {!string} name Filter by team. Length must be &gt;&#x3D; 4. The filter matches on a per word basis. If you query for &#39;United&#39; it will match both &#39;West Ham United&#39; and &#39;Newcastle United&#39;
 * @param {!string=} opt_acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
 * @param {!number=} opt_maxResults Limit the number of results returned
 * @param {!number=} opt_countryId Filter teams just from the specified country
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.Team>>}
 */
API.Client.TeamsApi.prototype.teamsGet = function(name, opt_acceptLanguage, opt_maxResults, opt_countryId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/teams';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'name' is set
  if (!name) {
    throw new Error('Missing required parameter name when calling teamsGet');
  }
  if (name !== undefined) {
    queryParameters['name'] = name;
  }

  if (opt_maxResults !== undefined) {
    queryParameters['max_results'] = opt_maxResults;
  }

  if (opt_countryId !== undefined) {
    queryParameters['country_id'] = opt_countryId;
  }

  headerParams['Accept-Language'] = opt_acceptLanguage;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get a list of events in which a team with a specified id has participated
 * @param {!string} id Unique identifier of the resource.
 * @param {!string=} opt_acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
 * @param {!Date=} opt_fromTime Filter events, which have a start_time after the specified date, format is RFC 3339
 * @param {!Date=} opt_toTime Filter events, which have a start_time before the specified date, format is RFC 3339
 * @param {!string=} opt_direction Whether to sort the results by ascending or descending order
 * @param {!number=} opt_tournamentSeasonStageId Filter events for a specific tournament_season_stage.id
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.Event>>}
 */
API.Client.TeamsApi.prototype.teamsIdEventsGet = function(id, opt_acceptLanguage, opt_fromTime, opt_toTime, opt_direction, opt_tournamentSeasonStageId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/teams/{id}/events'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling teamsIdEventsGet');
  }
  if (opt_fromTime !== undefined) {
    queryParameters['from_time'] = opt_fromTime;
  }

  if (opt_toTime !== undefined) {
    queryParameters['to_time'] = opt_toTime;
  }

  if (opt_direction !== undefined) {
    queryParameters['direction'] = opt_direction;
  }

  if (opt_tournamentSeasonStageId !== undefined) {
    queryParameters['tournament_season_stage_id'] = opt_tournamentSeasonStageId;
  }

  headerParams['Accept-Language'] = opt_acceptLanguage;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get Team form information accross all tournaments
 * @param {!string} id Unique identifier of the resource.
 * @param {!string=} opt_acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
 * @param {!string=} opt_expand Whether to include information about every event in the TeamForm response
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.TeamForm>>}
 */
API.Client.TeamsApi.prototype.teamsIdFormGet = function(id, opt_acceptLanguage, opt_expand, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/teams/{id}/form'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling teamsIdFormGet');
  }
  if (opt_expand !== undefined) {
    queryParameters['expand'] = opt_expand;
  }

  headerParams['Accept-Language'] = opt_acceptLanguage;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get information about a specific Team
 * @param {!string} id Unique identifier of the resource.
 * @param {!string=} opt_acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
 * @param {!string=} opt_expand Specifies additional information to include with the Team response
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Team>}
 */
API.Client.TeamsApi.prototype.teamsIdGet = function(id, opt_acceptLanguage, opt_expand, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/teams/{id}'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling teamsIdGet');
  }
  if (opt_expand !== undefined) {
    queryParameters['expand'] = opt_expand;
  }

  headerParams['Accept-Language'] = opt_acceptLanguage;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get the current squad for a Team
 * @param {!string} id Unique identifier of the resource.
 * @param {!string=} opt_acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
 * @param {!string=} opt_groupBy Group players by a specific property
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.TeamPlayer>>}
 */
API.Client.TeamsApi.prototype.teamsIdPlayersGet = function(id, opt_acceptLanguage, opt_groupBy, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/teams/{id}/players'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling teamsIdPlayersGet');
  }
  if (opt_groupBy !== undefined) {
    queryParameters['group_by'] = opt_groupBy;
  }

  headerParams['Accept-Language'] = opt_acceptLanguage;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get player statistics for the current season in the Team&#39;s League
 * @param {!string} id Unique identifier of the resource.
 * @param {!string=} opt_acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
 * @param {!string=} opt_groupBy Group the response by a specific property
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.TeamPlayerSeasonStatistics>}
 */
API.Client.TeamsApi.prototype.teamsIdPlayersStatisticsGet = function(id, opt_acceptLanguage, opt_groupBy, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/teams/{id}/players/statistics'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling teamsIdPlayersStatisticsGet');
  }
  if (opt_groupBy !== undefined) {
    queryParameters['group_by'] = opt_groupBy;
  }

  headerParams['Accept-Language'] = opt_acceptLanguage;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get a list of TournamentSeasons for which Player Statistics are available
 * @param {!string} id Unique identifier of the resource.
 * @param {!string=} opt_acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.TournamentSeasonWithTournament>>}
 */
API.Client.TeamsApi.prototype.teamsIdPlayersStatisticsSeasonsGet = function(id, opt_acceptLanguage, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/teams/{id}/players/statistics/seasons'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling teamsIdPlayersStatisticsSeasonsGet');
  }
  headerParams['Accept-Language'] = opt_acceptLanguage;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get player statistics for the current season in the Team&#39;s League
 * @param {!number} seasonId Unique identifier of the TournamentSeason resource
 * @param {!string} id Unique identifier of the resource.
 * @param {!string=} opt_acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
 * @param {!string=} opt_groupBy Group the response by a specific property
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.TeamPlayerSeasonStatistics>}
 */
API.Client.TeamsApi.prototype.teamsIdPlayersStatisticsSeasonsSeasonIdGet = function(seasonId, id, opt_acceptLanguage, opt_groupBy, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/teams/{id}/players/statistics/seasons/{seasonId}'
      .replace('{' + 'seasonId' + '}', String(seasonId))
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'seasonId' is set
  if (!seasonId) {
    throw new Error('Missing required parameter seasonId when calling teamsIdPlayersStatisticsSeasonsSeasonIdGet');
  }
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling teamsIdPlayersStatisticsSeasonsSeasonIdGet');
  }
  if (opt_groupBy !== undefined) {
    queryParameters['group_by'] = opt_groupBy;
  }

  headerParams['Accept-Language'] = opt_acceptLanguage;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get the statistics for the latest League the team participates in
 * @param {!string} id Unique identifier of the resource.
 * @param {!string=} opt_acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
 * @param {!string=} opt_standing Select whether to include a full league standing or just the team&#39;s position
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.TeamSeasonStatistics>}
 */
API.Client.TeamsApi.prototype.teamsIdStatisticsLeagueGet = function(id, opt_acceptLanguage, opt_standing, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/teams/{id}/statistics/league'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling teamsIdStatisticsLeagueGet');
  }
  if (opt_standing !== undefined) {
    queryParameters['standing'] = opt_standing;
  }

  headerParams['Accept-Language'] = opt_acceptLanguage;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get a list of Teams, which are participating in a given TournamentSeason
 * @param {!number} id Unique identifier of the TournamentSeason resource
 * @param {!string=} opt_acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.PartialTeam>>}
 */
API.Client.TeamsApi.prototype.tournamentsSeasonsIdTeamsGet = function(id, opt_acceptLanguage, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/tournaments/seasons/{id}/teams'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling tournamentsSeasonsIdTeamsGet');
  }
  headerParams['Accept-Language'] = opt_acceptLanguage;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get a list of Teams, which are participating in a given TournamentSeasonStage
 * @param {!number} id Unique identifier of the TournamentSeasonStage resource
 * @param {!string=} opt_acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.PartialTeam>>}
 */
API.Client.TeamsApi.prototype.tournamentsSeasonsStagesIdTeamsGet = function(id, opt_acceptLanguage, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/tournaments/seasons/stages/{id}/teams'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling tournamentsSeasonsStagesIdTeamsGet');
  }
  headerParams['Accept-Language'] = opt_acceptLanguage;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Manually insert team colors by team or event.
 * @param {!V2TeamColors=} opt_teamColorsDto Team shirt colors data
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.v2_TeamColors>}
 */
API.Client.TeamsApi.prototype.v2TeamsColorsPost = function(opt_teamColorsDto, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v2/teams/colors';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: opt_teamColorsDto,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get teams list
 * @param {!number} offset The number of items to skip before starting to collect the result set
 * @param {!number} limit Limit the number of results returned
 * @param {!string=} opt_languageCode Returns translated response based on the language code
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.TeamPageDto>}
 */
API.Client.TeamsApi.prototype.v2TeamsGet = function(offset, limit, opt_languageCode, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v2/teams';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'offset' is set
  if (!offset) {
    throw new Error('Missing required parameter offset when calling v2TeamsGet');
  }
  // verify required parameter 'limit' is set
  if (!limit) {
    throw new Error('Missing required parameter limit when calling v2TeamsGet');
  }
  if (opt_languageCode !== undefined) {
    queryParameters['language_code'] = opt_languageCode;
  }

  if (offset !== undefined) {
    queryParameters['offset'] = offset;
  }

  if (limit !== undefined) {
    queryParameters['limit'] = limit;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get team by id
 * @param {!string} id Unique identifier of the resource.
 * @param {!string=} opt_languageCode Returns translated response based on the language code
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.v2_TeamProfile>}
 */
API.Client.TeamsApi.prototype.v2TeamsIdGet = function(id, opt_languageCode, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v2/teams/{id}'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling v2TeamsIdGet');
  }
  if (opt_languageCode !== undefined) {
    queryParameters['language_code'] = opt_languageCode;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Update Team information
 * @param {!TeamEditDto} team Team information to save in persistance
 * @param {!string} id Unique identifier of the resource.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.v2_TeamProfile>}
 */
API.Client.TeamsApi.prototype.v2TeamsIdPut = function(team, id, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v2/teams/{id}'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'team' is set
  if (!team) {
    throw new Error('Missing required parameter team when calling v2TeamsIdPut');
  }
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling v2TeamsIdPut');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: team,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Manually insert team.
 * @param {!TeamEditDto=} opt_teamEditDto TeamEditDto object
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.v2_TeamProfile>}
 */
API.Client.TeamsApi.prototype.v2TeamsPost = function(opt_teamEditDto, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v2/teams';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: opt_teamEditDto,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
