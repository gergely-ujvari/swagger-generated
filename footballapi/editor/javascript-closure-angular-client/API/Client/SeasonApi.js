/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.SeasonApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * API for accessing various kinds of football data, updated in real time.
 * Version: 0.0.1
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.SeasonApi');

goog.require('API.Client.NotFoundError');
goog.require('API.Client.V2TournamentSeasonInsertInput');
goog.require('API.Client.V2TournamentSeasonStatusInput');
goog.require('API.Client.V2TournamentSeasonUpdateInput');
goog.require('API.Client.v2_Season');
goog.require('API.Client.v2_SeasonDetails');
goog.require('API.Client.v2_SeasonList');
goog.require('API.Client.v2_SeasonStage');
goog.require('API.Client.v2_SeasonStageCollection');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.SeasonApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('SeasonApiBasePath') ?
                   /** @type {!string} */ ($injector.get('SeasonApiBasePath')) :
                   'https://false';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('SeasonApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('SeasonApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.SeasonApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * 
 * Get the details of a season by season_id, or by tournament_id and active status
 * @param {!string=} opt_seasonId The ID of the season of interest
 * @param {!string=} opt_tournamentId The ID of the tournament whose active season is of interest
 * @param {!string=} opt_status Required only when the tournament_id parameter is provided
 * @param {!string=} opt_languageCode Returns translated response based on the language code
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.v2_SeasonDetails>}
 */
API.Client.SeasonApi.prototype.v2SeasonsDetailsGet = function(opt_seasonId, opt_tournamentId, opt_status, opt_languageCode, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v2/seasons/details';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_seasonId !== undefined) {
    queryParameters['season_id'] = opt_seasonId;
  }

  if (opt_tournamentId !== undefined) {
    queryParameters['tournament_id'] = opt_tournamentId;
  }

  if (opt_status !== undefined) {
    queryParameters['status'] = opt_status;
  }

  if (opt_languageCode !== undefined) {
    queryParameters['language_code'] = opt_languageCode;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get seasons by tournament_id, team_id and status
 * @param {!string=} opt_tournamentId Required only if no other parameters are provided
 * @param {!string=} opt_teamId Required only if no other paramenters are provided
 * @param {!string=} opt_status Required only if no other parameters are provided
 * @param {!string=} opt_languageCode Returns translated response based on the language code
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.v2_SeasonList>}
 */
API.Client.SeasonApi.prototype.v2SeasonsGet = function(opt_tournamentId, opt_teamId, opt_status, opt_languageCode, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v2/seasons';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_tournamentId !== undefined) {
    queryParameters['tournament_id'] = opt_tournamentId;
  }

  if (opt_teamId !== undefined) {
    queryParameters['team_id'] = opt_teamId;
  }

  if (opt_status !== undefined) {
    queryParameters['status'] = opt_status;
  }

  if (opt_languageCode !== undefined) {
    queryParameters['language_code'] = opt_languageCode;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Update an existing season
 * @param {!string} id Unique identifier of the resource.
 * @param {!V2TournamentSeasonUpdateInput} name Season name
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.v2_Season>}
 */
API.Client.SeasonApi.prototype.v2SeasonsIdPut = function(id, name, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v2/seasons/{id}'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling v2SeasonsIdPut');
  }
  // verify required parameter 'name' is set
  if (!name) {
    throw new Error('Missing required parameter name when calling v2SeasonsIdPut');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: name,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * List all stages for specific season
 * @param {!string} id Unique identifier of the resource.
 * @param {!string=} opt_languageCode Returns translated response based on the language code
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.v2_SeasonStageCollection>}
 */
API.Client.SeasonApi.prototype.v2SeasonsIdStagesGet = function(id, opt_languageCode, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v2/seasons/{id}/stages'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling v2SeasonsIdStagesGet');
  }
  if (opt_languageCode !== undefined) {
    queryParameters['language_code'] = opt_languageCode;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Create or update multiple stages
 * @param {!Array<!API.Client.v2_SeasonStage>} stages List of stages to be updated or created
 * @param {!string} id Unique identifier of the resource.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.v2_SeasonStageCollection>}
 */
API.Client.SeasonApi.prototype.v2SeasonsIdStagesPost = function(stages, id, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v2/seasons/{id}/stages'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'stages' is set
  if (!stages) {
    throw new Error('Missing required parameter stages when calling v2SeasonsIdStagesPost');
  }
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling v2SeasonsIdStagesPost');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: stages,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Create a new season
 * @param {!V2TournamentSeasonInsertInput} season Season information
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.v2_Season>}
 */
API.Client.SeasonApi.prototype.v2SeasonsPost = function(season, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v2/seasons';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'season' is set
  if (!season) {
    throw new Error('Missing required parameter season when calling v2SeasonsPost');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: season,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Permanently delete stage
 * @param {!string} id Unique identifier of the resource.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.SeasonApi.prototype.v2StagesIdDelete = function(id, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v2/stages/{id}'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling v2StagesIdDelete');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Set the current season as active and change all other seasons in the tournament to inactive
 * @param {!string} id Unique identifier of the resource.
 * @param {!V2TournamentSeasonStatusInput} seasonId Season unique identifier
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.v2_Season>}
 */
API.Client.SeasonApi.prototype.v2TournamentsIdSeasonsCurrentPatch = function(id, seasonId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v2/tournaments/{id}/seasons/current'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling v2TournamentsIdSeasonsCurrentPatch');
  }
  // verify required parameter 'seasonId' is set
  if (!seasonId) {
    throw new Error('Missing required parameter seasonId when calling v2TournamentsIdSeasonsCurrentPatch');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
    data: seasonId,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
