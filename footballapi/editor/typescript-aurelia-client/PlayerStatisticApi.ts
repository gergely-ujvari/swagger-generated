/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  OutputDto,
  V2PlayerStatisticOutput,
  V2PlayerSeasonStatisticOutputCollection,
} from './models';

/**
 * statisticsPlayersGet - parameters interface
 */
export interface IStatisticsPlayersGetParams {
  languageCode: string;
  playerIds?: string;
  seasonIds?: string;
  teamId?: number;
}

/**
 * v2StatisticsPlayersMatchPut - parameters interface
 */
export interface IV2StatisticsPlayersMatchPutParams {
  playerStatistics?: Array<V2PlayerStatisticInput>;
}

/**
 * v2StatisticsPlayersSeasonGet - parameters interface
 */
export interface IV2StatisticsPlayersSeasonGetParams {
  playerIds?: string;
  seasonIds?: string;
  teamId?: number;
  languageCode?: string;
}

/**
 * PlayerStatisticApi - API class
 */
@autoinject()
export class PlayerStatisticApi extends Api {

  /**
   * Creates a new PlayerStatisticApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * @param params.languageCode Return translations depending on language code
   * @param params.playerIds List for player IDs separated by commas.
   * @param params.seasonIds List for season IDs separated by commas.
   * @param params.teamId Return only statistics for players which are currently in the specified team&#39;s squad
   */
  async statisticsPlayersGet(params: IStatisticsPlayersGetParams): Promise<Array<OutputDto>> {
    // Verify required parameters are set
    this.ensureParamIsSet('statisticsPlayersGet', params, 'languageCode');

    // Create URL to call
    const url = `${this.basePath}/statistics/players`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'player_ids': params['playerIds'],
        'season_ids': params['seasonIds'],
        'team_id': params['teamId'],
        'language_code': params['languageCode'],
      })

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Bulk Upsert player statistics
   * @param params.playerStatistics Array of player match statistics
   */
  async v2StatisticsPlayersMatchPut(params: IV2StatisticsPlayersMatchPutParams): Promise<Array<V2PlayerStatisticOutput>> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/v2/statistics/players/match`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['playerStatistics'] || {}))

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve player statistics, grouped by player and season
   * @param params.playerIds CSV list of player id values
   * @param params.seasonIds CSV list of tournament season id values
   * @param params.teamId Team unique identifier
   * @param params.languageCode Returns translated response based on the language code
   */
  async v2StatisticsPlayersSeasonGet(params: IV2StatisticsPlayersSeasonGetParams): Promise<Array<V2PlayerSeasonStatisticOutputCollection>> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/v2/statistics/players/season`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'player_ids': params['playerIds'],
        'season_ids': params['seasonIds'],
        'team_id': params['teamId'],
        'language_code': params['languageCode'],
      })

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

