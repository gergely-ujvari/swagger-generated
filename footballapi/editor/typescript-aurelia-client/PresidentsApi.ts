/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  V2PresidentUpdate,
  V2PresidentInput,
  V2President,
} from './models';

/**
 * v2PresidentsIdPut - parameters interface
 */
export interface IV2PresidentsIdPutParams {
  id: string;
  president?: V2PresidentUpdate;
}

/**
 * v2PresidentsPost - parameters interface
 */
export interface IV2PresidentsPostParams {
  president?: V2PresidentInput;
}

/**
 * PresidentsApi - API class
 */
@autoinject()
export class PresidentsApi extends Api {

  /**
   * Creates a new PresidentsApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Update president information
   * @param params.id Unique identifier of the resource.
   * @param params.president President information to save in persistance
   */
  async v2PresidentsIdPut(params: IV2PresidentsIdPutParams): Promise<V2President> {
    // Verify required parameters are set
    this.ensureParamIsSet('v2PresidentsIdPut', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/v2/presidents/{id}`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['president'] || {}))

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Store a newly created president in storage
   * @param params.president 
   */
  async v2PresidentsPost(params: IV2PresidentsPostParams): Promise<V2President> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/v2/presidents`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['president'] || {}))

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

