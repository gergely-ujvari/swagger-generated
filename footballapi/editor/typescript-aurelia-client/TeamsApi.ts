/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  V2TeamProfile,
  PartialTeam,
  TeamPageDto,
  V2TeamColors,
  Event,
  TeamPlayerSeasonStatistics,
  Team,
  TeamEditDto,
  TeamPlayer,
  TeamSeasonStatistics,
  TeamForm,
  TournamentSeasonWithTournament,
} from './models';

/**
 * countriesIdTeamsGet - parameters interface
 */
export interface ICountriesIdTeamsGetParams {
  id: string;
  acceptLanguage?: string;
  national?: '1' | '0' | 'true' | 'false';
}

/**
 * teamsGet - parameters interface
 */
export interface ITeamsGetParams {
  name: string;
  acceptLanguage?: string;
  maxResults?: number;
  countryId?: number;
}

/**
 * teamsIdEventsGet - parameters interface
 */
export interface ITeamsIdEventsGetParams {
  id: string;
  acceptLanguage?: string;
  fromTime?: Date;
  toTime?: Date;
  direction?: 'asc' | 'desc';
  tournamentSeasonStageId?: number;
}

/**
 * teamsIdFormGet - parameters interface
 */
export interface ITeamsIdFormGetParams {
  id: string;
  acceptLanguage?: string;
  expand?: 'events';
}

/**
 * teamsIdGet - parameters interface
 */
export interface ITeamsIdGetParams {
  id: string;
  acceptLanguage?: string;
  expand?: 'form' | 'form.events' | 'form.events,next_event';
}

/**
 * teamsIdPlayersGet - parameters interface
 */
export interface ITeamsIdPlayersGetParams {
  id: string;
  acceptLanguage?: string;
  groupBy?: 'position';
}

/**
 * teamsIdPlayersStatisticsGet - parameters interface
 */
export interface ITeamsIdPlayersStatisticsGetParams {
  id: string;
  acceptLanguage?: string;
  groupBy?: 'player.position';
}

/**
 * teamsIdPlayersStatisticsSeasonsGet - parameters interface
 */
export interface ITeamsIdPlayersStatisticsSeasonsGetParams {
  id: string;
  acceptLanguage?: string;
}

/**
 * teamsIdPlayersStatisticsSeasonsSeasonIdGet - parameters interface
 */
export interface ITeamsIdPlayersStatisticsSeasonsSeasonIdGetParams {
  seasonId: number;
  id: string;
  acceptLanguage?: string;
  groupBy?: 'player.position';
}

/**
 * teamsIdStatisticsLeagueGet - parameters interface
 */
export interface ITeamsIdStatisticsLeagueGetParams {
  id: string;
  acceptLanguage?: string;
  standing?: 'team' | 'full';
}

/**
 * tournamentsSeasonsIdTeamsGet - parameters interface
 */
export interface ITournamentsSeasonsIdTeamsGetParams {
  id: number;
  acceptLanguage?: string;
}

/**
 * tournamentsSeasonsStagesIdTeamsGet - parameters interface
 */
export interface ITournamentsSeasonsStagesIdTeamsGetParams {
  id: number;
  acceptLanguage?: string;
}

/**
 * v2TeamsColorsPost - parameters interface
 */
export interface IV2TeamsColorsPostParams {
  teamColorsDto?: V2TeamColors;
}

/**
 * v2TeamsGet - parameters interface
 */
export interface IV2TeamsGetParams {
  offset: number;
  limit: number;
  languageCode?: string;
}

/**
 * v2TeamsIdGet - parameters interface
 */
export interface IV2TeamsIdGetParams {
  id: string;
  languageCode?: string;
}

/**
 * v2TeamsIdPut - parameters interface
 */
export interface IV2TeamsIdPutParams {
  team: TeamEditDto;
  id: string;
}

/**
 * v2TeamsPost - parameters interface
 */
export interface IV2TeamsPostParams {
  teamEditDto?: TeamEditDto;
}

/**
 * TeamsApi - API class
 */
@autoinject()
export class TeamsApi extends Api {

  /**
   * Creates a new TeamsApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Get Teams for a specific Country.id
   * @param params.id Unique identifier of the resource.
   * @param params.acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
   * @param params.national Filter teams for different types of national and non national
   */
  async countriesIdTeamsGet(params: ICountriesIdTeamsGetParams): Promise<Array<Team>> {
    // Verify required parameters are set
    this.ensureParamIsSet('countriesIdTeamsGet', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/countries/{id}/teams`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'national': params['national'],
      })
      .withHeader('Accept-Language', params['acceptLanguage'])
      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Search all teams by parameters
   * @param params.name Filter by team. Length must be &gt;&#x3D; 4. The filter matches on a per word basis. If you query for &#39;United&#39; it will match both &#39;West Ham United&#39; and &#39;Newcastle United&#39;
   * @param params.acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
   * @param params.maxResults Limit the number of results returned
   * @param params.countryId Filter teams just from the specified country
   */
  async teamsGet(params: ITeamsGetParams): Promise<Array<Team>> {
    // Verify required parameters are set
    this.ensureParamIsSet('teamsGet', params, 'name');

    // Create URL to call
    const url = `${this.basePath}/teams`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'name': params['name'],
        'max_results': params['maxResults'],
        'country_id': params['countryId'],
      })
      .withHeader('Accept-Language', params['acceptLanguage'])
      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get a list of events in which a team with a specified id has participated
   * @param params.id Unique identifier of the resource.
   * @param params.acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
   * @param params.fromTime Filter events, which have a start_time after the specified date, format is RFC 3339
   * @param params.toTime Filter events, which have a start_time before the specified date, format is RFC 3339
   * @param params.direction Whether to sort the results by ascending or descending order
   * @param params.tournamentSeasonStageId Filter events for a specific tournament_season_stage.id
   */
  async teamsIdEventsGet(params: ITeamsIdEventsGetParams): Promise<Array<Event>> {
    // Verify required parameters are set
    this.ensureParamIsSet('teamsIdEventsGet', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/teams/{id}/events`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'from_time': params['fromTime'],
        'to_time': params['toTime'],
        'direction': params['direction'],
        'tournament_season_stage_id': params['tournamentSeasonStageId'],
      })
      .withHeader('Accept-Language', params['acceptLanguage'])
      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get Team form information accross all tournaments
   * @param params.id Unique identifier of the resource.
   * @param params.acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
   * @param params.expand Whether to include information about every event in the TeamForm response
   */
  async teamsIdFormGet(params: ITeamsIdFormGetParams): Promise<Array<TeamForm>> {
    // Verify required parameters are set
    this.ensureParamIsSet('teamsIdFormGet', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/teams/{id}/form`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'expand': params['expand'],
      })
      .withHeader('Accept-Language', params['acceptLanguage'])
      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get information about a specific Team
   * @param params.id Unique identifier of the resource.
   * @param params.acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
   * @param params.expand Specifies additional information to include with the Team response
   */
  async teamsIdGet(params: ITeamsIdGetParams): Promise<Team> {
    // Verify required parameters are set
    this.ensureParamIsSet('teamsIdGet', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/teams/{id}`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'expand': params['expand'],
      })
      .withHeader('Accept-Language', params['acceptLanguage'])
      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get the current squad for a Team
   * @param params.id Unique identifier of the resource.
   * @param params.acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
   * @param params.groupBy Group players by a specific property
   */
  async teamsIdPlayersGet(params: ITeamsIdPlayersGetParams): Promise<Array<TeamPlayer>> {
    // Verify required parameters are set
    this.ensureParamIsSet('teamsIdPlayersGet', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/teams/{id}/players`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'group_by': params['groupBy'],
      })
      .withHeader('Accept-Language', params['acceptLanguage'])
      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get player statistics for the current season in the Team&#39;s League
   * @param params.id Unique identifier of the resource.
   * @param params.acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
   * @param params.groupBy Group the response by a specific property
   */
  async teamsIdPlayersStatisticsGet(params: ITeamsIdPlayersStatisticsGetParams): Promise<TeamPlayerSeasonStatistics> {
    // Verify required parameters are set
    this.ensureParamIsSet('teamsIdPlayersStatisticsGet', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/teams/{id}/players/statistics`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'group_by': params['groupBy'],
      })
      .withHeader('Accept-Language', params['acceptLanguage'])
      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get a list of TournamentSeasons for which Player Statistics are available
   * @param params.id Unique identifier of the resource.
   * @param params.acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
   */
  async teamsIdPlayersStatisticsSeasonsGet(params: ITeamsIdPlayersStatisticsSeasonsGetParams): Promise<Array<TournamentSeasonWithTournament>> {
    // Verify required parameters are set
    this.ensureParamIsSet('teamsIdPlayersStatisticsSeasonsGet', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/teams/{id}/players/statistics/seasons`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Accept-Language', params['acceptLanguage'])
      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get player statistics for the current season in the Team&#39;s League
   * @param params.seasonId Unique identifier of the TournamentSeason resource
   * @param params.id Unique identifier of the resource.
   * @param params.acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
   * @param params.groupBy Group the response by a specific property
   */
  async teamsIdPlayersStatisticsSeasonsSeasonIdGet(params: ITeamsIdPlayersStatisticsSeasonsSeasonIdGetParams): Promise<TeamPlayerSeasonStatistics> {
    // Verify required parameters are set
    this.ensureParamIsSet('teamsIdPlayersStatisticsSeasonsSeasonIdGet', params, 'seasonId');
    this.ensureParamIsSet('teamsIdPlayersStatisticsSeasonsSeasonIdGet', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/teams/{id}/players/statistics/seasons/{seasonId}`
      .replace(`{${'seasonId'}}`, encodeURIComponent(`${params['seasonId']}`))
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'group_by': params['groupBy'],
      })
      .withHeader('Accept-Language', params['acceptLanguage'])
      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get the statistics for the latest League the team participates in
   * @param params.id Unique identifier of the resource.
   * @param params.acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
   * @param params.standing Select whether to include a full league standing or just the team&#39;s position
   */
  async teamsIdStatisticsLeagueGet(params: ITeamsIdStatisticsLeagueGetParams): Promise<TeamSeasonStatistics> {
    // Verify required parameters are set
    this.ensureParamIsSet('teamsIdStatisticsLeagueGet', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/teams/{id}/statistics/league`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'standing': params['standing'],
      })
      .withHeader('Accept-Language', params['acceptLanguage'])
      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get a list of Teams, which are participating in a given TournamentSeason
   * @param params.id Unique identifier of the TournamentSeason resource
   * @param params.acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
   */
  async tournamentsSeasonsIdTeamsGet(params: ITournamentsSeasonsIdTeamsGetParams): Promise<Array<PartialTeam>> {
    // Verify required parameters are set
    this.ensureParamIsSet('tournamentsSeasonsIdTeamsGet', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/tournaments/seasons/{id}/teams`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Accept-Language', params['acceptLanguage'])
      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get a list of Teams, which are participating in a given TournamentSeasonStage
   * @param params.id Unique identifier of the TournamentSeasonStage resource
   * @param params.acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
   */
  async tournamentsSeasonsStagesIdTeamsGet(params: ITournamentsSeasonsStagesIdTeamsGetParams): Promise<Array<PartialTeam>> {
    // Verify required parameters are set
    this.ensureParamIsSet('tournamentsSeasonsStagesIdTeamsGet', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/tournaments/seasons/stages/{id}/teams`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Accept-Language', params['acceptLanguage'])
      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Manually insert team colors by team or event.
   * @param params.teamColorsDto Team shirt colors data
   */
  async v2TeamsColorsPost(params: IV2TeamsColorsPostParams): Promise<V2TeamColors> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/v2/teams/colors`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['teamColorsDto'] || {}))

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get teams list
   * @param params.offset The number of items to skip before starting to collect the result set
   * @param params.limit Limit the number of results returned
   * @param params.languageCode Returns translated response based on the language code
   */
  async v2TeamsGet(params: IV2TeamsGetParams): Promise<TeamPageDto> {
    // Verify required parameters are set
    this.ensureParamIsSet('v2TeamsGet', params, 'offset');
    this.ensureParamIsSet('v2TeamsGet', params, 'limit');

    // Create URL to call
    const url = `${this.basePath}/v2/teams`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'language_code': params['languageCode'],
        'offset': params['offset'],
        'limit': params['limit'],
      })

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get team by id
   * @param params.id Unique identifier of the resource.
   * @param params.languageCode Returns translated response based on the language code
   */
  async v2TeamsIdGet(params: IV2TeamsIdGetParams): Promise<V2TeamProfile> {
    // Verify required parameters are set
    this.ensureParamIsSet('v2TeamsIdGet', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/v2/teams/{id}`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'language_code': params['languageCode'],
      })

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update Team information
   * @param params.team Team information to save in persistance
   * @param params.id Unique identifier of the resource.
   */
  async v2TeamsIdPut(params: IV2TeamsIdPutParams): Promise<V2TeamProfile> {
    // Verify required parameters are set
    this.ensureParamIsSet('v2TeamsIdPut', params, 'team');
    this.ensureParamIsSet('v2TeamsIdPut', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/v2/teams/{id}`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['team'] || {}))

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Manually insert team.
   * @param params.teamEditDto TeamEditDto object
   */
  async v2TeamsPost(params: IV2TeamsPostParams): Promise<V2TeamProfile> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/v2/teams`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['teamEditDto'] || {}))

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

