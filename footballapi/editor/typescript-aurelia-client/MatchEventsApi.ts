/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  V2MatchEventProfile,
  V2MatchEventInputWrapper,
} from './models';

/**
 * v2MatchesIdEventsGet - parameters interface
 */
export interface IV2MatchesIdEventsGetParams {
  id: string;
  languageCode?: string;
}

/**
 * v2MatchesIdEventsPut - parameters interface
 */
export interface IV2MatchesIdEventsPutParams {
  id: string;
  matchEvents: V2MatchEventInputWrapper;
}

/**
 * MatchEventsApi - API class
 */
@autoinject()
export class MatchEventsApi extends Api {

  /**
   * Creates a new MatchEventsApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Get match events by match id
   * @param params.id Unique identifier of the resource.
   * @param params.languageCode Returns translated response based on the language code
   */
  async v2MatchesIdEventsGet(params: IV2MatchesIdEventsGetParams): Promise<V2MatchEventProfile> {
    // Verify required parameters are set
    this.ensureParamIsSet('v2MatchesIdEventsGet', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/v2/matches/{id}/events`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'language_code': params['languageCode'],
      })

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Replaces all match events with the given input
   * @param params.id Unique identifier of the resource.
   * @param params.matchEvents Match event information to save
   */
  async v2MatchesIdEventsPut(params: IV2MatchesIdEventsPutParams): Promise<V2MatchEventProfile> {
    // Verify required parameters are set
    this.ensureParamIsSet('v2MatchesIdEventsPut', params, 'id');
    this.ensureParamIsSet('v2MatchesIdEventsPut', params, 'matchEvents');

    // Create URL to call
    const url = `${this.basePath}/v2/matches/{id}/events`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['matchEvents'] || {}))

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

