/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  TranslationEntityDto,
  TranslationDto,
} from './models';

/**
 * v2TranslationsEntitiesGet - parameters interface
 */
export interface IV2TranslationsEntitiesGetParams {
}

/**
 * v2TranslationsPost - parameters interface
 */
export interface IV2TranslationsPostParams {
  translations?: Array<TranslationDto>;
}

/**
 * v2TranslationsSearchPost - parameters interface
 */
export interface IV2TranslationsSearchPostParams {
  translationKeys?: Array<TranslationKeyDto>;
}

/**
 * TranslationsApi - API class
 */
@autoinject()
export class TranslationsApi extends Api {

  /**
   * Creates a new TranslationsApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Get all possible translation entities.
   */
  async v2TranslationsEntitiesGet(): Promise<Array<TranslationEntityDto>> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/v2/translations/entities`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Bulk Upsert translations by primary key
   * @param params.translations Array of translations
   */
  async v2TranslationsPost(params: IV2TranslationsPostParams): Promise<TranslationDto> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/v2/translations`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['translations'] || {}))

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Bulk find in translations table and return matching entries by the unique translation key.
   * @param params.translationKeys Array of translationKeys
   */
  async v2TranslationsSearchPost(params: IV2TranslationsSearchPostParams): Promise<Array<TranslationDto>> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/v2/translations/search`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['translationKeys'] || {}))

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

