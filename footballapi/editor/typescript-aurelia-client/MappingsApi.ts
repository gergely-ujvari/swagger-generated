/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
} from './models';

/**
 * mappingsSportalGet - parameters interface
 */
export interface IMappingsSportalGetParams {
  object?: 'player' | 'team' | 'tournament' | 'tournament_season' | 'tournament_season_stage';
  id?: number;
}

/**
 * mappingsSportalReverseGet - parameters interface
 */
export interface IMappingsSportalReverseGetParams {
  object?: 'player' | 'team' | 'tournament' | 'tournament_season' | 'tournament_season_stage';
  id?: number;
}

/**
 * MappingsApi - API class
 */
@autoinject()
export class MappingsApi extends Api {

  /**
   * Creates a new MappingsApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Get FootballApi ID to Sportal ID maps for various types of objects
   * @param params.object Filter ID maps by a specific object type
   * @param params.id Return single Sportal ID for the specified FootballAPI &#39;id&#39;
   */
  async mappingsSportalGet(params: IMappingsSportalGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/mappings/sportal`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'object': params['object'],
        'id': params['id'],
      })

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get Sportal to Football API ID maps for various types of objects
   * @param params.object Filter ID maps by a specific object type
   * @param params.id Return single FotballApi ID for the specified Sportal &#39;id&#39;
   */
  async mappingsSportalReverseGet(params: IMappingsSportalReverseGetParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/mappings/sportal/reverse`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'object': params['object'],
        'id': params['id'],
      })

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

