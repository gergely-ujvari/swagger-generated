/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  OddProvider,
  Odd,
} from './models';

/**
 * eventsIdLiveoddsGet - parameters interface
 */
export interface IEventsIdLiveoddsGetParams {
  id: string;
  xOddClient: string;
}

/**
 * eventsIdOddsGet - parameters interface
 */
export interface IEventsIdOddsGetParams {
  id: string;
  xOddClient: string;
}

/**
 * eventsIdPregameoddsGet - parameters interface
 */
export interface IEventsIdPregameoddsGetParams {
  id: string;
  xOddClient: string;
}

/**
 * liveoddsGet - parameters interface
 */
export interface ILiveoddsGetParams {
  xOddClient: string;
}

/**
 * oddProvidersGet - parameters interface
 */
export interface IOddProvidersGetParams {
  xOddClient: string;
}

/**
 * oddsGet - parameters interface
 */
export interface IOddsGetParams {
  oddClient: string;
  sportType: 'football';
  eventType: 'match';
  fromEventStartTime?: Date;
  toEventStartTime?: Date;
  teamId?: number;
  teamIds?: string;
  eventOrder?: string;
  matchIds?: string;
  tournamentIds?: string;
  seasonIds?: string;
  oddsType?: 'prematch' | 'live' | 'all';
}

/**
 * pregameoddsGet - parameters interface
 */
export interface IPregameoddsGetParams {
  xOddClient: string;
  fromTime?: Date;
  toTime?: Date;
}

/**
 * OddsApi - API class
 */
@autoinject()
export class OddsApi extends Api {

  /**
   * Creates a new OddsApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Get available liveodds for an event
   * @param params.id Unique identifier of the resource.
   * @param params.xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#39;coupon&#39; key with the odds fo building URLs.
   */
  async eventsIdLiveoddsGet(params: IEventsIdLiveoddsGetParams): Promise<Array<Odd>> {
    // Verify required parameters are set
    this.ensureParamIsSet('eventsIdLiveoddsGet', params, 'id');
    this.ensureParamIsSet('eventsIdLiveoddsGet', params, 'xOddClient');

    // Create URL to call
    const url = `${this.basePath}/events/{id}/liveodds`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('X-Odd-Client', params['xOddClient'])
      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get a list of odds available in the system
   * @param params.id Unique identifier of the resource.
   * @param params.xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#39;coupon&#39; key with the odds fo building URLs.
   */
  async eventsIdOddsGet(params: IEventsIdOddsGetParams): Promise<Array<Odd>> {
    // Verify required parameters are set
    this.ensureParamIsSet('eventsIdOddsGet', params, 'id');
    this.ensureParamIsSet('eventsIdOddsGet', params, 'xOddClient');

    // Create URL to call
    const url = `${this.basePath}/events/{id}/odds`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('X-Odd-Client', params['xOddClient'])
      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get available pre-game odds for an Event
   * @param params.id Unique identifier of the resource.
   * @param params.xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#39;coupon&#39; key with the odds fo building URLs.
   */
  async eventsIdPregameoddsGet(params: IEventsIdPregameoddsGetParams): Promise<Array<Odd>> {
    // Verify required parameters are set
    this.ensureParamIsSet('eventsIdPregameoddsGet', params, 'id');
    this.ensureParamIsSet('eventsIdPregameoddsGet', params, 'xOddClient');

    // Create URL to call
    const url = `${this.basePath}/events/{id}/pregameodds`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('X-Odd-Client', params['xOddClient'])
      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get a list of liveodds available in the system
   * @param params.xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#39;coupon&#39; key with the odds fo building URLs.
   */
  async liveoddsGet(params: ILiveoddsGetParams): Promise<Array<Odd>> {
    // Verify required parameters are set
    this.ensureParamIsSet('liveoddsGet', params, 'xOddClient');

    // Create URL to call
    const url = `${this.basePath}/liveodds`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('X-Odd-Client', params['xOddClient'])
      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Return a list of OddProviders available in the system. If X-Odd-Client is specified they will be filtered and ordered by the client configuration.
   * @param params.xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#39;coupon&#39; key with the odds fo building URLs.
   */
  async oddProvidersGet(params: IOddProvidersGetParams): Promise<Array<OddProvider>> {
    // Verify required parameters are set
    this.ensureParamIsSet('oddProvidersGet', params, 'xOddClient');

    // Create URL to call
    const url = `${this.basePath}/odd_providers`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('X-Odd-Client', params['xOddClient'])
      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns a list of Odds
   * @param params.oddClient Odd client code
   * @param params.sportType Sport type filter
   * @param params.eventType Event type filter
   * @param params.fromEventStartTime Return odds for Events with start_time &gt;&#x3D; from_event_start_time. RFC 3339 format
   * @param params.toEventStartTime Return odds for Events with start_time &lt;&#x3D; to_event_start_time. RFC 3339 format
   * @param params.teamId Team ID
   * @param params.teamIds List for team IDs separated by commas.
   * @param params.eventOrder Order matching events for a specific client
   * @param params.matchIds List for match IDs separated by commas.
   * @param params.tournamentIds List for tournament IDs separated by commas.
   * @param params.seasonIds List for season IDs separated by commas.
   * @param params.oddsType Pregame or live odds selector.
   */
  async oddsGet(params: IOddsGetParams): Promise<Array<Odd>> {
    // Verify required parameters are set
    this.ensureParamIsSet('oddsGet', params, 'oddClient');
    this.ensureParamIsSet('oddsGet', params, 'sportType');
    this.ensureParamIsSet('oddsGet', params, 'eventType');

    // Create URL to call
    const url = `${this.basePath}/odds`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'from_event_start_time': params['fromEventStartTime'],
        'to_event_start_time': params['toEventStartTime'],
        'odd_client': params['oddClient'],
        'team_id': params['teamId'],
        'team_ids': params['teamIds'],
        'event_order': params['eventOrder'],
        'sport_type': params['sportType'],
        'match_ids': params['matchIds'],
        'tournament_ids': params['tournamentIds'],
        'season_ids': params['seasonIds'],
        'event_type': params['eventType'],
        'odds_type': params['oddsType'],
      })

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Returns a list of Odd Providers which have odds available for a given Event
   * @param params.xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#39;coupon&#39; key with the odds fo building URLs.
   * @param params.fromTime Return odds for Events with start_time &gt;&#x3D; from_time. RFC 3339 format
   * @param params.toTime Return odds for Events with start_time &lt;&#x3D; to_time. RFC 3339 format
   */
  async pregameoddsGet(params: IPregameoddsGetParams): Promise<Array<Odd>> {
    // Verify required parameters are set
    this.ensureParamIsSet('pregameoddsGet', params, 'xOddClient');

    // Create URL to call
    const url = `${this.basePath}/pregameodds`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'from_time': params['fromTime'],
        'to_time': params['toTime'],
      })
      .withHeader('X-Odd-Client', params['xOddClient'])
      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

