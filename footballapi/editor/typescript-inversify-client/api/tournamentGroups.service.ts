/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { NotFoundError } from '../model/notFoundError';
import { V2TournamentGroupCollection } from '../model/v2TournamentGroupCollection';
import { V2TournamentGroupGetOutput } from '../model/v2TournamentGroupGetOutput';
import { V2TournamentGroupInsertInput } from '../model/v2TournamentGroupInsertInput';
import { V2TournamentGroupSelection } from '../model/v2TournamentGroupSelection';
import { V2TournamentGroupUpdateInput } from '../model/v2TournamentGroupUpdateInput';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class TournamentGroupsService {
    @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration;
    @inject('IApiHttpClient') private httpClient: IHttpClient;



    /**
     * 
     * List all tournaments for a given group name and their order
     * @param code Tournament group code
     
     */
    public v2TournamentsGroupsCodeGet(code: string, observe?: 'body', headers?: Headers): Observable<V2TournamentGroupGetOutput>;
    public v2TournamentsGroupsCodeGet(code: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<V2TournamentGroupGetOutput>>;
    public v2TournamentsGroupsCodeGet(code: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!code){
            throw new Error('Required parameter code was null or undefined when calling v2TournamentsGroupsCodeGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json; charset=utf-8';

        const response: Observable<HttpResponse<V2TournamentGroupGetOutput>> = this.httpClient.get(`${this.APIConfiguration.basePath}/v2/tournaments/groups/${encodeURIComponent(String(code))}` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * 
     * Update an existing tournament group
     * @param code Tournament group unique code
     * @param group Tournament group information
     
     */
    public v2TournamentsGroupsCodePut(code: string, group: V2TournamentGroupUpdateInput, observe?: 'body', headers?: Headers): Observable<any>;
    public v2TournamentsGroupsCodePut(code: string, group: V2TournamentGroupUpdateInput, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public v2TournamentsGroupsCodePut(code: string, group: V2TournamentGroupUpdateInput, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!code){
            throw new Error('Required parameter code was null or undefined when calling v2TournamentsGroupsCodePut.');
        }

        if (!group){
            throw new Error('Required parameter group was null or undefined when calling v2TournamentsGroupsCodePut.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json; charset=utf-8';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.APIConfiguration.basePath}/v2/tournaments/groups/${encodeURIComponent(String(code))}`, group as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * 
     * 
     * @param code Client code
     * @param date Date in ISO 8601 format (Y-m-d)
     * @param matchIds Array of match ids
     
     */
    public v2TournamentsGroupsCodeSelectionDatePost(code: string, date: string, matchIds?: Array<V2TournamentGroupSelection>, observe?: 'body', headers?: Headers): Observable<any>;
    public v2TournamentsGroupsCodeSelectionDatePost(code: string, date: string, matchIds?: Array<V2TournamentGroupSelection>, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public v2TournamentsGroupsCodeSelectionDatePost(code: string, date: string, matchIds?: Array<V2TournamentGroupSelection>, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!code){
            throw new Error('Required parameter code was null or undefined when calling v2TournamentsGroupsCodeSelectionDatePost.');
        }

        if (!date){
            throw new Error('Required parameter date was null or undefined when calling v2TournamentsGroupsCodeSelectionDatePost.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json; charset=utf-8';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.APIConfiguration.basePath}/v2/tournaments/groups/${encodeURIComponent(String(code))}/selection/${encodeURIComponent(String(date))}`, matchIds as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * 
     * List all tournament groups
     
     */
    public v2TournamentsGroupsGet(observe?: 'body', headers?: Headers): Observable<V2TournamentGroupCollection>;
    public v2TournamentsGroupsGet(observe?: 'response', headers?: Headers): Observable<HttpResponse<V2TournamentGroupCollection>>;
    public v2TournamentsGroupsGet(observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json; charset=utf-8';

        const response: Observable<HttpResponse<V2TournamentGroupCollection>> = this.httpClient.get(`${this.APIConfiguration.basePath}/v2/tournaments/groups` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * 
     * Create a new tournament group
     * @param group Tournament group information
     
     */
    public v2TournamentsGroupsPost(group: V2TournamentGroupInsertInput, observe?: 'body', headers?: Headers): Observable<any>;
    public v2TournamentsGroupsPost(group: V2TournamentGroupInsertInput, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public v2TournamentsGroupsPost(group: V2TournamentGroupInsertInput, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!group){
            throw new Error('Required parameter group was null or undefined when calling v2TournamentsGroupsPost.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json; charset=utf-8';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.APIConfiguration.basePath}/v2/tournaments/groups`, group as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }

}
