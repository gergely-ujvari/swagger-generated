/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { NotFoundError } from '../model/notFoundError';
import { Player } from '../model/player';
import { PlayerDto } from '../model/playerDto';
import { PlayerEditDto } from '../model/playerEditDto';
import { PlayerPageDto } from '../model/playerPageDto';
import { PlayerProfile } from '../model/playerProfile';
import { PlayerStatistics } from '../model/playerStatistics';
import { PlayerTeam } from '../model/playerTeam';
import { V2ActiveClubsInput } from '../model/v2ActiveClubsInput';
import { V2PlayerActiveClub } from '../model/v2PlayerActiveClub';
import { V2PlayerProfile } from '../model/v2PlayerProfile';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class PlayersService {
    @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration;
    @inject('IApiHttpClient') private httpClient: IHttpClient;



    /**
     * 
     * Search player list by parameters
     * @param name Filter players by names. Length must be &gt;&#x3D; 4. The filter matches on a per word basis. If you query for &#39;Ronaldo&#39; it will match both &#39;Cristiono Ronaldo&#39; and &#39;Ronaldo&#39;
     * @param acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param maxResults Limit the number of results returned
     * @param teamId Return only players which are currently in the specified team&#39;s squad
     
     */
    public playersGet(name: string, acceptLanguage?: string, maxResults?: number, teamId?: number, observe?: 'body', headers?: Headers): Observable<Array<Player>>;
    public playersGet(name: string, acceptLanguage?: string, maxResults?: number, teamId?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<Player>>>;
    public playersGet(name: string, acceptLanguage?: string, maxResults?: number, teamId?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!name){
            throw new Error('Required parameter name was null or undefined when calling playersGet.');
        }

        let queryParameters: string[] = [];
        if (name !== undefined) {
            queryParameters.push('name='+encodeURIComponent(String(name)));
        }
        if (maxResults !== undefined) {
            queryParameters.push('maxResults='+encodeURIComponent(String(maxResults)));
        }
        if (teamId !== undefined) {
            queryParameters.push('teamId='+encodeURIComponent(String(teamId)));
        }

        if (acceptLanguage) {
            headers['Accept-Language'] = String(acceptLanguage);
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json; charset=utf-8';

        const response: Observable<HttpResponse<Array<Player>>> = this.httpClient.get(`${this.APIConfiguration.basePath}/players?${queryParameters.join('&')}` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * 
     * Get information about a specific Player
     * @param id Unique identifier of the resource.
     * @param acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param expand Specify additional information to include in the response
     
     */
    public playersIdGet(id: string, acceptLanguage?: string, expand?: 'club' | 'club,current_league', observe?: 'body', headers?: Headers): Observable<PlayerProfile>;
    public playersIdGet(id: string, acceptLanguage?: string, expand?: 'club' | 'club,current_league', observe?: 'response', headers?: Headers): Observable<HttpResponse<PlayerProfile>>;
    public playersIdGet(id: string, acceptLanguage?: string, expand?: 'club' | 'club,current_league', observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!id){
            throw new Error('Required parameter id was null or undefined when calling playersIdGet.');
        }

        let queryParameters: string[] = [];
        if (expand !== undefined) {
            queryParameters.push('expand='+encodeURIComponent(String(expand)));
        }

        if (acceptLanguage) {
            headers['Accept-Language'] = String(acceptLanguage);
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json; charset=utf-8';

        const response: Observable<HttpResponse<PlayerProfile>> = this.httpClient.get(`${this.APIConfiguration.basePath}/players/${encodeURIComponent(String(id))}?${queryParameters.join('&')}` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * 
     * Returns statistics throughout a Player&#39;s career
     * @param id Unique identifier of the resource.
     * @param acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param type Filter statistics for different types of team and competition
     * @param groupBy Group response by a given property
     
     */
    public playersIdStatisticsGet(id: string, acceptLanguage?: string, type?: 'club' | 'national' | 'league', groupBy?: 'tournament' | 'team', observe?: 'body', headers?: Headers): Observable<Array<PlayerStatistics>>;
    public playersIdStatisticsGet(id: string, acceptLanguage?: string, type?: 'club' | 'national' | 'league', groupBy?: 'tournament' | 'team', observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PlayerStatistics>>>;
    public playersIdStatisticsGet(id: string, acceptLanguage?: string, type?: 'club' | 'national' | 'league', groupBy?: 'tournament' | 'team', observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!id){
            throw new Error('Required parameter id was null or undefined when calling playersIdStatisticsGet.');
        }

        let queryParameters: string[] = [];
        if (type !== undefined) {
            queryParameters.push('type='+encodeURIComponent(String(type)));
        }
        if (groupBy !== undefined) {
            queryParameters.push('groupBy='+encodeURIComponent(String(groupBy)));
        }

        if (acceptLanguage) {
            headers['Accept-Language'] = String(acceptLanguage);
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json; charset=utf-8';

        const response: Observable<HttpResponse<Array<PlayerStatistics>>> = this.httpClient.get(`${this.APIConfiguration.basePath}/players/${encodeURIComponent(String(id))}/statistics?${queryParameters.join('&')}` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * 
     * Get the Teams in which a Player has participated during his career
     * @param id Unique identifier of the resource.
     * @param acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     
     */
    public playersIdTeamsGet(id: string, acceptLanguage?: string, observe?: 'body', headers?: Headers): Observable<Array<PlayerTeam>>;
    public playersIdTeamsGet(id: string, acceptLanguage?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PlayerTeam>>>;
    public playersIdTeamsGet(id: string, acceptLanguage?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!id){
            throw new Error('Required parameter id was null or undefined when calling playersIdTeamsGet.');
        }

        if (acceptLanguage) {
            headers['Accept-Language'] = String(acceptLanguage);
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json; charset=utf-8';

        const response: Observable<HttpResponse<Array<PlayerTeam>>> = this.httpClient.get(`${this.APIConfiguration.basePath}/players/${encodeURIComponent(String(id))}/teams` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * 
     * Search player list by parameters
     * @param offset The number of items to skip before starting to collect the result set
     * @param limit Limit the number of results returned
     * @param languageCode Returns translated response based on the language code
     
     */
    public v2PlayersGet(offset: number, limit: number, languageCode?: string, observe?: 'body', headers?: Headers): Observable<PlayerPageDto>;
    public v2PlayersGet(offset: number, limit: number, languageCode?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PlayerPageDto>>;
    public v2PlayersGet(offset: number, limit: number, languageCode?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!offset){
            throw new Error('Required parameter offset was null or undefined when calling v2PlayersGet.');
        }

        if (!limit){
            throw new Error('Required parameter limit was null or undefined when calling v2PlayersGet.');
        }

        let queryParameters: string[] = [];
        if (languageCode !== undefined) {
            queryParameters.push('languageCode='+encodeURIComponent(String(languageCode)));
        }
        if (offset !== undefined) {
            queryParameters.push('offset='+encodeURIComponent(String(offset)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json; charset=utf-8';

        const response: Observable<HttpResponse<PlayerPageDto>> = this.httpClient.get(`${this.APIConfiguration.basePath}/v2/players?${queryParameters.join('&')}` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * 
     * Update the active clubs of a player
     * @param id Unique identifier of the resource.
     * @param clubs Active clubs input
     
     */
    public v2PlayersIdClubsActivePut(id: string, clubs?: V2ActiveClubsInput, observe?: 'body', headers?: Headers): Observable<Array<V2PlayerActiveClub>>;
    public v2PlayersIdClubsActivePut(id: string, clubs?: V2ActiveClubsInput, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<V2PlayerActiveClub>>>;
    public v2PlayersIdClubsActivePut(id: string, clubs?: V2ActiveClubsInput, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!id){
            throw new Error('Required parameter id was null or undefined when calling v2PlayersIdClubsActivePut.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json; charset=utf-8';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<Array<V2PlayerActiveClub>>> = this.httpClient.put(`${this.APIConfiguration.basePath}/v2/players/${encodeURIComponent(String(id))}/clubs/active`, clubs as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * 
     * Get player by id
     * @param id Unique identifier of the resource.
     * @param languageCode Returns translated response based on the language code
     
     */
    public v2PlayersIdGet(id: string, languageCode?: string, observe?: 'body', headers?: Headers): Observable<V2PlayerProfile>;
    public v2PlayersIdGet(id: string, languageCode?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<V2PlayerProfile>>;
    public v2PlayersIdGet(id: string, languageCode?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!id){
            throw new Error('Required parameter id was null or undefined when calling v2PlayersIdGet.');
        }

        let queryParameters: string[] = [];
        if (languageCode !== undefined) {
            queryParameters.push('languageCode='+encodeURIComponent(String(languageCode)));
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json; charset=utf-8';

        const response: Observable<HttpResponse<V2PlayerProfile>> = this.httpClient.get(`${this.APIConfiguration.basePath}/v2/players/${encodeURIComponent(String(id))}?${queryParameters.join('&')}` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * 
     * Update Player information
     * @param player Player information to save in persistance
     * @param id Unique identifier of the resource.
     
     */
    public v2PlayersIdPut(player: PlayerEditDto, id: string, observe?: 'body', headers?: Headers): Observable<any>;
    public v2PlayersIdPut(player: PlayerEditDto, id: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public v2PlayersIdPut(player: PlayerEditDto, id: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!player){
            throw new Error('Required parameter player was null or undefined when calling v2PlayersIdPut.');
        }

        if (!id){
            throw new Error('Required parameter id was null or undefined when calling v2PlayersIdPut.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.APIConfiguration.basePath}/v2/players/${encodeURIComponent(String(id))}`, player as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * 
     * Store a newly created player in storage.
     * @param player PlayerEditDto object
     
     */
    public v2PlayersPost(player?: PlayerEditDto, observe?: 'body', headers?: Headers): Observable<PlayerDto>;
    public v2PlayersPost(player?: PlayerEditDto, observe?: 'response', headers?: Headers): Observable<HttpResponse<PlayerDto>>;
    public v2PlayersPost(player?: PlayerEditDto, observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json; charset=utf-8';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<PlayerDto>> = this.httpClient.post(`${this.APIConfiguration.basePath}/v2/players`, player as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }

}
