/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { NotFoundError } from '../model/notFoundError';
import { V2Season } from '../model/v2Season';
import { V2SeasonDetails } from '../model/v2SeasonDetails';
import { V2SeasonList } from '../model/v2SeasonList';
import { V2SeasonStage } from '../model/v2SeasonStage';
import { V2SeasonStageCollection } from '../model/v2SeasonStageCollection';
import { V2TournamentSeasonInsertInput } from '../model/v2TournamentSeasonInsertInput';
import { V2TournamentSeasonStatusInput } from '../model/v2TournamentSeasonStatusInput';
import { V2TournamentSeasonUpdateInput } from '../model/v2TournamentSeasonUpdateInput';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class SeasonService {
    @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration;
    @inject('IApiHttpClient') private httpClient: IHttpClient;



    /**
     * 
     * Get the details of a season by season_id, or by tournament_id and active status
     * @param seasonId The ID of the season of interest
     * @param tournamentId The ID of the tournament whose active season is of interest
     * @param status Required only when the tournament_id parameter is provided
     * @param languageCode Returns translated response based on the language code
     
     */
    public v2SeasonsDetailsGet(seasonId?: string, tournamentId?: string, status?: 'CURRENT', languageCode?: string, observe?: 'body', headers?: Headers): Observable<V2SeasonDetails>;
    public v2SeasonsDetailsGet(seasonId?: string, tournamentId?: string, status?: 'CURRENT', languageCode?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<V2SeasonDetails>>;
    public v2SeasonsDetailsGet(seasonId?: string, tournamentId?: string, status?: 'CURRENT', languageCode?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (seasonId !== undefined) {
            queryParameters.push('seasonId='+encodeURIComponent(String(seasonId)));
        }
        if (tournamentId !== undefined) {
            queryParameters.push('tournamentId='+encodeURIComponent(String(tournamentId)));
        }
        if (status !== undefined) {
            queryParameters.push('status='+encodeURIComponent(String(status)));
        }
        if (languageCode !== undefined) {
            queryParameters.push('languageCode='+encodeURIComponent(String(languageCode)));
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json; charset=utf-8';

        const response: Observable<HttpResponse<V2SeasonDetails>> = this.httpClient.get(`${this.APIConfiguration.basePath}/v2/seasons/details?${queryParameters.join('&')}` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * 
     * Get seasons by tournament_id, team_id and status
     * @param tournamentId Required only if no other parameters are provided
     * @param teamId Required only if no other paramenters are provided
     * @param status Required only if no other parameters are provided
     * @param languageCode Returns translated response based on the language code
     
     */
    public v2SeasonsGet(tournamentId?: string, teamId?: string, status?: 'ACTIVE', languageCode?: string, observe?: 'body', headers?: Headers): Observable<V2SeasonList>;
    public v2SeasonsGet(tournamentId?: string, teamId?: string, status?: 'ACTIVE', languageCode?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<V2SeasonList>>;
    public v2SeasonsGet(tournamentId?: string, teamId?: string, status?: 'ACTIVE', languageCode?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (tournamentId !== undefined) {
            queryParameters.push('tournamentId='+encodeURIComponent(String(tournamentId)));
        }
        if (teamId !== undefined) {
            queryParameters.push('teamId='+encodeURIComponent(String(teamId)));
        }
        if (status !== undefined) {
            queryParameters.push('status='+encodeURIComponent(String(status)));
        }
        if (languageCode !== undefined) {
            queryParameters.push('languageCode='+encodeURIComponent(String(languageCode)));
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json; charset=utf-8';

        const response: Observable<HttpResponse<V2SeasonList>> = this.httpClient.get(`${this.APIConfiguration.basePath}/v2/seasons?${queryParameters.join('&')}` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * 
     * Update an existing season
     * @param id Unique identifier of the resource.
     * @param name Season name
     
     */
    public v2SeasonsIdPut(id: string, name: V2TournamentSeasonUpdateInput, observe?: 'body', headers?: Headers): Observable<V2Season>;
    public v2SeasonsIdPut(id: string, name: V2TournamentSeasonUpdateInput, observe?: 'response', headers?: Headers): Observable<HttpResponse<V2Season>>;
    public v2SeasonsIdPut(id: string, name: V2TournamentSeasonUpdateInput, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!id){
            throw new Error('Required parameter id was null or undefined when calling v2SeasonsIdPut.');
        }

        if (!name){
            throw new Error('Required parameter name was null or undefined when calling v2SeasonsIdPut.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json; charset=utf-8';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<V2Season>> = this.httpClient.put(`${this.APIConfiguration.basePath}/v2/seasons/${encodeURIComponent(String(id))}`, name as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * 
     * List all stages for specific season
     * @param id Unique identifier of the resource.
     * @param languageCode Returns translated response based on the language code
     
     */
    public v2SeasonsIdStagesGet(id: string, languageCode?: string, observe?: 'body', headers?: Headers): Observable<V2SeasonStageCollection>;
    public v2SeasonsIdStagesGet(id: string, languageCode?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<V2SeasonStageCollection>>;
    public v2SeasonsIdStagesGet(id: string, languageCode?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!id){
            throw new Error('Required parameter id was null or undefined when calling v2SeasonsIdStagesGet.');
        }

        let queryParameters: string[] = [];
        if (languageCode !== undefined) {
            queryParameters.push('languageCode='+encodeURIComponent(String(languageCode)));
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<V2SeasonStageCollection>> = this.httpClient.get(`${this.APIConfiguration.basePath}/v2/seasons/${encodeURIComponent(String(id))}/stages?${queryParameters.join('&')}` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * 
     * Create or update multiple stages
     * @param stages List of stages to be updated or created
     * @param id Unique identifier of the resource.
     
     */
    public v2SeasonsIdStagesPost(stages: Array<V2SeasonStage>, id: string, observe?: 'body', headers?: Headers): Observable<V2SeasonStageCollection>;
    public v2SeasonsIdStagesPost(stages: Array<V2SeasonStage>, id: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<V2SeasonStageCollection>>;
    public v2SeasonsIdStagesPost(stages: Array<V2SeasonStage>, id: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!stages){
            throw new Error('Required parameter stages was null or undefined when calling v2SeasonsIdStagesPost.');
        }

        if (!id){
            throw new Error('Required parameter id was null or undefined when calling v2SeasonsIdStagesPost.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<V2SeasonStageCollection>> = this.httpClient.post(`${this.APIConfiguration.basePath}/v2/seasons/${encodeURIComponent(String(id))}/stages`, stages as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * 
     * Create a new season
     * @param season Season information
     
     */
    public v2SeasonsPost(season: V2TournamentSeasonInsertInput, observe?: 'body', headers?: Headers): Observable<V2Season>;
    public v2SeasonsPost(season: V2TournamentSeasonInsertInput, observe?: 'response', headers?: Headers): Observable<HttpResponse<V2Season>>;
    public v2SeasonsPost(season: V2TournamentSeasonInsertInput, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!season){
            throw new Error('Required parameter season was null or undefined when calling v2SeasonsPost.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json; charset=utf-8';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<V2Season>> = this.httpClient.post(`${this.APIConfiguration.basePath}/v2/seasons`, season as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * 
     * Permanently delete stage
     * @param id Unique identifier of the resource.
     
     */
    public v2StagesIdDelete(id: string, observe?: 'body', headers?: Headers): Observable<any>;
    public v2StagesIdDelete(id: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public v2StagesIdDelete(id: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!id){
            throw new Error('Required parameter id was null or undefined when calling v2StagesIdDelete.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json; charset=utf-8';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.APIConfiguration.basePath}/v2/stages/${encodeURIComponent(String(id))}` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * 
     * Set the current season as active and change all other seasons in the tournament to inactive
     * @param id Unique identifier of the resource.
     * @param seasonId Season unique identifier
     
     */
    public v2TournamentsIdSeasonsCurrentPatch(id: string, seasonId: V2TournamentSeasonStatusInput, observe?: 'body', headers?: Headers): Observable<V2Season>;
    public v2TournamentsIdSeasonsCurrentPatch(id: string, seasonId: V2TournamentSeasonStatusInput, observe?: 'response', headers?: Headers): Observable<HttpResponse<V2Season>>;
    public v2TournamentsIdSeasonsCurrentPatch(id: string, seasonId: V2TournamentSeasonStatusInput, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!id){
            throw new Error('Required parameter id was null or undefined when calling v2TournamentsIdSeasonsCurrentPatch.');
        }

        if (!seasonId){
            throw new Error('Required parameter seasonId was null or undefined when calling v2TournamentsIdSeasonsCurrentPatch.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json; charset=utf-8';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<V2Season>> = this.httpClient.patch(`${this.APIConfiguration.basePath}/v2/tournaments/${encodeURIComponent(String(id))}/seasons/current`, seasonId as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }

}
