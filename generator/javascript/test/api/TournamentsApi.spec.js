/*
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FootballApi);
  }
}(this, function(expect, FootballApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FootballApi.TournamentsApi();
  });

  describe('(package)', function() {
    describe('TournamentsApi', function() {
      describe('tournamentsGet', function() {
        it('should call tournamentsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for tournamentsGet call and complete the assertions
          /*
          var opts = {};

          instance.tournamentsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(FootballApi.Tournament);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tournamentsIdGet', function() {
        it('should call tournamentsIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for tournamentsIdGet call and complete the assertions
          /*
          var opts = {};

          instance.tournamentsIdGet(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FootballApi.TournamentWithSeasons);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tournamentsIdSeasonsGet', function() {
        it('should call tournamentsIdSeasonsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for tournamentsIdSeasonsGet call and complete the assertions
          /*
          var opts = {};

          instance.tournamentsIdSeasonsGet(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(FootballApi.TournamentSeason);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tournamentsIdSeasonsLatestGet', function() {
        it('should call tournamentsIdSeasonsLatestGet successfully', function(done) {
          // TODO: uncomment, update parameter values for tournamentsIdSeasonsLatestGet call and complete the assertions
          /*
          var opts = {};

          instance.tournamentsIdSeasonsLatestGet(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FootballApi.TournamentSeasonWithStages);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tournamentsSeasonsIdCardlistGet', function() {
        it('should call tournamentsSeasonsIdCardlistGet successfully', function(done) {
          // TODO: uncomment, update parameter values for tournamentsSeasonsIdCardlistGet call and complete the assertions
          /*
          var opts = {};

          instance.tournamentsSeasonsIdCardlistGet(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(FootballApi.CardlistStandingData);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tournamentsSeasonsIdEventsGet', function() {
        it('should call tournamentsSeasonsIdEventsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for tournamentsSeasonsIdEventsGet call and complete the assertions
          /*
          var opts = {};

          instance.tournamentsSeasonsIdEventsGet(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(FootballApi.Event);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tournamentsSeasonsIdGet', function() {
        it('should call tournamentsSeasonsIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for tournamentsSeasonsIdGet call and complete the assertions
          /*
          var opts = {};

          instance.tournamentsSeasonsIdGet(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FootballApi.TournamentSeasonWithStages);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tournamentsSeasonsIdTeamsGet', function() {
        it('should call tournamentsSeasonsIdTeamsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for tournamentsSeasonsIdTeamsGet call and complete the assertions
          /*
          var opts = {};

          instance.tournamentsSeasonsIdTeamsGet(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(FootballApi.PartialTeam);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tournamentsSeasonsIdTopscorerGet', function() {
        it('should call tournamentsSeasonsIdTopscorerGet successfully', function(done) {
          // TODO: uncomment, update parameter values for tournamentsSeasonsIdTopscorerGet call and complete the assertions
          /*
          var opts = {};

          instance.tournamentsSeasonsIdTopscorerGet(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(FootballApi.TopscorerStandingData);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tournamentsSeasonsStagesActiveGet', function() {
        it('should call tournamentsSeasonsStagesActiveGet successfully', function(done) {
          // TODO: uncomment tournamentsSeasonsStagesActiveGet call and complete the assertions
          /*

          instance.tournamentsSeasonsStagesActiveGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(FootballApi.TournamentSeasonStage);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tournamentsSeasonsStagesGroupsIdGet', function() {
        it('should call tournamentsSeasonsStagesGroupsIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for tournamentsSeasonsStagesGroupsIdGet call and complete the assertions
          /*
          var opts = {};

          instance.tournamentsSeasonsStagesGroupsIdGet(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FootballApi.StageGroupWithStandingTournamentSeasonStage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tournamentsSeasonsStagesGroupsIdStandingGet', function() {
        it('should call tournamentsSeasonsStagesGroupsIdStandingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for tournamentsSeasonsStagesGroupsIdStandingGet call and complete the assertions
          /*
          var opts = {};

          instance.tournamentsSeasonsStagesGroupsIdStandingGet(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(FootballApi.LeagueStandingData);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tournamentsSeasonsStagesIdEventsGet', function() {
        it('should call tournamentsSeasonsStagesIdEventsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for tournamentsSeasonsStagesIdEventsGet call and complete the assertions
          /*
          var opts = {};

          instance.tournamentsSeasonsStagesIdEventsGet(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(FootballApi.EventsByDate);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tournamentsSeasonsStagesIdGet', function() {
        it('should call tournamentsSeasonsStagesIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for tournamentsSeasonsStagesIdGet call and complete the assertions
          /*
          var opts = {};

          instance.tournamentsSeasonsStagesIdGet(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FootballApi.TournamentSeasonStageWithStandingGroups);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tournamentsSeasonsStagesIdRoundsGet', function() {
        it('should call tournamentsSeasonsStagesIdRoundsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for tournamentsSeasonsStagesIdRoundsGet call and complete the assertions
          /*
          var opts = {};

          instance.tournamentsSeasonsStagesIdRoundsGet(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(FootballApi.Round);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tournamentsSeasonsStagesIdStandingGet', function() {
        it('should call tournamentsSeasonsStagesIdStandingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for tournamentsSeasonsStagesIdStandingGet call and complete the assertions
          /*
          var opts = {};

          instance.tournamentsSeasonsStagesIdStandingGet(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(FootballApi.LeagueStandingData);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tournamentsSeasonsStagesIdTeamsGet', function() {
        it('should call tournamentsSeasonsStagesIdTeamsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for tournamentsSeasonsStagesIdTeamsGet call and complete the assertions
          /*
          var opts = {};

          instance.tournamentsSeasonsStagesIdTeamsGet(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(FootballApi.PartialTeam);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
