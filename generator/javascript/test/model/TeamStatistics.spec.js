/*
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FootballApi);
  }
}(this, function(expect, FootballApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('TeamStatistics', function() {
      beforeEach(function() {
        instance = new FootballApi.TeamStatistics();
      });

      it('should create an instance of TeamStatistics', function() {
        // TODO: update the code to test TeamStatistics
        expect(instance).to.be.a(FootballApi.TeamStatistics);
      });

      it('should have the property pass (base name: "pass")', function() {
        // TODO: update the code to test the property pass
        expect(instance).to.have.property('pass');
        // expect(instance.pass).to.be(expectedValueLiteral);
      });

      it('should have the property possession (base name: "possession")', function() {
        // TODO: update the code to test the property possession
        expect(instance).to.have.property('possession');
        // expect(instance.possession).to.be(expectedValueLiteral);
      });

      it('should have the property goals (base name: "goals")', function() {
        // TODO: update the code to test the property goals
        expect(instance).to.have.property('goals');
        // expect(instance.goals).to.be(expectedValueLiteral);
      });

      it('should have the property corners (base name: "corners")', function() {
        // TODO: update the code to test the property corners
        expect(instance).to.have.property('corners');
        // expect(instance.corners).to.be(expectedValueLiteral);
      });

      it('should have the property crosses (base name: "crosses")', function() {
        // TODO: update the code to test the property crosses
        expect(instance).to.have.property('crosses');
        // expect(instance.crosses).to.be(expectedValueLiteral);
      });

      it('should have the property offside (base name: "offside")', function() {
        // TODO: update the code to test the property offside
        expect(instance).to.have.property('offside');
        // expect(instance.offside).to.be(expectedValueLiteral);
      });

      it('should have the property shotsOn (base name: "shots_on")', function() {
        // TODO: update the code to test the property shotsOn
        expect(instance).to.have.property('shotsOn');
        // expect(instance.shotsOn).to.be(expectedValueLiteral);
      });

      it('should have the property shotsBlocked (base name: "shots_blocked")', function() {
        // TODO: update the code to test the property shotsBlocked
        expect(instance).to.have.property('shotsBlocked');
        // expect(instance.shotsBlocked).to.be(expectedValueLiteral);
      });

      it('should have the property shotsOff (base name: "shots_off")', function() {
        // TODO: update the code to test the property shotsOff
        expect(instance).to.have.property('shotsOff');
        // expect(instance.shotsOff).to.be(expectedValueLiteral);
      });

      it('should have the property throwIn (base name: "throw_in")', function() {
        // TODO: update the code to test the property throwIn
        expect(instance).to.have.property('throwIn');
        // expect(instance.throwIn).to.be(expectedValueLiteral);
      });

      it('should have the property goalKicks (base name: "goal_kicks")', function() {
        // TODO: update the code to test the property goalKicks
        expect(instance).to.have.property('goalKicks');
        // expect(instance.goalKicks).to.be(expectedValueLiteral);
      });

      it('should have the property treatments (base name: "treatments")', function() {
        // TODO: update the code to test the property treatments
        expect(instance).to.have.property('treatments');
        // expect(instance.treatments).to.be(expectedValueLiteral);
      });

      it('should have the property yellowCards (base name: "yellow_cards")', function() {
        // TODO: update the code to test the property yellowCards
        expect(instance).to.have.property('yellowCards');
        // expect(instance.yellowCards).to.be(expectedValueLiteral);
      });

      it('should have the property substitutions (base name: "substitutions")', function() {
        // TODO: update the code to test the property substitutions
        expect(instance).to.have.property('substitutions');
        // expect(instance.substitutions).to.be(expectedValueLiteral);
      });

      it('should have the property counterAttacks (base name: "counter_attacks")', function() {
        // TODO: update the code to test the property counterAttacks
        expect(instance).to.have.property('counterAttacks');
        // expect(instance.counterAttacks).to.be(expectedValueLiteral);
      });

      it('should have the property foulsCommitted (base name: "fouls_committed")', function() {
        // TODO: update the code to test the property foulsCommitted
        expect(instance).to.have.property('foulsCommitted');
        // expect(instance.foulsCommitted).to.be(expectedValueLiteral);
      });

    });
  });

}));
