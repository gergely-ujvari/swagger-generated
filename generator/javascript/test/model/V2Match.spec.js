/*
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FootballApi);
  }
}(this, function(expect, FootballApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('V2Match', function() {
      beforeEach(function() {
        instance = new FootballApi.V2Match();
      });

      it('should create an instance of V2Match', function() {
        // TODO: update the code to test V2Match
        expect(instance).to.be.a(FootballApi.V2Match);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property kickoffTime (base name: "kickoff_time")', function() {
        // TODO: update the code to test the property kickoffTime
        expect(instance).to.have.property('kickoffTime');
        // expect(instance.kickoffTime).to.be(expectedValueLiteral);
      });

      it('should have the property stage (base name: "stage")', function() {
        // TODO: update the code to test the property stage
        expect(instance).to.have.property('stage');
        // expect(instance.stage).to.be(expectedValueLiteral);
      });

      it('should have the property season (base name: "season")', function() {
        // TODO: update the code to test the property season
        expect(instance).to.have.property('season');
        // expect(instance.season).to.be(expectedValueLiteral);
      });

      it('should have the property group (base name: "group")', function() {
        // TODO: update the code to test the property group
        expect(instance).to.have.property('group');
        // expect(instance.group).to.be(expectedValueLiteral);
      });

      it('should have the property round (base name: "round")', function() {
        // TODO: update the code to test the property round
        expect(instance).to.have.property('round');
        // expect(instance.round).to.be(expectedValueLiteral);
      });

      it('should have the property homeTeam (base name: "home_team")', function() {
        // TODO: update the code to test the property homeTeam
        expect(instance).to.have.property('homeTeam');
        // expect(instance.homeTeam).to.be(expectedValueLiteral);
      });

      it('should have the property awayTeam (base name: "away_team")', function() {
        // TODO: update the code to test the property awayTeam
        expect(instance).to.have.property('awayTeam');
        // expect(instance.awayTeam).to.be(expectedValueLiteral);
      });

      it('should have the property referees (base name: "referees")', function() {
        // TODO: update the code to test the property referees
        expect(instance).to.have.property('referees');
        // expect(instance.referees).to.be(expectedValueLiteral);
      });

      it('should have the property venue (base name: "venue")', function() {
        // TODO: update the code to test the property venue
        expect(instance).to.have.property('venue');
        // expect(instance.venue).to.be(expectedValueLiteral);
      });

      it('should have the property spectators (base name: "spectators")', function() {
        // TODO: update the code to test the property spectators
        expect(instance).to.have.property('spectators');
        // expect(instance.spectators).to.be(expectedValueLiteral);
      });

      it('should have the property coverage (base name: "coverage")', function() {
        // TODO: update the code to test the property coverage
        expect(instance).to.have.property('coverage');
        // expect(instance.coverage).to.be(expectedValueLiteral);
      });

      it('should have the property minute (base name: "minute")', function() {
        // TODO: update the code to test the property minute
        expect(instance).to.have.property('minute');
        // expect(instance.minute).to.be(expectedValueLiteral);
      });

      it('should have the property phaseStartedAt (base name: "phase_started_at")', function() {
        // TODO: update the code to test the property phaseStartedAt
        expect(instance).to.have.property('phaseStartedAt');
        // expect(instance.phaseStartedAt).to.be(expectedValueLiteral);
      });

      it('should have the property finishedAt (base name: "finished_at")', function() {
        // TODO: update the code to test the property finishedAt
        expect(instance).to.have.property('finishedAt');
        // expect(instance.finishedAt).to.be(expectedValueLiteral);
      });

      it('should have the property score (base name: "score")', function() {
        // TODO: update the code to test the property score
        expect(instance).to.have.property('score');
        // expect(instance.score).to.be(expectedValueLiteral);
      });

    });
  });

}));
