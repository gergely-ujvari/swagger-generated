/*
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FootballApi);
  }
}(this, function(expect, FootballApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('V2MatchEvent', function() {
      beforeEach(function() {
        instance = new FootballApi.V2MatchEvent();
      });

      it('should create an instance of V2MatchEvent', function() {
        // TODO: update the code to test V2MatchEvent
        expect(instance).to.be.a(FootballApi.V2MatchEvent);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property matchId (base name: "match_id")', function() {
        // TODO: update the code to test the property matchId
        expect(instance).to.have.property('matchId');
        // expect(instance.matchId).to.be(expectedValueLiteral);
      });

      it('should have the property typeCode (base name: "type_code")', function() {
        // TODO: update the code to test the property typeCode
        expect(instance).to.have.property('typeCode');
        // expect(instance.typeCode).to.be(expectedValueLiteral);
      });

      it('should have the property teamPosition (base name: "team_position")', function() {
        // TODO: update the code to test the property teamPosition
        expect(instance).to.have.property('teamPosition');
        // expect(instance.teamPosition).to.be(expectedValueLiteral);
      });

      it('should have the property minute (base name: "minute")', function() {
        // TODO: update the code to test the property minute
        expect(instance).to.have.property('minute');
        // expect(instance.minute).to.be(expectedValueLiteral);
      });

      it('should have the property teamId (base name: "team_id")', function() {
        // TODO: update the code to test the property teamId
        expect(instance).to.have.property('teamId');
        // expect(instance.teamId).to.be(expectedValueLiteral);
      });

      it('should have the property primaryPlayer (base name: "primary_player")', function() {
        // TODO: update the code to test the property primaryPlayer
        expect(instance).to.have.property('primaryPlayer');
        // expect(instance.primaryPlayer).to.be(expectedValueLiteral);
      });

      it('should have the property secondaryPlayer (base name: "secondary_player")', function() {
        // TODO: update the code to test the property secondaryPlayer
        expect(instance).to.have.property('secondaryPlayer');
        // expect(instance.secondaryPlayer).to.be(expectedValueLiteral);
      });

      it('should have the property score (base name: "score")', function() {
        // TODO: update the code to test the property score
        expect(instance).to.have.property('score');
        // expect(instance.score).to.be(expectedValueLiteral);
      });

    });
  });

}));
