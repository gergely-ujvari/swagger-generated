/*
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FootballApi);
  }
}(this, function(expect, FootballApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('TeamEditDto', function() {
      beforeEach(function() {
        instance = new FootballApi.TeamEditDto();
      });

      it('should create an instance of TeamEditDto', function() {
        // TODO: update the code to test TeamEditDto
        expect(instance).to.be.a(FootballApi.TeamEditDto);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property threeLetterCode (base name: "three_letter_code")', function() {
        // TODO: update the code to test the property threeLetterCode
        expect(instance).to.have.property('threeLetterCode');
        // expect(instance.threeLetterCode).to.be(expectedValueLiteral);
      });

      it('should have the property shortName (base name: "short_name")', function() {
        // TODO: update the code to test the property shortName
        expect(instance).to.have.property('shortName');
        // expect(instance.shortName).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property countryId (base name: "country_id")', function() {
        // TODO: update the code to test the property countryId
        expect(instance).to.have.property('countryId');
        // expect(instance.countryId).to.be(expectedValueLiteral);
      });

      it('should have the property venueId (base name: "venue_id")', function() {
        // TODO: update the code to test the property venueId
        expect(instance).to.have.property('venueId');
        // expect(instance.venueId).to.be(expectedValueLiteral);
      });

      it('should have the property presidentId (base name: "president_id")', function() {
        // TODO: update the code to test the property presidentId
        expect(instance).to.have.property('presidentId');
        // expect(instance.presidentId).to.be(expectedValueLiteral);
      });

      it('should have the property coachId (base name: "coach_id")', function() {
        // TODO: update the code to test the property coachId
        expect(instance).to.have.property('coachId');
        // expect(instance.coachId).to.be(expectedValueLiteral);
      });

      it('should have the property social (base name: "social")', function() {
        // TODO: update the code to test the property social
        expect(instance).to.have.property('social');
        // expect(instance.social).to.be(expectedValueLiteral);
      });

      it('should have the property founded (base name: "founded")', function() {
        // TODO: update the code to test the property founded
        expect(instance).to.have.property('founded');
        // expect(instance.founded).to.be(expectedValueLiteral);
      });

      it('should have the property gender (base name: "gender")', function() {
        // TODO: update the code to test the property gender
        expect(instance).to.have.property('gender');
        // expect(instance.gender).to.be(expectedValueLiteral);
      });

    });
  });

}));
