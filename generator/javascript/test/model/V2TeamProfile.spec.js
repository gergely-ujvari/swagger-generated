/*
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FootballApi);
  }
}(this, function(expect, FootballApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('V2TeamProfile', function() {
      beforeEach(function() {
        instance = new FootballApi.V2TeamProfile();
      });

      it('should create an instance of V2TeamProfile', function() {
        // TODO: update the code to test V2TeamProfile
        expect(instance).to.be.a(FootballApi.V2TeamProfile);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property threeLetterCode (base name: "three_letter_code")', function() {
        // TODO: update the code to test the property threeLetterCode
        expect(instance).to.have.property('threeLetterCode');
        // expect(instance.threeLetterCode).to.be(expectedValueLiteral);
      });

      it('should have the property shortName (base name: "short_name")', function() {
        // TODO: update the code to test the property shortName
        expect(instance).to.have.property('shortName');
        // expect(instance.shortName).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property founded (base name: "founded")', function() {
        // TODO: update the code to test the property founded
        expect(instance).to.have.property('founded');
        // expect(instance.founded).to.be(expectedValueLiteral);
      });

      it('should have the property country (base name: "country")', function() {
        // TODO: update the code to test the property country
        expect(instance).to.have.property('country');
        // expect(instance.country).to.be(expectedValueLiteral);
      });

      it('should have the property venue (base name: "venue")', function() {
        // TODO: update the code to test the property venue
        expect(instance).to.have.property('venue');
        // expect(instance.venue).to.be(expectedValueLiteral);
      });

      it('should have the property social (base name: "social")', function() {
        // TODO: update the code to test the property social
        expect(instance).to.have.property('social');
        // expect(instance.social).to.be(expectedValueLiteral);
      });

      it('should have the property coach (base name: "coach")', function() {
        // TODO: update the code to test the property coach
        expect(instance).to.have.property('coach');
        // expect(instance.coach).to.be(expectedValueLiteral);
      });

      it('should have the property president (base name: "president")', function() {
        // TODO: update the code to test the property president
        expect(instance).to.have.property('president');
        // expect(instance.president).to.be(expectedValueLiteral);
      });

      it('should have the property gender (base name: "gender")', function() {
        // TODO: update the code to test the property gender
        expect(instance).to.have.property('gender');
        // expect(instance.gender).to.be(expectedValueLiteral);
      });

      it('should have the property activeSeasons (base name: "active_seasons")', function() {
        // TODO: update the code to test the property activeSeasons
        expect(instance).to.have.property('activeSeasons');
        // expect(instance.activeSeasons).to.be(expectedValueLiteral);
      });

      it('should have the property shirtColors (base name: "shirt_colors")', function() {
        // TODO: update the code to test the property shirtColors
        expect(instance).to.have.property('shirtColors');
        // expect(instance.shirtColors).to.be(expectedValueLiteral);
      });

    });
  });

}));
