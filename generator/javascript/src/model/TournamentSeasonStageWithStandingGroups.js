/*
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {Country} from './Country';
import {LeagueStandingData} from './LeagueStandingData';
import {Round} from './Round';
import {StageGroupWithStanding} from './StageGroupWithStanding';
import {TournamentSeasonStage} from './TournamentSeasonStage';

/**
 * The TournamentSeasonStageWithStandingGroups model module.
 * @module model/TournamentSeasonStageWithStandingGroups
 * @version 0.0.1
 */
export class TournamentSeasonStageWithStandingGroups extends TournamentSeasonStage {
  /**
   * Constructs a new <code>TournamentSeasonStageWithStandingGroups</code>.
   * @alias module:model/TournamentSeasonStageWithStandingGroups
   * @class
   * @extends module:model/TournamentSeasonStage
   * @param id {} Unique identifier
   * @param name {} Human readable name of the TournamentSeasonStage
   * @param cup {} Whether the stage is a cup such as Champions League Knockout stage, World Cup Final stages, etc
   * @param tournamentSeasonId {} Id of the TournamentSeason in which the stage is part of
   * @param tournamentId {} Id of the Tournament in whicth the stage is part of
   * @param country {} 
   */
  constructor(id, name, cup, tournamentSeasonId, tournamentId, country) {
    super(id, name, cup, tournamentSeasonId, tournamentId, country);
  }

  /**
   * Constructs a <code>TournamentSeasonStageWithStandingGroups</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TournamentSeasonStageWithStandingGroups} obj Optional instance to populate.
   * @return {module:model/TournamentSeasonStageWithStandingGroups} The populated <code>TournamentSeasonStageWithStandingGroups</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new TournamentSeasonStageWithStandingGroups();
      TournamentSeasonStage.constructFromObject(data, obj);
      if (data.hasOwnProperty('groups'))
        obj.groups = ApiClient.convertToType(data['groups'], [StageGroupWithStanding]);
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('cup'))
        obj.cup = ApiClient.convertToType(data['cup'], 'Boolean');
      if (data.hasOwnProperty('tournament_season_id'))
        obj.tournamentSeasonId = ApiClient.convertToType(data['tournament_season_id'], 'Number');
      if (data.hasOwnProperty('tournament_id'))
        obj.tournamentId = ApiClient.convertToType(data['tournament_id'], 'Number');
      if (data.hasOwnProperty('country'))
        obj.country = Country.constructFromObject(data['country']);
      if (data.hasOwnProperty('confederation'))
        obj.confederation = ApiClient.convertToType(data['confederation'], 'String');
    }
    return obj;
  }
}

/**
 * List of StageGroup objects in the TournamentSeasonStage. Available if the property stage_groups exists
 * @member {Array.<module:model/StageGroupWithStanding>} groups
 */
TournamentSeasonStageWithStandingGroups.prototype.groups = undefined;

/**
 * Unique identifier
 * @member {Number} id
 */
TournamentSeasonStageWithStandingGroups.prototype.id = undefined;

/**
 * Human readable name of the TournamentSeasonStage
 * @member {String} name
 */
TournamentSeasonStageWithStandingGroups.prototype.name = undefined;

/**
 * Whether the stage is a cup such as Champions League Knockout stage, World Cup Final stages, etc
 * @member {Boolean} cup
 */
TournamentSeasonStageWithStandingGroups.prototype.cup = undefined;

/**
 * Id of the TournamentSeason in which the stage is part of
 * @member {Number} tournamentSeasonId
 */
TournamentSeasonStageWithStandingGroups.prototype.tournamentSeasonId = undefined;

/**
 * Id of the Tournament in whicth the stage is part of
 * @member {Number} tournamentId
 */
TournamentSeasonStageWithStandingGroups.prototype.tournamentId = undefined;

/**
 * @member {module:model/Country} country
 */
TournamentSeasonStageWithStandingGroups.prototype.country = undefined;

/**
 * Indicates which confederation the stage is part of (for World Cup qualif.)
 * @member {String} confederation
 */
TournamentSeasonStageWithStandingGroups.prototype.confederation = undefined;

