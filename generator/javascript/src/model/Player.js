/*
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {Country} from './Country';

/**
 * The Player model module.
 * @module model/Player
 * @version 0.0.1
 */
export class Player {
  /**
   * Constructs a new <code>Player</code>.
   * @alias module:model/Player
   * @class
   * @param country {module:model/Country} 
   * @param id {Number} Unique identifier within the system
   * @param name {String} Human readable name of the Person
   */
  constructor(country, id, name) {
    this.country = country;
    this.id = id;
    this.name = name;
  }

  /**
   * Constructs a <code>Player</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Player} obj Optional instance to populate.
   * @return {module:model/Player} The populated <code>Player</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Player();
      if (data.hasOwnProperty('position'))
        obj.position = ApiClient.convertToType(data['position'], 'String');
      if (data.hasOwnProperty('country'))
        obj.country = Country.constructFromObject(data['country']);
      if (data.hasOwnProperty('birthdate'))
        obj.birthdate = ApiClient.convertToType(data['birthdate'], 'Date');
      if (data.hasOwnProperty('first_name'))
        obj.firstName = ApiClient.convertToType(data['first_name'], 'String');
      if (data.hasOwnProperty('last_name'))
        obj.lastName = ApiClient.convertToType(data['last_name'], 'String');
      if (data.hasOwnProperty('active'))
        obj.active = ApiClient.convertToType(data['active'], 'Boolean');
      if (data.hasOwnProperty('gender'))
        obj.gender = ApiClient.convertToType(data['gender'], 'String');
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('url_thumb'))
        obj.urlThumb = ApiClient.convertToType(data['url_thumb'], 'String');
      if (data.hasOwnProperty('url_image'))
        obj.urlImage = ApiClient.convertToType(data['url_image'], 'String');
    }
    return obj;
  }
}

/**
 * Allowed values for the <code>position</code> property.
 * @enum {String}
 * @readonly
 */
Player.PositionEnum = {
  /**
   * value: "keeper"
   * @const
   */
  keeper: "keeper",

  /**
   * value: "defender"
   * @const
   */
  defender: "defender",

  /**
   * value: "midfielder"
   * @const
   */
  midfielder: "midfielder",

  /**
   * value: "forward"
   * @const
   */
  forward: "forward"
};
/**
 * Playing position of the player
 * @member {module:model/Player.PositionEnum} position
 */
Player.prototype.position = undefined;

/**
 * @member {module:model/Country} country
 */
Player.prototype.country = undefined;

/**
 * Date when the person was born
 * @member {Date} birthdate
 */
Player.prototype.birthdate = undefined;

/**
 * Human readable first(given) name
 * @member {String} firstName
 */
Player.prototype.firstName = undefined;

/**
 * Human readable last(family) name
 * @member {String} lastName
 */
Player.prototype.lastName = undefined;

/**
 * True if currently active, false if retired
 * @member {Boolean} active
 */
Player.prototype.active = undefined;

/**
 * Allowed values for the <code>gender</code> property.
 * @enum {String}
 * @readonly
 */
Player.GenderEnum = {
  /**
   * value: "MALE"
   * @const
   */
  MALE: "MALE",

  /**
   * value: "FEMALE"
   * @const
   */
  FEMALE: "FEMALE"
};
/**
 * Person's gender
 * @member {module:model/Player.GenderEnum} gender
 */
Player.prototype.gender = undefined;

/**
 * Unique identifier within the system
 * @member {Number} id
 */
Player.prototype.id = undefined;

/**
 * Human readable name of the Person
 * @member {String} name
 */
Player.prototype.name = undefined;

/**
 * 150x150 face image of Person
 * @member {String} urlThumb
 */
Player.prototype.urlThumb = undefined;

/**
 * 277x338 full body image of Person
 * @member {String} urlImage
 */
Player.prototype.urlImage = undefined;

