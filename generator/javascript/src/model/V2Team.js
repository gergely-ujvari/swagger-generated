/*
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {TeamSocialDto} from './TeamSocialDto';
import {V2Country} from './V2Country';
import {V2VenuesGetId} from './V2VenuesGetId';

/**
 * The V2Team model module.
 * @module model/V2Team
 * @version 0.0.1
 */
export class V2Team {
  /**
   * Constructs a new <code>V2Team</code>.
   * @alias module:model/V2Team
   * @class
   * @param id {String} 
   * @param name {String} 
   * @param type {module:model/V2Team.TypeEnum} 
   * @param country {module:model/V2Country} 
   */
  constructor(id, name, type, country) {
    this.id = id;
    this.name = name;
    this.type = type;
    this.country = country;
  }

  /**
   * Constructs a <code>V2Team</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/V2Team} obj Optional instance to populate.
   * @return {module:model/V2Team} The populated <code>V2Team</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new V2Team();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('three_letter_code'))
        obj.threeLetterCode = ApiClient.convertToType(data['three_letter_code'], 'String');
      if (data.hasOwnProperty('short_name'))
        obj.shortName = ApiClient.convertToType(data['short_name'], 'String');
      if (data.hasOwnProperty('type'))
        obj.type = ApiClient.convertToType(data['type'], 'String');
      if (data.hasOwnProperty('country'))
        obj.country = V2Country.constructFromObject(data['country']);
      if (data.hasOwnProperty('venue'))
        obj.venue = V2VenuesGetId.constructFromObject(data['venue']);
      if (data.hasOwnProperty('social'))
        obj.social = TeamSocialDto.constructFromObject(data['social']);
      if (data.hasOwnProperty('founded'))
        obj.founded = ApiClient.convertToType(data['founded'], 'Number');
      if (data.hasOwnProperty('gender'))
        obj.gender = ApiClient.convertToType(data['gender'], 'String');
    }
    return obj;
  }
}

/**
 * @member {String} id
 */
V2Team.prototype.id = undefined;

/**
 * @member {String} name
 */
V2Team.prototype.name = undefined;

/**
 * @member {String} threeLetterCode
 */
V2Team.prototype.threeLetterCode = undefined;

/**
 * @member {String} shortName
 */
V2Team.prototype.shortName = undefined;

/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
V2Team.TypeEnum = {
  /**
   * value: "PLACEHOLDER"
   * @const
   */
  PLACEHOLDER: "PLACEHOLDER",

  /**
   * value: "NATIONAL"
   * @const
   */
  NATIONAL: "NATIONAL",

  /**
   * value: "CLUB"
   * @const
   */
  CLUB: "CLUB"
};
/**
 * @member {module:model/V2Team.TypeEnum} type
 */
V2Team.prototype.type = undefined;

/**
 * @member {module:model/V2Country} country
 */
V2Team.prototype.country = undefined;

/**
 * @member {module:model/V2VenuesGetId} venue
 */
V2Team.prototype.venue = undefined;

/**
 * @member {module:model/TeamSocialDto} social
 */
V2Team.prototype.social = undefined;

/**
 * @member {Number} founded
 */
V2Team.prototype.founded = undefined;

/**
 * Allowed values for the <code>gender</code> property.
 * @enum {String}
 * @readonly
 */
V2Team.GenderEnum = {
  /**
   * value: "MALE"
   * @const
   */
  MALE: "MALE",

  /**
   * value: "FEMALE"
   * @const
   */
  FEMALE: "FEMALE"
};
/**
 * @member {module:model/V2Team.GenderEnum} gender
 */
V2Team.prototype.gender = undefined;

