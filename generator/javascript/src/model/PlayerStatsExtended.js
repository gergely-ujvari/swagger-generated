/*
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {PlayerStatsBasic} from './PlayerStatsBasic';

/**
 * The PlayerStatsExtended model module.
 * @module model/PlayerStatsExtended
 * @version 0.0.1
 */
export class PlayerStatsExtended extends PlayerStatsBasic {
  /**
   * Constructs a new <code>PlayerStatsExtended</code>.
   * @alias module:model/PlayerStatsExtended
   * @class
   * @extends module:model/PlayerStatsBasic
   * @param goals {} Total goals scored
   * @param played {} Total games played
   * @param minutes {} Total minutes played
   * @param redCards {} Number of red cards
   * @param yellowCards {} Number of yellow cards
   */
  constructor(goals, played, minutes, redCards, yellowCards) {
    super(goals, played, minutes, redCards, yellowCards);
  }

  /**
   * Constructs a <code>PlayerStatsExtended</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PlayerStatsExtended} obj Optional instance to populate.
   * @return {module:model/PlayerStatsExtended} The populated <code>PlayerStatsExtended</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new PlayerStatsExtended();
      PlayerStatsBasic.constructFromObject(data, obj);
      if (data.hasOwnProperty('conceded'))
        obj.conceded = ApiClient.convertToType(data['conceded'], 'Number');
      if (data.hasOwnProperty('substitute'))
        obj.substitute = ApiClient.convertToType(data['substitute'], 'Number');
      if (data.hasOwnProperty('cleansheets'))
        obj.cleansheets = ApiClient.convertToType(data['cleansheets'], 'Number');
      if (data.hasOwnProperty('substitute_in'))
        obj.substituteIn = ApiClient.convertToType(data['substitute_in'], 'Number');
      if (data.hasOwnProperty('substitute_out'))
        obj.substituteOut = ApiClient.convertToType(data['substitute_out'], 'Number');
      if (data.hasOwnProperty('minutes_substitute'))
        obj.minutesSubstitute = ApiClient.convertToType(data['minutes_substitute'], 'Number');
    }
    return obj;
  }
}

/**
 * Goals conceded (Goalkeeper)
 * @member {Number} conceded
 */
PlayerStatsExtended.prototype.conceded = undefined;

/**
 * Games started as a substitute
 * @member {Number} substitute
 */
PlayerStatsExtended.prototype.substitute = undefined;

/**
 * Games without allowing a goal (Goalkeeper)
 * @member {Number} cleansheets
 */
PlayerStatsExtended.prototype.cleansheets = undefined;

/**
 * Games where the player has come on
 * @member {Number} substituteIn
 */
PlayerStatsExtended.prototype.substituteIn = undefined;

/**
 * Games where the player has come off
 * @member {Number} substituteOut
 */
PlayerStatsExtended.prototype.substituteOut = undefined;

/**
 * Minutes played after coming on as a substitute
 * @member {Number} minutesSubstitute
 */
PlayerStatsExtended.prototype.minutesSubstitute = undefined;

