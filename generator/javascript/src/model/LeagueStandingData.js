/*
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {PartialTeamWithForm} from './PartialTeamWithForm';
import {StandingData} from './StandingData';
import {StandingRule} from './StandingRule';

/**
 * The LeagueStandingData model module.
 * @module model/LeagueStandingData
 * @version 0.0.1
 */
export class LeagueStandingData extends StandingData {
  /**
   * Constructs a new <code>LeagueStandingData</code>.
   * @alias module:model/LeagueStandingData
   * @class
   * @extends module:model/StandingData
   * @param rank {} Position of the team/player in the standing
   * @param team {} 
   * @param wins {} Games won
   * @param draws {} Games drawn
   * @param played {} Total games played
   * @param points {} Number of points
   * @param defeits {} Games lost
   * @param goalsFor {} Total number of goals scored
   * @param goalsAgainst {} Total number of goals conceded
   */
  constructor(rank, team, wins, draws, played, points, defeits, goalsFor, goalsAgainst) {
    super(rank, team);
    this.wins = wins;
    this.draws = draws;
    this.played = played;
    this.points = points;
    this.defeits = defeits;
    this.goalsFor = goalsFor;
    this.goalsAgainst = goalsAgainst;
  }

  /**
   * Constructs a <code>LeagueStandingData</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/LeagueStandingData} obj Optional instance to populate.
   * @return {module:model/LeagueStandingData} The populated <code>LeagueStandingData</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new LeagueStandingData();
      StandingData.constructFromObject(data, obj);
      if (data.hasOwnProperty('team'))
        obj.team = PartialTeamWithForm.constructFromObject(data['team']);
      if (data.hasOwnProperty('wins'))
        obj.wins = ApiClient.convertToType(data['wins'], 'Number');
      if (data.hasOwnProperty('draws'))
        obj.draws = ApiClient.convertToType(data['draws'], 'Number');
      if (data.hasOwnProperty('played'))
        obj.played = ApiClient.convertToType(data['played'], 'Number');
      if (data.hasOwnProperty('points'))
        obj.points = ApiClient.convertToType(data['points'], 'Number');
      if (data.hasOwnProperty('defeits'))
        obj.defeits = ApiClient.convertToType(data['defeits'], 'Number');
      if (data.hasOwnProperty('goals_for'))
        obj.goalsFor = ApiClient.convertToType(data['goals_for'], 'Number');
      if (data.hasOwnProperty('goals_against'))
        obj.goalsAgainst = ApiClient.convertToType(data['goals_against'], 'Number');
    }
    return obj;
  }
}

/**
 * @member {module:model/PartialTeamWithForm} team
 */
LeagueStandingData.prototype.team = undefined;

/**
 * Games won
 * @member {Number} wins
 */
LeagueStandingData.prototype.wins = undefined;

/**
 * Games drawn
 * @member {Number} draws
 */
LeagueStandingData.prototype.draws = undefined;

/**
 * Total games played
 * @member {Number} played
 */
LeagueStandingData.prototype.played = undefined;

/**
 * Number of points
 * @member {Number} points
 */
LeagueStandingData.prototype.points = undefined;

/**
 * Games lost
 * @member {Number} defeits
 */
LeagueStandingData.prototype.defeits = undefined;

/**
 * Total number of goals scored
 * @member {Number} goalsFor
 */
LeagueStandingData.prototype.goalsFor = undefined;

/**
 * Total number of goals conceded
 * @member {Number} goalsAgainst
 */
LeagueStandingData.prototype.goalsAgainst = undefined;

