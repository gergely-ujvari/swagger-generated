/*
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {PartialPerson} from './PartialPerson';

/**
 * The EventIncident model module.
 * @module model/EventIncident
 * @version 0.0.1
 */
export class EventIncident {
  /**
   * Constructs a new <code>EventIncident</code>.
   * @alias module:model/EventIncident
   * @class
   * @param id {Number} Unique identifier
   * @param eventId {Number} Identifier of the event during which the incident occurred
   * @param type {module:model/EventIncident.TypeEnum} The type of incident
   * @param homeTeam {Boolean} Whether the incident is related to the home or away team. true if home team
   * @param minute {Number} The minute when the incident occured
   */
  constructor(id, eventId, type, homeTeam, minute) {
    this.id = id;
    this.eventId = eventId;
    this.type = type;
    this.homeTeam = homeTeam;
    this.minute = minute;
  }

  /**
   * Constructs a <code>EventIncident</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/EventIncident} obj Optional instance to populate.
   * @return {module:model/EventIncident} The populated <code>EventIncident</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new EventIncident();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('event_id'))
        obj.eventId = ApiClient.convertToType(data['event_id'], 'Number');
      if (data.hasOwnProperty('type'))
        obj.type = ApiClient.convertToType(data['type'], 'String');
      if (data.hasOwnProperty('home_team'))
        obj.homeTeam = ApiClient.convertToType(data['home_team'], 'Boolean');
      if (data.hasOwnProperty('minute'))
        obj.minute = ApiClient.convertToType(data['minute'], 'Number');
      if (data.hasOwnProperty('team_id'))
        obj.teamId = ApiClient.convertToType(data['team_id'], 'Number');
      if (data.hasOwnProperty('goal_home'))
        obj.goalHome = ApiClient.convertToType(data['goal_home'], 'Number');
      if (data.hasOwnProperty('goal_away'))
        obj.goalAway = ApiClient.convertToType(data['goal_away'], 'Number');
      if (data.hasOwnProperty('player'))
        obj.player = PartialPerson.constructFromObject(data['player']);
      if (data.hasOwnProperty('rel_player'))
        obj.relPlayer = PartialPerson.constructFromObject(data['rel_player']);
      if (data.hasOwnProperty('deleted'))
        obj.deleted = ApiClient.convertToType(data['deleted'], 'Boolean');
      if (data.hasOwnProperty('sortorder'))
        obj.sortorder = ApiClient.convertToType(data['sortorder'], 'Number');
    }
    return obj;
  }
}

/**
 * Unique identifier
 * @member {Number} id
 */
EventIncident.prototype.id = undefined;

/**
 * Identifier of the event during which the incident occurred
 * @member {Number} eventId
 */
EventIncident.prototype.eventId = undefined;

/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
EventIncident.TypeEnum = {
  /**
   * value: "penalty_shootout_scored"
   * @const
   */
  penaltyShootoutScored: "penalty_shootout_scored",

  /**
   * value: "yellow_card_red"
   * @const
   */
  yellowCardRed: "yellow_card_red",

  /**
   * value: "penalty_shootout_missed"
   * @const
   */
  penaltyShootoutMissed: "penalty_shootout_missed",

  /**
   * value: "substitution"
   * @const
   */
  substitution: "substitution",

  /**
   * value: "goal"
   * @const
   */
  goal: "goal",

  /**
   * value: "red_card"
   * @const
   */
  redCard: "red_card",

  /**
   * value: "penalty_miss"
   * @const
   */
  penaltyMiss: "penalty_miss",

  /**
   * value: "yellow_card"
   * @const
   */
  yellowCard: "yellow_card",

  /**
   * value: "penalty_goal"
   * @const
   */
  penaltyGoal: "penalty_goal",

  /**
   * value: "own_goal"
   * @const
   */
  ownGoal: "own_goal"
};
/**
 * The type of incident
 * @member {module:model/EventIncident.TypeEnum} type
 */
EventIncident.prototype.type = undefined;

/**
 * Whether the incident is related to the home or away team. true if home team
 * @member {Boolean} homeTeam
 */
EventIncident.prototype.homeTeam = undefined;

/**
 * The minute when the incident occured
 * @member {Number} minute
 */
EventIncident.prototype.minute = undefined;

/**
 * Id of the team for which the incident is related
 * @member {Number} teamId
 */
EventIncident.prototype.teamId = undefined;

/**
 * Updated home team score if the incident changes the scoreline (penalty, goal, own_goal, etc)
 * @member {Number} goalHome
 */
EventIncident.prototype.goalHome = undefined;

/**
 * Updated away team score  if the incident changes the scoreline (penalty, goal, own_goal, etc)
 * @member {Number} goalAway
 */
EventIncident.prototype.goalAway = undefined;

/**
 * @member {module:model/PartialPerson} player
 */
EventIncident.prototype.player = undefined;

/**
 * @member {module:model/PartialPerson} relPlayer
 */
EventIncident.prototype.relPlayer = undefined;

/**
 * Whether the incident has been deleted or not - a disallowed goal for example
 * @member {Boolean} deleted
 */
EventIncident.prototype.deleted = undefined;

/**
 * If there are multiple incidents with the same minute, this indicates how they are sorted
 * @member {Number} sortorder
 */
EventIncident.prototype.sortorder = undefined;

