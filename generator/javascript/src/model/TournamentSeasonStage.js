/*
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {Country} from './Country';
import {LeagueStandingData} from './LeagueStandingData';
import {Round} from './Round';

/**
 * The TournamentSeasonStage model module.
 * @module model/TournamentSeasonStage
 * @version 0.0.1
 */
export class TournamentSeasonStage {
  /**
   * Constructs a new <code>TournamentSeasonStage</code>.
   * @alias module:model/TournamentSeasonStage
   * @class
   * @param id {Number} Unique identifier
   * @param name {String} Human readable name of the TournamentSeasonStage
   * @param cup {Boolean} Whether the stage is a cup such as Champions League Knockout stage, World Cup Final stages, etc
   * @param tournamentSeasonId {Number} Id of the TournamentSeason in which the stage is part of
   * @param tournamentId {Number} Id of the Tournament in whicth the stage is part of
   * @param country {module:model/Country} 
   */
  constructor(id, name, cup, tournamentSeasonId, tournamentId, country) {
    this.id = id;
    this.name = name;
    this.cup = cup;
    this.tournamentSeasonId = tournamentSeasonId;
    this.tournamentId = tournamentId;
    this.country = country;
  }

  /**
   * Constructs a <code>TournamentSeasonStage</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TournamentSeasonStage} obj Optional instance to populate.
   * @return {module:model/TournamentSeasonStage} The populated <code>TournamentSeasonStage</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new TournamentSeasonStage();
      if (data.hasOwnProperty('start_date'))
        obj.startDate = ApiClient.convertToType(data['start_date'], 'Date');
      if (data.hasOwnProperty('end_date'))
        obj.endDate = ApiClient.convertToType(data['end_date'], 'Date');
      if (data.hasOwnProperty('qualification'))
        obj.qualification = ApiClient.convertToType(data['qualification'], 'Boolean');
      if (data.hasOwnProperty('live'))
        obj.live = ApiClient.convertToType(data['live'], 'Boolean');
      if (data.hasOwnProperty('stage_groups'))
        obj.stageGroups = ApiClient.convertToType(data['stage_groups'], 'Number');
      if (data.hasOwnProperty('standing'))
        obj.standing = ApiClient.convertToType(data['standing'], [LeagueStandingData]);
      if (data.hasOwnProperty('rounds'))
        obj.rounds = ApiClient.convertToType(data['rounds'], [Round]);
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('cup'))
        obj.cup = ApiClient.convertToType(data['cup'], 'Boolean');
      if (data.hasOwnProperty('tournament_season_id'))
        obj.tournamentSeasonId = ApiClient.convertToType(data['tournament_season_id'], 'Number');
      if (data.hasOwnProperty('tournament_id'))
        obj.tournamentId = ApiClient.convertToType(data['tournament_id'], 'Number');
      if (data.hasOwnProperty('country'))
        obj.country = Country.constructFromObject(data['country']);
      if (data.hasOwnProperty('confederation'))
        obj.confederation = ApiClient.convertToType(data['confederation'], 'String');
    }
    return obj;
  }
}

/**
 * Date when the first game of the stage is held
 * @member {Date} startDate
 */
TournamentSeasonStage.prototype.startDate = undefined;

/**
 * Date when the final game of the stage is held
 * @member {Date} endDate
 */
TournamentSeasonStage.prototype.endDate = undefined;

/**
 * Whether the stage is a qualification stage to a main Tournrament (Champions League Qualification)
 * @member {Boolean} qualification
 */
TournamentSeasonStage.prototype.qualification = undefined;

/**
 * Whether the API has live scores for the stage
 * @member {Boolean} live
 */
TournamentSeasonStage.prototype.live = undefined;

/**
 * Number of groups in the stage. Only available if the stage has groups (Champions League Group Stage)
 * @member {Number} stageGroups
 */
TournamentSeasonStage.prototype.stageGroups = undefined;

/**
 * League standing data if available and if cup = false
 * @member {Array.<module:model/LeagueStandingData>} standing
 */
TournamentSeasonStage.prototype.standing = undefined;

/**
 * List of rounds in the Stage if cup = true
 * @member {Array.<module:model/Round>} rounds
 */
TournamentSeasonStage.prototype.rounds = undefined;

/**
 * Unique identifier
 * @member {Number} id
 */
TournamentSeasonStage.prototype.id = undefined;

/**
 * Human readable name of the TournamentSeasonStage
 * @member {String} name
 */
TournamentSeasonStage.prototype.name = undefined;

/**
 * Whether the stage is a cup such as Champions League Knockout stage, World Cup Final stages, etc
 * @member {Boolean} cup
 */
TournamentSeasonStage.prototype.cup = undefined;

/**
 * Id of the TournamentSeason in which the stage is part of
 * @member {Number} tournamentSeasonId
 */
TournamentSeasonStage.prototype.tournamentSeasonId = undefined;

/**
 * Id of the Tournament in whicth the stage is part of
 * @member {Number} tournamentId
 */
TournamentSeasonStage.prototype.tournamentId = undefined;

/**
 * @member {module:model/Country} country
 */
TournamentSeasonStage.prototype.country = undefined;

/**
 * Indicates which confederation the stage is part of (for World Cup qualif.)
 * @member {String} confederation
 */
TournamentSeasonStage.prototype.confederation = undefined;

