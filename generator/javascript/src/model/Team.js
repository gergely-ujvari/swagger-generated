/*
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {Coach} from './Coach';
import {Country} from './Country';
import {Event} from './Event';
import {TeamForm} from './TeamForm';
import {TournamentSeasonWithTournament} from './TournamentSeasonWithTournament';
import {Venue} from './Venue';

/**
 * The Team model module.
 * @module model/Team
 * @version 0.0.1
 */
export class Team {
  /**
   * Constructs a new <code>Team</code>.
   * @alias module:model/Team
   * @class
   * @param country {module:model/Country} 
   * @param national {Boolean} Whether the team is a football club(Barcelona) or national team(Spain)
   * @param id {Number} Unique identifier of the Team within the system
   * @param name {String} Human readable name of the team
   */
  constructor(country, national, id, name) {
    this.country = country;
    this.national = national;
    this.id = id;
    this.name = name;
  }

  /**
   * Constructs a <code>Team</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Team} obj Optional instance to populate.
   * @return {module:model/Team} The populated <code>Team</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Team();
      if (data.hasOwnProperty('country'))
        obj.country = Country.constructFromObject(data['country']);
      if (data.hasOwnProperty('president'))
        obj.president = ApiClient.convertToType(data['president'], 'String');
      if (data.hasOwnProperty('founded'))
        obj.founded = ApiClient.convertToType(data['founded'], 'Number');
      if (data.hasOwnProperty('venue'))
        obj.venue = Venue.constructFromObject(data['venue']);
      if (data.hasOwnProperty('coach'))
        obj.coach = Coach.constructFromObject(data['coach']);
      if (data.hasOwnProperty('current_league'))
        obj.currentLeague = TournamentSeasonWithTournament.constructFromObject(data['current_league']);
      if (data.hasOwnProperty('next_event'))
        obj.nextEvent = Event.constructFromObject(data['next_event']);
      if (data.hasOwnProperty('social'))
        obj.social = ApiClient.convertToType(data['social'], Object);
      if (data.hasOwnProperty('url_home_kit'))
        obj.urlHomeKit = ApiClient.convertToType(data['url_home_kit'], 'String');
      if (data.hasOwnProperty('url_away_kit'))
        obj.urlAwayKit = ApiClient.convertToType(data['url_away_kit'], 'String');
      if (data.hasOwnProperty('url_squad_image'))
        obj.urlSquadImage = ApiClient.convertToType(data['url_squad_image'], 'String');
      if (data.hasOwnProperty('national'))
        obj.national = ApiClient.convertToType(data['national'], 'Boolean');
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('threeLetterCode'))
        obj.threeLetterCode = ApiClient.convertToType(data['threeLetterCode'], 'String');
      if (data.hasOwnProperty('shortName'))
        obj.shortName = ApiClient.convertToType(data['shortName'], 'String');
      if (data.hasOwnProperty('undecided'))
        obj.undecided = ApiClient.convertToType(data['undecided'], 'Boolean');
      if (data.hasOwnProperty('gender'))
        obj.gender = ApiClient.convertToType(data['gender'], 'String');
      if (data.hasOwnProperty('form'))
        obj.form = ApiClient.convertToType(data['form'], [TeamForm]);
    }
    return obj;
  }
}

/**
 * @member {module:model/Country} country
 */
Team.prototype.country = undefined;

/**
 * Name of the president of the club
 * @member {String} president
 */
Team.prototype.president = undefined;

/**
 * Year the club was founded
 * @member {Number} founded
 */
Team.prototype.founded = undefined;

/**
 * @member {module:model/Venue} venue
 */
Team.prototype.venue = undefined;

/**
 * @member {module:model/Coach} coach
 */
Team.prototype.coach = undefined;

/**
 * @member {module:model/TournamentSeasonWithTournament} currentLeague
 */
Team.prototype.currentLeague = undefined;

/**
 * @member {module:model/Event} nextEvent
 */
Team.prototype.nextEvent = undefined;

/**
 * Various social links for the team
 * @member {Object} social
 */
Team.prototype.social = undefined;

/**
 * @member {String} urlHomeKit
 */
Team.prototype.urlHomeKit = undefined;

/**
 * @member {String} urlAwayKit
 */
Team.prototype.urlAwayKit = undefined;

/**
 * Image of the team squad
 * @member {String} urlSquadImage
 */
Team.prototype.urlSquadImage = undefined;

/**
 * Whether the team is a football club(Barcelona) or national team(Spain)
 * @member {Boolean} national
 */
Team.prototype.national = undefined;

/**
 * Unique identifier of the Team within the system
 * @member {Number} id
 */
Team.prototype.id = undefined;

/**
 * Human readable name of the team
 * @member {String} name
 */
Team.prototype.name = undefined;

/**
 * 3 character name of team
 * @member {String} threeLetterCode
 */
Team.prototype.threeLetterCode = undefined;

/**
 * Manually inserted short name of team
 * @member {String} shortName
 */
Team.prototype.shortName = undefined;

/**
 * If present and = true, the team can be one of two teams. This occurs in cup competitions when some games are still not played
 * @member {Boolean} undecided
 */
Team.prototype.undecided = undefined;

/**
 * Allowed values for the <code>gender</code> property.
 * @enum {String}
 * @readonly
 */
Team.GenderEnum = {
  /**
   * value: "MALE"
   * @const
   */
  MALE: "MALE",

  /**
   * value: "FEMALE"
   * @const
   */
  FEMALE: "FEMALE"
};
/**
 * Team gender, MALE, FEMALE or null
 * @member {module:model/Team.GenderEnum} gender
 */
Team.prototype.gender = undefined;

/**
 * Form guide for the Team if available and requested as an option
 * @member {Array.<module:model/TeamForm>} form
 */
Team.prototype.form = undefined;

