/*
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {V2MatchRefereeInput} from './V2MatchRefereeInput';
import {V2MatchScoreInput} from './V2MatchScoreInput';

/**
 * The V2MatchInput model module.
 * @module model/V2MatchInput
 * @version 0.0.1
 */
export class V2MatchInput {
  /**
   * Constructs a new <code>V2MatchInput</code>.
   * @alias module:model/V2MatchInput
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>V2MatchInput</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/V2MatchInput} obj Optional instance to populate.
   * @return {module:model/V2MatchInput} The populated <code>V2MatchInput</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new V2MatchInput();
      if (data.hasOwnProperty('status_id'))
        obj.statusId = ApiClient.convertToType(data['status_id'], 'String');
      if (data.hasOwnProperty('kickoff_time'))
        obj.kickoffTime = ApiClient.convertToType(data['kickoff_time'], 'Date');
      if (data.hasOwnProperty('stage_id'))
        obj.stageId = ApiClient.convertToType(data['stage_id'], 'String');
      if (data.hasOwnProperty('home_team_id'))
        obj.homeTeamId = ApiClient.convertToType(data['home_team_id'], 'String');
      if (data.hasOwnProperty('away_team_id'))
        obj.awayTeamId = ApiClient.convertToType(data['away_team_id'], 'String');
      if (data.hasOwnProperty('round_key'))
        obj.roundKey = ApiClient.convertToType(data['round_key'], 'String');
      if (data.hasOwnProperty('group_id'))
        obj.groupId = ApiClient.convertToType(data['group_id'], 'String');
      if (data.hasOwnProperty('venue_id'))
        obj.venueId = ApiClient.convertToType(data['venue_id'], 'String');
      if (data.hasOwnProperty('referees'))
        obj.referees = ApiClient.convertToType(data['referees'], [V2MatchRefereeInput]);
      if (data.hasOwnProperty('score'))
        obj.score = V2MatchScoreInput.constructFromObject(data['score']);
      if (data.hasOwnProperty('spectators'))
        obj.spectators = ApiClient.convertToType(data['spectators'], 'Number');
      if (data.hasOwnProperty('coverage'))
        obj.coverage = ApiClient.convertToType(data['coverage'], 'String');
      if (data.hasOwnProperty('finished_at'))
        obj.finishedAt = ApiClient.convertToType(data['finished_at'], 'Date');
      if (data.hasOwnProperty('phase_started_at'))
        obj.phaseStartedAt = ApiClient.convertToType(data['phase_started_at'], 'Date');
    }
    return obj;
  }
}

/**
 * @member {String} statusId
 */
V2MatchInput.prototype.statusId = undefined;

/**
 * @member {Date} kickoffTime
 */
V2MatchInput.prototype.kickoffTime = undefined;

/**
 * @member {String} stageId
 */
V2MatchInput.prototype.stageId = undefined;

/**
 * @member {String} homeTeamId
 */
V2MatchInput.prototype.homeTeamId = undefined;

/**
 * @member {String} awayTeamId
 */
V2MatchInput.prototype.awayTeamId = undefined;

/**
 * @member {String} roundKey
 */
V2MatchInput.prototype.roundKey = undefined;

/**
 * @member {String} groupId
 */
V2MatchInput.prototype.groupId = undefined;

/**
 * @member {String} venueId
 */
V2MatchInput.prototype.venueId = undefined;

/**
 * @member {Array.<module:model/V2MatchRefereeInput>} referees
 */
V2MatchInput.prototype.referees = undefined;

/**
 * @member {module:model/V2MatchScoreInput} score
 */
V2MatchInput.prototype.score = undefined;

/**
 * @member {Number} spectators
 */
V2MatchInput.prototype.spectators = undefined;

/**
 * Allowed values for the <code>coverage</code> property.
 * @enum {String}
 * @readonly
 */
V2MatchInput.CoverageEnum = {
  /**
   * value: "LIVE"
   * @const
   */
  LIVE: "LIVE",

  /**
   * value: "NOT_LIVE"
   * @const
   */
  NOT_LIVE: "NOT_LIVE",

  /**
   * value: "UNKNOWN"
   * @const
   */
  UNKNOWN: "UNKNOWN"
};
/**
 * @member {module:model/V2MatchInput.CoverageEnum} coverage
 */
V2MatchInput.prototype.coverage = undefined;

/**
 * @member {Date} finishedAt
 */
V2MatchInput.prototype.finishedAt = undefined;

/**
 * @member {Date} phaseStartedAt
 */
V2MatchInput.prototype.phaseStartedAt = undefined;

