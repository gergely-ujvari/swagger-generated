/*
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {NotFoundError} from '../model/NotFoundError';
import {StageDto} from '../model/StageDto';
import {V2StageGroup} from '../model/V2StageGroup';
import {V2StageGroupCollection} from '../model/V2StageGroupCollection';
import {V2StageTeamInput} from '../model/V2StageTeamInput';

/**
* Stages service.
* @module api/StagesApi
* @version 0.0.1
*/
export class StagesApi {

    /**
    * Constructs a new StagesApi. 
    * @alias module:api/StagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the stagesGet operation.
     * @callback moduleapi/StagesApi~stagesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/StageDto>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listing for Stages resources
     * @param {Object} opts Optional parameters
     * @param {Number} opts.teamId Filter stages by a team which is participating in the stage
     * @param {String} opts.tournamentIds CSV list of tournament.id values to filter stages
     * @param {String} opts.acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation (default to <.>)
     * @param {module:api/StagesApi~stagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    stagesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'team_id': opts['teamId'],'tournament_ids': opts['tournamentIds']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = [StageDto];

      return this.apiClient.callApi(
        '/stages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the v2GroupsIdDelete operation.
     * @callback moduleapi/StagesApi~v2GroupsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Permanently delete group
     * @param {String} id Unique identifier of the resource.
     * @param {module:api/StagesApi~v2GroupsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v2GroupsIdDelete(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2GroupsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v2/groups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the v2StagesIdGroupsGet operation.
     * @callback moduleapi/StagesApi~v2StagesIdGroupsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2StageGroupCollection{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all groups for specific stage
     * @param {String} id Unique identifier of the resource.
     * @param {Object} opts Optional parameters
     * @param {String} opts.languageCode Returns translated response based on the language code (default to <.>)
     * @param {module:api/StagesApi~v2StagesIdGroupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    v2StagesIdGroupsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2StagesIdGroupsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'language_code': opts['languageCode']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = V2StageGroupCollection;

      return this.apiClient.callApi(
        '/v2/stages/{id}/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the v2StagesIdGroupsPost operation.
     * @callback moduleapi/StagesApi~v2StagesIdGroupsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2StageGroupCollection{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update multiple groups
     * @param {Array.<module:model/V2StageGroup>} body List of groups to be updated or created
     * @param {String} id Unique identifier of the resource.
     * @param {module:api/StagesApi~v2StagesIdGroupsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    v2StagesIdGroupsPost(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling v2StagesIdGroupsPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2StagesIdGroupsPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V2StageGroupCollection;

      return this.apiClient.callApi(
        '/v2/stages/{id}/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the v2StagesIdTeamsPut operation.
     * @callback moduleapi/StagesApi~v2StagesIdTeamsPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace teams in stage
     * @param {Array.<module:model/V2StageTeamInput>} body List of team ids
     * @param {String} id Unique identifier of the resource.
     * @param {module:api/StagesApi~v2StagesIdTeamsPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v2StagesIdTeamsPut(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling v2StagesIdTeamsPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2StagesIdTeamsPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v2/stages/{id}/teams', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}