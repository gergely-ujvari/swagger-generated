/*
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {NotFoundError} from '../model/NotFoundError';
import {OutputDto} from '../model/OutputDto';
import {V2PlayerSeasonStatisticOutputCollection} from '../model/V2PlayerSeasonStatisticOutputCollection';
import {V2PlayerStatisticInput} from '../model/V2PlayerStatisticInput';
import {V2PlayerStatisticOutput} from '../model/V2PlayerStatisticOutput';

/**
* PlayerStatistic service.
* @module api/PlayerStatisticApi
* @version 0.0.1
*/
export class PlayerStatisticApi {

    /**
    * Constructs a new PlayerStatisticApi. 
    * @alias module:api/PlayerStatisticApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the statisticsPlayersGet operation.
     * @callback moduleapi/PlayerStatisticApi~statisticsPlayersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OutputDto>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} languageCode Return translations depending on language code
     * @param {Object} opts Optional parameters
     * @param {String} opts.playerIds List for player IDs separated by commas.
     * @param {String} opts.seasonIds List for season IDs separated by commas.
     * @param {Number} opts.teamId Return only statistics for players which are currently in the specified team&#x27;s squad
     * @param {module:api/PlayerStatisticApi~statisticsPlayersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    statisticsPlayersGet(languageCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'languageCode' is set
      if (languageCode === undefined || languageCode === null) {
        throw new Error("Missing the required parameter 'languageCode' when calling statisticsPlayersGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'player_ids': opts['playerIds'],'season_ids': opts['seasonIds'],'team_id': opts['teamId'],'language_code': languageCode
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = [OutputDto];

      return this.apiClient.callApi(
        '/statistics/players', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the v2StatisticsPlayersMatchPut operation.
     * @callback moduleapi/PlayerStatisticApi~v2StatisticsPlayersMatchPutCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/V2PlayerStatisticOutput>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk Upsert player statistics
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/V2PlayerStatisticInput>} opts.body Array of player match statistics
     * @param {module:api/PlayerStatisticApi~v2StatisticsPlayersMatchPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    v2StatisticsPlayersMatchPut(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [V2PlayerStatisticOutput];

      return this.apiClient.callApi(
        '/v2/statistics/players/match', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the v2StatisticsPlayersSeasonGet operation.
     * @callback moduleapi/PlayerStatisticApi~v2StatisticsPlayersSeasonGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/V2PlayerSeasonStatisticOutputCollection>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve player statistics, grouped by player and season
     * @param {Object} opts Optional parameters
     * @param {String} opts.playerIds CSV list of player id values
     * @param {String} opts.seasonIds CSV list of tournament season id values
     * @param {Number} opts.teamId Team unique identifier
     * @param {String} opts.languageCode Returns translated response based on the language code (default to <.>)
     * @param {module:api/PlayerStatisticApi~v2StatisticsPlayersSeasonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    v2StatisticsPlayersSeasonGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'player_ids': opts['playerIds'],'season_ids': opts['seasonIds'],'team_id': opts['teamId'],'language_code': opts['languageCode']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [V2PlayerSeasonStatisticOutputCollection];

      return this.apiClient.callApi(
        '/v2/statistics/players/season', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}