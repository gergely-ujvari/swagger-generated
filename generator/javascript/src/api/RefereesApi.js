/*
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {NotFoundError} from '../model/NotFoundError';
import {RefereeDto} from '../model/RefereeDto';
import {RefereeEditDto} from '../model/RefereeEditDto';
import {RefereePageDto} from '../model/RefereePageDto';

/**
* Referees service.
* @module api/RefereesApi
* @version 0.0.1
*/
export class RefereesApi {

    /**
    * Constructs a new RefereesApi. 
    * @alias module:api/RefereesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the v2RefereesGet operation.
     * @callback moduleapi/RefereesApi~v2RefereesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RefereePageDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List referees with offset and limit parameters
     * @param {Number} offset The number of items to skip before starting to collect the result set
     * @param {Number} limit Limit the number of results returned
     * @param {Object} opts Optional parameters
     * @param {String} opts.seasonIds Filter referees which have refereed matches in the specified CSV season_ids
     * @param {String} opts.languageCode Returns translated response based on the language code (default to <.>)
     * @param {module:api/RefereesApi~v2RefereesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    v2RefereesGet(offset, limit, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling v2RefereesGet");
      }
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling v2RefereesGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'season_ids': opts['seasonIds'],'offset': offset,'limit': limit,'language_code': opts['languageCode']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = RefereePageDto;

      return this.apiClient.callApi(
        '/v2/referees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the v2RefereesIdGet operation.
     * @callback moduleapi/RefereesApi~v2RefereesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RefereeDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get referee by id
     * @param {String} id Unique identifier of the resource.
     * @param {Object} opts Optional parameters
     * @param {String} opts.languageCode Returns translated response based on the language code (default to <.>)
     * @param {module:api/RefereesApi~v2RefereesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    v2RefereesIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2RefereesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'language_code': opts['languageCode']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = RefereeDto;

      return this.apiClient.callApi(
        '/v2/referees/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the v2RefereesIdPut operation.
     * @callback moduleapi/RefereesApi~v2RefereesIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RefereeDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update referee information
     * @param {String} id Unique identifier of the resource.
     * @param {Object} opts Optional parameters
     * @param {module:model/RefereeEditDto} opts.body Referee information to save in persistance
     * @param {module:api/RefereesApi~v2RefereesIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    v2RefereesIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2RefereesIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RefereeDto;

      return this.apiClient.callApi(
        '/v2/referees/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the v2RefereesPost operation.
     * @callback moduleapi/RefereesApi~v2RefereesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RefereeDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store a newly created referee in storage
     * @param {Object} opts Optional parameters
     * @param {module:model/RefereeEditDto} opts.body 
     * @param {module:api/RefereesApi~v2RefereesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    v2RefereesPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RefereeDto;

      return this.apiClient.callApi(
        '/v2/referees', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}