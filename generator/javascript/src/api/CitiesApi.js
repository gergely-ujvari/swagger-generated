/*
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CityDto} from '../model/CityDto';
import {CityEditDto} from '../model/CityEditDto';
import {NotFoundError} from '../model/NotFoundError';

/**
* Cities service.
* @module api/CitiesApi
* @version 0.0.1
*/
export class CitiesApi {

    /**
    * Constructs a new CitiesApi. 
    * @alias module:api/CitiesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the v2CitiesIdPut operation.
     * @callback moduleapi/CitiesApi~v2CitiesIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CityDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update city information
     * @param {String} id Unique identifier of the resource.
     * @param {Object} opts Optional parameters
     * @param {module:model/CityEditDto} opts.body City information to save in persistance
     * @param {module:api/CitiesApi~v2CitiesIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    v2CitiesIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2CitiesIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CityDto;

      return this.apiClient.callApi(
        '/v2/cities/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the v2CitiesPost operation.
     * @callback moduleapi/CitiesApi~v2CitiesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CityDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store a newly created city in storage
     * @param {Object} opts Optional parameters
     * @param {module:model/CityEditDto} opts.body 
     * @param {module:api/CitiesApi~v2CitiesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    v2CitiesPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = CityDto;

      return this.apiClient.callApi(
        '/v2/cities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}