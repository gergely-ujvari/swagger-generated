/*
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {NotFoundError} from '../model/NotFoundError';
import {V2TournamentGroupCollection} from '../model/V2TournamentGroupCollection';
import {V2TournamentGroupGetOutput} from '../model/V2TournamentGroupGetOutput';
import {V2TournamentGroupInsertInput} from '../model/V2TournamentGroupInsertInput';
import {V2TournamentGroupSelection} from '../model/V2TournamentGroupSelection';
import {V2TournamentGroupUpdateInput} from '../model/V2TournamentGroupUpdateInput';

/**
* TournamentGroups service.
* @module api/TournamentGroupsApi
* @version 0.0.1
*/
export class TournamentGroupsApi {

    /**
    * Constructs a new TournamentGroupsApi. 
    * @alias module:api/TournamentGroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the v2TournamentsGroupsCodeGet operation.
     * @callback moduleapi/TournamentGroupsApi~v2TournamentsGroupsCodeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2TournamentGroupGetOutput{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all tournaments for a given group name and their order
     * @param {String} code Tournament group code
     * @param {module:api/TournamentGroupsApi~v2TournamentsGroupsCodeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    v2TournamentsGroupsCodeGet(code, callback) {
      
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling v2TournamentsGroupsCodeGet");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = V2TournamentGroupGetOutput;

      return this.apiClient.callApi(
        '/v2/tournaments/groups/{code}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the v2TournamentsGroupsCodePut operation.
     * @callback moduleapi/TournamentGroupsApi~v2TournamentsGroupsCodePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing tournament group
     * @param {module:model/V2TournamentGroupUpdateInput} body Tournament group information
     * @param {String} code Tournament group unique code
     * @param {module:api/TournamentGroupsApi~v2TournamentsGroupsCodePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v2TournamentsGroupsCodePut(body, code, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling v2TournamentsGroupsCodePut");
      }
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling v2TournamentsGroupsCodePut");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v2/tournaments/groups/{code}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the v2TournamentsGroupsCodeSelectionDatePost operation.
     * @callback moduleapi/TournamentGroupsApi~v2TournamentsGroupsCodeSelectionDatePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} code Client code
     * @param {Date} _date Date in ISO 8601 format (Y-m-d)
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/V2TournamentGroupSelection>} opts.body Array of match ids
     * @param {module:api/TournamentGroupsApi~v2TournamentsGroupsCodeSelectionDatePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v2TournamentsGroupsCodeSelectionDatePost(code, _date, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling v2TournamentsGroupsCodeSelectionDatePost");
      }
      // verify the required parameter '_date' is set
      if (_date === undefined || _date === null) {
        throw new Error("Missing the required parameter '_date' when calling v2TournamentsGroupsCodeSelectionDatePost");
      }

      let pathParams = {
        'code': code,'date': _date
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v2/tournaments/groups/{code}/selection/{date}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the v2TournamentsGroupsGet operation.
     * @callback moduleapi/TournamentGroupsApi~v2TournamentsGroupsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2TournamentGroupCollection{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all tournament groups
     * @param {module:api/TournamentGroupsApi~v2TournamentsGroupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    v2TournamentsGroupsGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = V2TournamentGroupCollection;

      return this.apiClient.callApi(
        '/v2/tournaments/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the v2TournamentsGroupsPost operation.
     * @callback moduleapi/TournamentGroupsApi~v2TournamentsGroupsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new tournament group
     * @param {module:model/V2TournamentGroupInsertInput} body Tournament group information
     * @param {module:api/TournamentGroupsApi~v2TournamentsGroupsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v2TournamentsGroupsPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling v2TournamentsGroupsPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v2/tournaments/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}