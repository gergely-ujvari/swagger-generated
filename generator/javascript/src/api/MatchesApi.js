/*
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {LiveCommentaryOutputDto} from '../model/LiveCommentaryOutputDto';
import {NotFoundError} from '../model/NotFoundError';
import {V2Match} from '../model/V2Match';
import {V2MatchInput} from '../model/V2MatchInput';

/**
* Matches service.
* @module api/MatchesApi
* @version 0.0.1
*/
export class MatchesApi {

    /**
    * Constructs a new MatchesApi. 
    * @alias module:api/MatchesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the matchesIdCommentaryGet operation.
     * @callback moduleapi/MatchesApi~matchesIdCommentaryGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LiveCommentaryOutputDto>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of live commentaries with specified match id and language
     * @param {String} id Unique identifier of the resource.
     * @param {String} languageCode Return translations depending on language code
     * @param {module:api/MatchesApi~matchesIdCommentaryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    matchesIdCommentaryGet(id, languageCode, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling matchesIdCommentaryGet");
      }
      // verify the required parameter 'languageCode' is set
      if (languageCode === undefined || languageCode === null) {
        throw new Error("Missing the required parameter 'languageCode' when calling matchesIdCommentaryGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'language_code': languageCode
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = [LiveCommentaryOutputDto];

      return this.apiClient.callApi(
        '/matches/{id}/commentary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the v2MatchesGet operation.
     * @callback moduleapi/MatchesApi~v2MatchesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/V2Match>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of matches
     * @param {Number} limit Select an upper limit for the matches that would be returned
     * @param {Number} offset Select an offset for the matches that would be returned
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.tournamentIds Filter matches, which have been played as part of the listed tournaments
     * @param {Array.<Number>} opts.seasonIds Filter matches, which have been played as part of the listed tournament seasons
     * @param {Array.<Number>} opts.stageIds Filter matches, which have been played as part of the listed tournament stages
     * @param {Array.<Number>} opts.groupIds Filter matches, which have been played as part of the listed tournament groups
     * @param {Array.<String>} opts.roundIds Filter matches, which have been played as part of the listed tournament rounds
     * @param {Array.<String>} opts.roundFilter Filter matches by combinations of stage_id and round_id. Format: {stage_id}:{round_id}
     * @param {Date} opts.fromKickoffTime Filter matches, which have a start_time after the specified date, format is ISO 8601
     * @param {Date} opts.toKickoffTime Filter matches, which have a start_time before the specified date, format is ISO 8601
     * @param {Array.<Number>} opts.teamIds Filter matches by teams which have taken part in them
     * @param {Array.<String>} opts.statusTypes Filter matches by their status types
     * @param {Array.<String>} opts.statusCodes Filter matches by their status codes
     * @param {Number} opts.refereeId Filter matches by the referee who has taken part in them
     * @param {String} opts.venueId Filter matches by the venue that has hosted them
     * @param {String} opts.sortDirection Sort matches in asc|desc order by start_time
     * @param {module:api/MatchesApi~v2MatchesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    v2MatchesGet(limit, offset, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling v2MatchesGet");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling v2MatchesGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'tournament_ids': this.apiClient.buildCollectionParam(opts['tournamentIds'], 'csv'),'season_ids': this.apiClient.buildCollectionParam(opts['seasonIds'], 'csv'),'stage_ids': this.apiClient.buildCollectionParam(opts['stageIds'], 'csv'),'group_ids': this.apiClient.buildCollectionParam(opts['groupIds'], 'csv'),'round_ids': this.apiClient.buildCollectionParam(opts['roundIds'], 'csv'),'round_filter': this.apiClient.buildCollectionParam(opts['roundFilter'], 'csv'),'from_kickoff_time': opts['fromKickoffTime'],'to_kickoff_time': opts['toKickoffTime'],'team_ids': this.apiClient.buildCollectionParam(opts['teamIds'], 'csv'),'status_types': this.apiClient.buildCollectionParam(opts['statusTypes'], 'csv'),'status_codes': this.apiClient.buildCollectionParam(opts['statusCodes'], 'csv'),'referee_id': opts['refereeId'],'venue_id': opts['venueId'],'sort_direction': opts['sortDirection'],'limit': limit,'offset': offset
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = [V2Match];

      return this.apiClient.callApi(
        '/v2/matches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the v2MatchesIdGet operation.
     * @callback moduleapi/MatchesApi~v2MatchesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2Match{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id Unique identifier of the resource.
     * @param {Object} opts Optional parameters
     * @param {String} opts.languageCode Returns translated response based on the language code (default to <.>)
     * @param {module:api/MatchesApi~v2MatchesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    v2MatchesIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2MatchesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'language_code': opts['languageCode']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = V2Match;

      return this.apiClient.callApi(
        '/v2/matches/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the v2MatchesIdPut operation.
     * @callback moduleapi/MatchesApi~v2MatchesIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2Match{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/V2MatchInput} body Match information to save
     * @param {String} id Unique identifier of the resource.
     * @param {module:api/MatchesApi~v2MatchesIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    v2MatchesIdPut(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling v2MatchesIdPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2MatchesIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = V2Match;

      return this.apiClient.callApi(
        '/v2/matches/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the v2MatchesLivescoreGet operation.
     * @callback moduleapi/MatchesApi~v2MatchesLivescoreGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/V2Match>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of matches
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.matchIds Filter matches by their IDs
     * @param {Date} opts._date Filter matches by the date when they were played, format is ISO 8601
     * @param {Number} opts.utcOffset Filter matches by date and UTC offset, allowed value range: [-12,14]
     * @param {String} opts.tournamentGroup Filter matches by a tournament group code
     * @param {Array.<module:model/String>} opts.statusTypes Filter matches by status types
     * @param {module:model/String} opts.selectionFilter Fetch selected matches for specific date and tournament_group (default to <.>)
     * @param {module:api/MatchesApi~v2MatchesLivescoreGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    v2MatchesLivescoreGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'match_ids': this.apiClient.buildCollectionParam(opts['matchIds'], 'csv'),'date': opts['_date'],'utc_offset': opts['utcOffset'],'tournament_group': opts['tournamentGroup'],'status_types': this.apiClient.buildCollectionParam(opts['statusTypes'], 'csv'),'selection_filter': opts['selectionFilter']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = [V2Match];

      return this.apiClient.callApi(
        '/v2/matches/livescore', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the v2MatchesPost operation.
     * @callback moduleapi/MatchesApi~v2MatchesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V2Match{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/V2MatchInput} body Match information to save
     * @param {module:api/MatchesApi~v2MatchesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    v2MatchesPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling v2MatchesPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = V2Match;

      return this.apiClient.callApi(
        '/v2/matches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}