/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Event } from '../model/event';
import { NotFoundError } from '../model/notFoundError';
import { PartialTeam } from '../model/partialTeam';
import { Team } from '../model/team';
import { TeamEditDto } from '../model/teamEditDto';
import { TeamForm } from '../model/teamForm';
import { TeamPageDto } from '../model/teamPageDto';
import { TeamPlayer } from '../model/teamPlayer';
import { TeamPlayerSeasonStatistics } from '../model/teamPlayerSeasonStatistics';
import { TeamSeasonStatistics } from '../model/teamSeasonStatistics';
import { TournamentSeasonWithTournament } from '../model/tournamentSeasonWithTournament';
import { V2TeamColors } from '../model/v2TeamColors';
import { V2TeamProfile } from '../model/v2TeamProfile';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TeamsService {

    protected basePath = 'https://false/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Get Teams for a specific Country.id
     * @param id Unique identifier of the resource.
     * @param acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param national Filter teams for different types of national and non national
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public countriesIdTeamsGet(id: string, acceptLanguage?: string, national?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Team>>;
    public countriesIdTeamsGet(id: string, acceptLanguage?: string, national?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Team>>>;
    public countriesIdTeamsGet(id: string, acceptLanguage?: string, national?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Team>>>;
    public countriesIdTeamsGet(id: string, acceptLanguage?: string, national?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling countriesIdTeamsGet.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (national !== undefined && national !== null) {
            queryParameters = queryParameters.set('national', <any>national);
        }

        let headers = this.defaultHeaders;
        if (acceptLanguage !== undefined && acceptLanguage !== null) {
            headers = headers.set('Accept-Language', String(acceptLanguage));
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Team>>('get',`${this.basePath}/countries/${encodeURIComponent(String(id))}/teams`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Search all teams by parameters
     * @param name Filter by team. Length must be &gt;&#x3D; 4. The filter matches on a per word basis. If you query for &#x27;United&#x27; it will match both &#x27;West Ham United&#x27; and &#x27;Newcastle United&#x27;
     * @param acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param maxResults Limit the number of results returned
     * @param countryId Filter teams just from the specified country
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public teamsGet(name: string, acceptLanguage?: string, maxResults?: number, countryId?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Team>>;
    public teamsGet(name: string, acceptLanguage?: string, maxResults?: number, countryId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Team>>>;
    public teamsGet(name: string, acceptLanguage?: string, maxResults?: number, countryId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Team>>>;
    public teamsGet(name: string, acceptLanguage?: string, maxResults?: number, countryId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling teamsGet.');
        }




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (maxResults !== undefined && maxResults !== null) {
            queryParameters = queryParameters.set('max_results', <any>maxResults);
        }
        if (countryId !== undefined && countryId !== null) {
            queryParameters = queryParameters.set('country_id', <any>countryId);
        }

        let headers = this.defaultHeaders;
        if (acceptLanguage !== undefined && acceptLanguage !== null) {
            headers = headers.set('Accept-Language', String(acceptLanguage));
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Team>>('get',`${this.basePath}/teams`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get a list of events in which a team with a specified id has participated
     * @param id Unique identifier of the resource.
     * @param acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param fromTime Filter events, which have a start_time after the specified date, format is RFC 3339
     * @param toTime Filter events, which have a start_time before the specified date, format is RFC 3339
     * @param direction Whether to sort the results by ascending or descending order
     * @param tournamentSeasonStageId Filter events for a specific tournament_season_stage.id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public teamsIdEventsGet(id: string, acceptLanguage?: string, fromTime?: Date, toTime?: Date, direction?: string, tournamentSeasonStageId?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Event>>;
    public teamsIdEventsGet(id: string, acceptLanguage?: string, fromTime?: Date, toTime?: Date, direction?: string, tournamentSeasonStageId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Event>>>;
    public teamsIdEventsGet(id: string, acceptLanguage?: string, fromTime?: Date, toTime?: Date, direction?: string, tournamentSeasonStageId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Event>>>;
    public teamsIdEventsGet(id: string, acceptLanguage?: string, fromTime?: Date, toTime?: Date, direction?: string, tournamentSeasonStageId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling teamsIdEventsGet.');
        }






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (fromTime !== undefined && fromTime !== null) {
            queryParameters = queryParameters.set('from_time', <any>fromTime.toISOString());
        }
        if (toTime !== undefined && toTime !== null) {
            queryParameters = queryParameters.set('to_time', <any>toTime.toISOString());
        }
        if (direction !== undefined && direction !== null) {
            queryParameters = queryParameters.set('direction', <any>direction);
        }
        if (tournamentSeasonStageId !== undefined && tournamentSeasonStageId !== null) {
            queryParameters = queryParameters.set('tournament_season_stage_id', <any>tournamentSeasonStageId);
        }

        let headers = this.defaultHeaders;
        if (acceptLanguage !== undefined && acceptLanguage !== null) {
            headers = headers.set('Accept-Language', String(acceptLanguage));
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Event>>('get',`${this.basePath}/teams/${encodeURIComponent(String(id))}/events`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get Team form information accross all tournaments
     * @param id Unique identifier of the resource.
     * @param acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param expand Whether to include information about every event in the TeamForm response
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public teamsIdFormGet(id: string, acceptLanguage?: string, expand?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<TeamForm>>;
    public teamsIdFormGet(id: string, acceptLanguage?: string, expand?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TeamForm>>>;
    public teamsIdFormGet(id: string, acceptLanguage?: string, expand?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TeamForm>>>;
    public teamsIdFormGet(id: string, acceptLanguage?: string, expand?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling teamsIdFormGet.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (expand !== undefined && expand !== null) {
            queryParameters = queryParameters.set('expand', <any>expand);
        }

        let headers = this.defaultHeaders;
        if (acceptLanguage !== undefined && acceptLanguage !== null) {
            headers = headers.set('Accept-Language', String(acceptLanguage));
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<TeamForm>>('get',`${this.basePath}/teams/${encodeURIComponent(String(id))}/form`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get information about a specific Team
     * @param id Unique identifier of the resource.
     * @param acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param expand Specifies additional information to include with the Team response
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public teamsIdGet(id: string, acceptLanguage?: string, expand?: string, observe?: 'body', reportProgress?: boolean): Observable<Team>;
    public teamsIdGet(id: string, acceptLanguage?: string, expand?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Team>>;
    public teamsIdGet(id: string, acceptLanguage?: string, expand?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Team>>;
    public teamsIdGet(id: string, acceptLanguage?: string, expand?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling teamsIdGet.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (expand !== undefined && expand !== null) {
            queryParameters = queryParameters.set('expand', <any>expand);
        }

        let headers = this.defaultHeaders;
        if (acceptLanguage !== undefined && acceptLanguage !== null) {
            headers = headers.set('Accept-Language', String(acceptLanguage));
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Team>('get',`${this.basePath}/teams/${encodeURIComponent(String(id))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get the current squad for a Team
     * @param id Unique identifier of the resource.
     * @param acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param groupBy Group players by a specific property
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public teamsIdPlayersGet(id: string, acceptLanguage?: string, groupBy?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<TeamPlayer>>;
    public teamsIdPlayersGet(id: string, acceptLanguage?: string, groupBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TeamPlayer>>>;
    public teamsIdPlayersGet(id: string, acceptLanguage?: string, groupBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TeamPlayer>>>;
    public teamsIdPlayersGet(id: string, acceptLanguage?: string, groupBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling teamsIdPlayersGet.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (groupBy !== undefined && groupBy !== null) {
            queryParameters = queryParameters.set('group_by', <any>groupBy);
        }

        let headers = this.defaultHeaders;
        if (acceptLanguage !== undefined && acceptLanguage !== null) {
            headers = headers.set('Accept-Language', String(acceptLanguage));
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<TeamPlayer>>('get',`${this.basePath}/teams/${encodeURIComponent(String(id))}/players`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get player statistics for the current season in the Team&#x27;s League
     * @param id Unique identifier of the resource.
     * @param acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param groupBy Group the response by a specific property
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public teamsIdPlayersStatisticsGet(id: string, acceptLanguage?: string, groupBy?: string, observe?: 'body', reportProgress?: boolean): Observable<TeamPlayerSeasonStatistics>;
    public teamsIdPlayersStatisticsGet(id: string, acceptLanguage?: string, groupBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TeamPlayerSeasonStatistics>>;
    public teamsIdPlayersStatisticsGet(id: string, acceptLanguage?: string, groupBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TeamPlayerSeasonStatistics>>;
    public teamsIdPlayersStatisticsGet(id: string, acceptLanguage?: string, groupBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling teamsIdPlayersStatisticsGet.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (groupBy !== undefined && groupBy !== null) {
            queryParameters = queryParameters.set('group_by', <any>groupBy);
        }

        let headers = this.defaultHeaders;
        if (acceptLanguage !== undefined && acceptLanguage !== null) {
            headers = headers.set('Accept-Language', String(acceptLanguage));
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<TeamPlayerSeasonStatistics>('get',`${this.basePath}/teams/${encodeURIComponent(String(id))}/players/statistics`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get a list of TournamentSeasons for which Player Statistics are available
     * @param id Unique identifier of the resource.
     * @param acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public teamsIdPlayersStatisticsSeasonsGet(id: string, acceptLanguage?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<TournamentSeasonWithTournament>>;
    public teamsIdPlayersStatisticsSeasonsGet(id: string, acceptLanguage?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TournamentSeasonWithTournament>>>;
    public teamsIdPlayersStatisticsSeasonsGet(id: string, acceptLanguage?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TournamentSeasonWithTournament>>>;
    public teamsIdPlayersStatisticsSeasonsGet(id: string, acceptLanguage?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling teamsIdPlayersStatisticsSeasonsGet.');
        }


        let headers = this.defaultHeaders;
        if (acceptLanguage !== undefined && acceptLanguage !== null) {
            headers = headers.set('Accept-Language', String(acceptLanguage));
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<TournamentSeasonWithTournament>>('get',`${this.basePath}/teams/${encodeURIComponent(String(id))}/players/statistics/seasons`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get player statistics for the current season in the Team&#x27;s League
     * @param seasonId Unique identifier of the TournamentSeason resource
     * @param id Unique identifier of the resource.
     * @param acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param groupBy Group the response by a specific property
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public teamsIdPlayersStatisticsSeasonsSeasonIdGet(seasonId: number, id: string, acceptLanguage?: string, groupBy?: string, observe?: 'body', reportProgress?: boolean): Observable<TeamPlayerSeasonStatistics>;
    public teamsIdPlayersStatisticsSeasonsSeasonIdGet(seasonId: number, id: string, acceptLanguage?: string, groupBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TeamPlayerSeasonStatistics>>;
    public teamsIdPlayersStatisticsSeasonsSeasonIdGet(seasonId: number, id: string, acceptLanguage?: string, groupBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TeamPlayerSeasonStatistics>>;
    public teamsIdPlayersStatisticsSeasonsSeasonIdGet(seasonId: number, id: string, acceptLanguage?: string, groupBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (seasonId === null || seasonId === undefined) {
            throw new Error('Required parameter seasonId was null or undefined when calling teamsIdPlayersStatisticsSeasonsSeasonIdGet.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling teamsIdPlayersStatisticsSeasonsSeasonIdGet.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (groupBy !== undefined && groupBy !== null) {
            queryParameters = queryParameters.set('group_by', <any>groupBy);
        }

        let headers = this.defaultHeaders;
        if (acceptLanguage !== undefined && acceptLanguage !== null) {
            headers = headers.set('Accept-Language', String(acceptLanguage));
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<TeamPlayerSeasonStatistics>('get',`${this.basePath}/teams/${encodeURIComponent(String(id))}/players/statistics/seasons/${encodeURIComponent(String(seasonId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get the statistics for the latest League the team participates in
     * @param id Unique identifier of the resource.
     * @param acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param standing Select whether to include a full league standing or just the team&#x27;s position
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public teamsIdStatisticsLeagueGet(id: string, acceptLanguage?: string, standing?: string, observe?: 'body', reportProgress?: boolean): Observable<TeamSeasonStatistics>;
    public teamsIdStatisticsLeagueGet(id: string, acceptLanguage?: string, standing?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TeamSeasonStatistics>>;
    public teamsIdStatisticsLeagueGet(id: string, acceptLanguage?: string, standing?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TeamSeasonStatistics>>;
    public teamsIdStatisticsLeagueGet(id: string, acceptLanguage?: string, standing?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling teamsIdStatisticsLeagueGet.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (standing !== undefined && standing !== null) {
            queryParameters = queryParameters.set('standing', <any>standing);
        }

        let headers = this.defaultHeaders;
        if (acceptLanguage !== undefined && acceptLanguage !== null) {
            headers = headers.set('Accept-Language', String(acceptLanguage));
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<TeamSeasonStatistics>('get',`${this.basePath}/teams/${encodeURIComponent(String(id))}/statistics/league`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get a list of Teams, which are participating in a given TournamentSeason
     * @param id Unique identifier of the TournamentSeason resource
     * @param acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public tournamentsSeasonsIdTeamsGet(id: number, acceptLanguage?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<PartialTeam>>;
    public tournamentsSeasonsIdTeamsGet(id: number, acceptLanguage?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PartialTeam>>>;
    public tournamentsSeasonsIdTeamsGet(id: number, acceptLanguage?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PartialTeam>>>;
    public tournamentsSeasonsIdTeamsGet(id: number, acceptLanguage?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling tournamentsSeasonsIdTeamsGet.');
        }


        let headers = this.defaultHeaders;
        if (acceptLanguage !== undefined && acceptLanguage !== null) {
            headers = headers.set('Accept-Language', String(acceptLanguage));
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<PartialTeam>>('get',`${this.basePath}/tournaments/seasons/${encodeURIComponent(String(id))}/teams`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get a list of Teams, which are participating in a given TournamentSeasonStage
     * @param id Unique identifier of the TournamentSeasonStage resource
     * @param acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public tournamentsSeasonsStagesIdTeamsGet(id: number, acceptLanguage?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<PartialTeam>>;
    public tournamentsSeasonsStagesIdTeamsGet(id: number, acceptLanguage?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PartialTeam>>>;
    public tournamentsSeasonsStagesIdTeamsGet(id: number, acceptLanguage?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PartialTeam>>>;
    public tournamentsSeasonsStagesIdTeamsGet(id: number, acceptLanguage?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling tournamentsSeasonsStagesIdTeamsGet.');
        }


        let headers = this.defaultHeaders;
        if (acceptLanguage !== undefined && acceptLanguage !== null) {
            headers = headers.set('Accept-Language', String(acceptLanguage));
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<PartialTeam>>('get',`${this.basePath}/tournaments/seasons/stages/${encodeURIComponent(String(id))}/teams`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Manually insert team colors by team or event.
     * @param body Team shirt colors data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v2TeamsColorsPost(body?: V2TeamColors, observe?: 'body', reportProgress?: boolean): Observable<V2TeamColors>;
    public v2TeamsColorsPost(body?: V2TeamColors, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<V2TeamColors>>;
    public v2TeamsColorsPost(body?: V2TeamColors, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<V2TeamColors>>;
    public v2TeamsColorsPost(body?: V2TeamColors, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<V2TeamColors>('post',`${this.basePath}/v2/teams/colors`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get teams list
     * @param offset The number of items to skip before starting to collect the result set
     * @param limit Limit the number of results returned
     * @param languageCode Returns translated response based on the language code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v2TeamsGet(offset: number, limit: number, languageCode?: string, observe?: 'body', reportProgress?: boolean): Observable<TeamPageDto>;
    public v2TeamsGet(offset: number, limit: number, languageCode?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TeamPageDto>>;
    public v2TeamsGet(offset: number, limit: number, languageCode?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TeamPageDto>>;
    public v2TeamsGet(offset: number, limit: number, languageCode?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (offset === null || offset === undefined) {
            throw new Error('Required parameter offset was null or undefined when calling v2TeamsGet.');
        }

        if (limit === null || limit === undefined) {
            throw new Error('Required parameter limit was null or undefined when calling v2TeamsGet.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (languageCode !== undefined && languageCode !== null) {
            queryParameters = queryParameters.set('language_code', <any>languageCode);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<TeamPageDto>('get',`${this.basePath}/v2/teams`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get team by id
     * @param id Unique identifier of the resource.
     * @param languageCode Returns translated response based on the language code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v2TeamsIdGet(id: string, languageCode?: string, observe?: 'body', reportProgress?: boolean): Observable<V2TeamProfile>;
    public v2TeamsIdGet(id: string, languageCode?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<V2TeamProfile>>;
    public v2TeamsIdGet(id: string, languageCode?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<V2TeamProfile>>;
    public v2TeamsIdGet(id: string, languageCode?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v2TeamsIdGet.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (languageCode !== undefined && languageCode !== null) {
            queryParameters = queryParameters.set('language_code', <any>languageCode);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<V2TeamProfile>('get',`${this.basePath}/v2/teams/${encodeURIComponent(String(id))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Update Team information
     * @param body Team information to save in persistance
     * @param id Unique identifier of the resource.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v2TeamsIdPut(body: TeamEditDto, id: string, observe?: 'body', reportProgress?: boolean): Observable<V2TeamProfile>;
    public v2TeamsIdPut(body: TeamEditDto, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<V2TeamProfile>>;
    public v2TeamsIdPut(body: TeamEditDto, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<V2TeamProfile>>;
    public v2TeamsIdPut(body: TeamEditDto, id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling v2TeamsIdPut.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v2TeamsIdPut.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<V2TeamProfile>('put',`${this.basePath}/v2/teams/${encodeURIComponent(String(id))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Manually insert team.
     * @param body TeamEditDto object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v2TeamsPost(body?: TeamEditDto, observe?: 'body', reportProgress?: boolean): Observable<V2TeamProfile>;
    public v2TeamsPost(body?: TeamEditDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<V2TeamProfile>>;
    public v2TeamsPost(body?: TeamEditDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<V2TeamProfile>>;
    public v2TeamsPost(body?: TeamEditDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<V2TeamProfile>('post',`${this.basePath}/v2/teams`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
