/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Event } from '../model/event';
import { EventIncident } from '../model/eventIncident';
import { EventPlayer } from '../model/eventPlayer';
import { EventsByDate } from '../model/eventsByDate';
import { Lineup } from '../model/lineup';
import { NotFoundError } from '../model/notFoundError';
import { Odd } from '../model/odd';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class EventsService {

    protected basePath = 'https://false/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Get a list of events by home and away team id
     * @param homeId Filter events with home team id
     * @param awayId Filter events with away team id
     * @param acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public eventsByTeamsGet(homeId: number, awayId: number, acceptLanguage?: string, observe?: 'body', reportProgress?: boolean): Observable<Event>;
    public eventsByTeamsGet(homeId: number, awayId: number, acceptLanguage?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Event>>;
    public eventsByTeamsGet(homeId: number, awayId: number, acceptLanguage?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Event>>;
    public eventsByTeamsGet(homeId: number, awayId: number, acceptLanguage?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (homeId === null || homeId === undefined) {
            throw new Error('Required parameter homeId was null or undefined when calling eventsByTeamsGet.');
        }

        if (awayId === null || awayId === undefined) {
            throw new Error('Required parameter awayId was null or undefined when calling eventsByTeamsGet.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (homeId !== undefined && homeId !== null) {
            queryParameters = queryParameters.set('home_id', <any>homeId);
        }
        if (awayId !== undefined && awayId !== null) {
            queryParameters = queryParameters.set('away_id', <any>awayId);
        }

        let headers = this.defaultHeaders;
        if (acceptLanguage !== undefined && acceptLanguage !== null) {
            headers = headers.set('Accept-Language', String(acceptLanguage));
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Event>('get',`${this.basePath}/events/by_teams`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get a list of Events
     * @param acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param fromTime Filter events, which have a start_time after the specified date, format is RFC 3339
     * @param toTime Filter events, which have a start_time before the specified date, format is RFC 3339
     * @param groupBy Group events by a specified property. Event models are returned as an &#x27;items&#x27; array inside the property object. Can be used to return events in a more convenient format for displaying. NOTE: when using this parameter the response schema changes.
     * @param clientOrder Order matching events for a specific client
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public eventsGet(acceptLanguage?: string, fromTime?: Date, toTime?: Date, groupBy?: string, clientOrder?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Event>>;
    public eventsGet(acceptLanguage?: string, fromTime?: Date, toTime?: Date, groupBy?: string, clientOrder?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Event>>>;
    public eventsGet(acceptLanguage?: string, fromTime?: Date, toTime?: Date, groupBy?: string, clientOrder?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Event>>>;
    public eventsGet(acceptLanguage?: string, fromTime?: Date, toTime?: Date, groupBy?: string, clientOrder?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (fromTime !== undefined && fromTime !== null) {
            queryParameters = queryParameters.set('from_time', <any>fromTime.toISOString());
        }
        if (toTime !== undefined && toTime !== null) {
            queryParameters = queryParameters.set('to_time', <any>toTime.toISOString());
        }
        if (groupBy !== undefined && groupBy !== null) {
            queryParameters = queryParameters.set('group_by', <any>groupBy);
        }
        if (clientOrder !== undefined && clientOrder !== null) {
            queryParameters = queryParameters.set('client_order', <any>clientOrder);
        }

        let headers = this.defaultHeaders;
        if (acceptLanguage !== undefined && acceptLanguage !== null) {
            headers = headers.set('Accept-Language', String(acceptLanguage));
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Event>>('get',`${this.basePath}/events`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id Unique identifier of the resource.
     * @param acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param expand Specifies additional information to include with the standing response
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public eventsIdGet(id: string, acceptLanguage?: string, expand?: string, observe?: 'body', reportProgress?: boolean): Observable<Event>;
    public eventsIdGet(id: string, acceptLanguage?: string, expand?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Event>>;
    public eventsIdGet(id: string, acceptLanguage?: string, expand?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Event>>;
    public eventsIdGet(id: string, acceptLanguage?: string, expand?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling eventsIdGet.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (expand !== undefined && expand !== null) {
            queryParameters = queryParameters.set('expand', <any>expand);
        }

        let headers = this.defaultHeaders;
        if (acceptLanguage !== undefined && acceptLanguage !== null) {
            headers = headers.set('Accept-Language', String(acceptLanguage));
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Event>('get',`${this.basePath}/events/${encodeURIComponent(String(id))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get a list of EventIncident for a specified Event (goal, subs, red cards, penalties, etc).
     * @param id Unique identifier of the resource.
     * @param acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param groupBy Group results by a property. If &#x27;team&#x27; is used the json object has &#x27;home_team&#x27; and &#x27;away_team&#x27;, each containing an array of EventIncident objects
     * @param direction Whether to sort the results by ascending or descending order
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public eventsIdIncidentsGet(id: string, acceptLanguage?: string, groupBy?: string, direction?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<EventIncident>>;
    public eventsIdIncidentsGet(id: string, acceptLanguage?: string, groupBy?: string, direction?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EventIncident>>>;
    public eventsIdIncidentsGet(id: string, acceptLanguage?: string, groupBy?: string, direction?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EventIncident>>>;
    public eventsIdIncidentsGet(id: string, acceptLanguage?: string, groupBy?: string, direction?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling eventsIdIncidentsGet.');
        }




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (groupBy !== undefined && groupBy !== null) {
            queryParameters = queryParameters.set('group_by', <any>groupBy);
        }
        if (direction !== undefined && direction !== null) {
            queryParameters = queryParameters.set('direction', <any>direction);
        }

        let headers = this.defaultHeaders;
        if (acceptLanguage !== undefined && acceptLanguage !== null) {
            headers = headers.set('Accept-Language', String(acceptLanguage));
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<EventIncident>>('get',`${this.basePath}/events/${encodeURIComponent(String(id))}/incidents`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get lineup information for an event. Includes players, formation and coach
     * @param id Event.id for which lineups are requested
     * @param acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public eventsIdLineupsGet(id: number, acceptLanguage?: string, observe?: 'body', reportProgress?: boolean): Observable<Lineup>;
    public eventsIdLineupsGet(id: number, acceptLanguage?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Lineup>>;
    public eventsIdLineupsGet(id: number, acceptLanguage?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Lineup>>;
    public eventsIdLineupsGet(id: number, acceptLanguage?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling eventsIdLineupsGet.');
        }


        let headers = this.defaultHeaders;
        if (acceptLanguage !== undefined && acceptLanguage !== null) {
            headers = headers.set('Accept-Language', String(acceptLanguage));
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Lineup>('get',`${this.basePath}/events/${encodeURIComponent(String(id))}/lineups`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get a list of players which are involved in an Event. The list can be used to build lineups for the teams
     * @param id Unique identifier of the resource.
     * @param acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param groupBy Group results by a property. If &#x27;team&#x27; is used the json object has &#x27;home_team&#x27; and &#x27;away_team&#x27;, each containing an array of EventPlayer objects
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public eventsIdPlayersGet(id: string, acceptLanguage?: string, groupBy?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<EventPlayer>>;
    public eventsIdPlayersGet(id: string, acceptLanguage?: string, groupBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EventPlayer>>>;
    public eventsIdPlayersGet(id: string, acceptLanguage?: string, groupBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EventPlayer>>>;
    public eventsIdPlayersGet(id: string, acceptLanguage?: string, groupBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling eventsIdPlayersGet.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (groupBy !== undefined && groupBy !== null) {
            queryParameters = queryParameters.set('group_by', <any>groupBy);
        }

        let headers = this.defaultHeaders;
        if (acceptLanguage !== undefined && acceptLanguage !== null) {
            headers = headers.set('Accept-Language', String(acceptLanguage));
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<EventPlayer>>('get',`${this.basePath}/events/${encodeURIComponent(String(id))}/players`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get available pre-game odds for an Event
     * @param id Unique identifier of the resource.
     * @param xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#x27;coupon&#x27; key with the odds fo building URLs.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public eventsIdPregameoddsGet(id: string, xOddClient: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Odd>>;
    public eventsIdPregameoddsGet(id: string, xOddClient: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Odd>>>;
    public eventsIdPregameoddsGet(id: string, xOddClient: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Odd>>>;
    public eventsIdPregameoddsGet(id: string, xOddClient: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling eventsIdPregameoddsGet.');
        }

        if (xOddClient === null || xOddClient === undefined) {
            throw new Error('Required parameter xOddClient was null or undefined when calling eventsIdPregameoddsGet.');
        }

        let headers = this.defaultHeaders;
        if (xOddClient !== undefined && xOddClient !== null) {
            headers = headers.set('X-Odd-Client', String(xOddClient));
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Odd>>('get',`${this.basePath}/events/${encodeURIComponent(String(id))}/pregameodds`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get a list of events which are currently live
     * @param acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param groupBy Group events by a specified property. Event models are returned as an &#x27;items&#x27; array inside the property object. Can be used to return events in a more convenient format for displaying. NOTE: when using this parameter the response schema changes.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public eventsLiveGet(acceptLanguage?: string, groupBy?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Event>>;
    public eventsLiveGet(acceptLanguage?: string, groupBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Event>>>;
    public eventsLiveGet(acceptLanguage?: string, groupBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Event>>>;
    public eventsLiveGet(acceptLanguage?: string, groupBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (groupBy !== undefined && groupBy !== null) {
            queryParameters = queryParameters.set('group_by', <any>groupBy);
        }

        let headers = this.defaultHeaders;
        if (acceptLanguage !== undefined && acceptLanguage !== null) {
            headers = headers.set('Accept-Language', String(acceptLanguage));
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Event>>('get',`${this.basePath}/events/live`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get a list of events which have been updated since the specified timestamp
     * @param acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param lastUpdate Filter events, have been updated after the specified date-time. By default will return updated Events during the last hour
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public eventsSinceGet(acceptLanguage?: string, lastUpdate?: Date, observe?: 'body', reportProgress?: boolean): Observable<Array<Event>>;
    public eventsSinceGet(acceptLanguage?: string, lastUpdate?: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Event>>>;
    public eventsSinceGet(acceptLanguage?: string, lastUpdate?: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Event>>>;
    public eventsSinceGet(acceptLanguage?: string, lastUpdate?: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (lastUpdate !== undefined && lastUpdate !== null) {
            queryParameters = queryParameters.set('last_update', <any>lastUpdate.toISOString());
        }

        let headers = this.defaultHeaders;
        if (acceptLanguage !== undefined && acceptLanguage !== null) {
            headers = headers.set('Accept-Language', String(acceptLanguage));
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Event>>('get',`${this.basePath}/events/since`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get a list of matches for team/between teams
     * @param acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param fromStartTime Return matches with start_time &gt;&#x3D; from_start_time. RFC 3339 format
     * @param toStartTime Return matches with start_time &lt;&#x3D; from_start_time. RFC 3339 format
     * @param teamIds List for team IDs separated by commas. In case of one ID, it will return all matches for a selected team, in case of multiple - it will return matches between selected teams.
     * @param matchIds List for match IDs separated by commas.
     * @param tournamentIds List for tournament IDs separated by commas.
     * @param stageIds List for stage IDs separated by commas.
     * @param rounds List for rounds separated by commas.
     * @param seasonIds List for season IDs separated by commas.
     * @param statusTypes List of status types.
     * @param offset Results offset
     * @param limit Results limit
     * @param tournamentOrder Tournament filtering and ordering.
     * @param refereeId Filter matches by referee
     * @param venueId Filter matches by venue
     * @param statusCode Filter matches by event_status.code
     * @param sortDirection Result ordering - asc/desc
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public matchesGet(acceptLanguage?: string, fromStartTime?: Date, toStartTime?: Date, teamIds?: string, matchIds?: string, tournamentIds?: string, stageIds?: string, rounds?: string, seasonIds?: string, statusTypes?: string, offset?: number, limit?: number, tournamentOrder?: string, refereeId?: string, venueId?: string, statusCode?: string, sortDirection?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Event>>;
    public matchesGet(acceptLanguage?: string, fromStartTime?: Date, toStartTime?: Date, teamIds?: string, matchIds?: string, tournamentIds?: string, stageIds?: string, rounds?: string, seasonIds?: string, statusTypes?: string, offset?: number, limit?: number, tournamentOrder?: string, refereeId?: string, venueId?: string, statusCode?: string, sortDirection?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Event>>>;
    public matchesGet(acceptLanguage?: string, fromStartTime?: Date, toStartTime?: Date, teamIds?: string, matchIds?: string, tournamentIds?: string, stageIds?: string, rounds?: string, seasonIds?: string, statusTypes?: string, offset?: number, limit?: number, tournamentOrder?: string, refereeId?: string, venueId?: string, statusCode?: string, sortDirection?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Event>>>;
    public matchesGet(acceptLanguage?: string, fromStartTime?: Date, toStartTime?: Date, teamIds?: string, matchIds?: string, tournamentIds?: string, stageIds?: string, rounds?: string, seasonIds?: string, statusTypes?: string, offset?: number, limit?: number, tournamentOrder?: string, refereeId?: string, venueId?: string, statusCode?: string, sortDirection?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


















        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (fromStartTime !== undefined && fromStartTime !== null) {
            queryParameters = queryParameters.set('from_start_time', <any>fromStartTime.toISOString());
        }
        if (toStartTime !== undefined && toStartTime !== null) {
            queryParameters = queryParameters.set('to_start_time', <any>toStartTime.toISOString());
        }
        if (teamIds !== undefined && teamIds !== null) {
            queryParameters = queryParameters.set('team_ids', <any>teamIds);
        }
        if (matchIds !== undefined && matchIds !== null) {
            queryParameters = queryParameters.set('match_ids', <any>matchIds);
        }
        if (tournamentIds !== undefined && tournamentIds !== null) {
            queryParameters = queryParameters.set('tournament_ids', <any>tournamentIds);
        }
        if (stageIds !== undefined && stageIds !== null) {
            queryParameters = queryParameters.set('stage_ids', <any>stageIds);
        }
        if (rounds !== undefined && rounds !== null) {
            queryParameters = queryParameters.set('rounds', <any>rounds);
        }
        if (seasonIds !== undefined && seasonIds !== null) {
            queryParameters = queryParameters.set('season_ids', <any>seasonIds);
        }
        if (statusTypes !== undefined && statusTypes !== null) {
            queryParameters = queryParameters.set('status_types', <any>statusTypes);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (tournamentOrder !== undefined && tournamentOrder !== null) {
            queryParameters = queryParameters.set('tournament_order', <any>tournamentOrder);
        }
        if (refereeId !== undefined && refereeId !== null) {
            queryParameters = queryParameters.set('referee_id', <any>refereeId);
        }
        if (venueId !== undefined && venueId !== null) {
            queryParameters = queryParameters.set('venue_id', <any>venueId);
        }
        if (statusCode !== undefined && statusCode !== null) {
            queryParameters = queryParameters.set('status_code', <any>statusCode);
        }
        if (sortDirection !== undefined && sortDirection !== null) {
            queryParameters = queryParameters.set('sort_direction', <any>sortDirection);
        }

        let headers = this.defaultHeaders;
        if (acceptLanguage !== undefined && acceptLanguage !== null) {
            headers = headers.set('Accept-Language', String(acceptLanguage));
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Event>>('get',`${this.basePath}/matches`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get a list of events which are fixtures in a given TournamentSeasonStage resource
     * @param id Unique identifier of the TournamentSeasonStage resource
     * @param round Filter the event list by a specific round
     * @param sortDirection Sort results by date in ascending or descending order
     * @param acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public tournamentsSeasonsStagesIdEventsGet(id: number, round?: string, sortDirection?: string, acceptLanguage?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<EventsByDate>>;
    public tournamentsSeasonsStagesIdEventsGet(id: number, round?: string, sortDirection?: string, acceptLanguage?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EventsByDate>>>;
    public tournamentsSeasonsStagesIdEventsGet(id: number, round?: string, sortDirection?: string, acceptLanguage?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EventsByDate>>>;
    public tournamentsSeasonsStagesIdEventsGet(id: number, round?: string, sortDirection?: string, acceptLanguage?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling tournamentsSeasonsStagesIdEventsGet.');
        }




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (round !== undefined && round !== null) {
            queryParameters = queryParameters.set('round', <any>round);
        }
        if (sortDirection !== undefined && sortDirection !== null) {
            queryParameters = queryParameters.set('sort_direction', <any>sortDirection);
        }

        let headers = this.defaultHeaders;
        if (acceptLanguage !== undefined && acceptLanguage !== null) {
            headers = headers.set('Accept-Language', String(acceptLanguage));
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<EventsByDate>>('get',`${this.basePath}/tournaments/seasons/stages/${encodeURIComponent(String(id))}/events`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
