/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("AssetsApi", () => {
  let instance: api.AssetsApi
  beforeEach(function() {
    instance = new api.AssetsApi(config)
  });

  test("v2AssetsDelete", () => {
    const body: Array<api.V2AssetInput> = undefined
    return expect(instance.v2AssetsDelete(body, {})).resolves.toBe(null)
  })
  test("v2AssetsPost", () => {
    const body: Array<api.V2AssetInput> = undefined
    return expect(instance.v2AssetsPost(body, {})).resolves.toBe(null)
  })
})

describe("BlacklistApi", () => {
  let instance: api.BlacklistApi
  beforeEach(function() {
    instance = new api.BlacklistApi(config)
  });

  test("v2BlacklistIdDelete", () => {
    const id: string = "id_example"
    return expect(instance.v2BlacklistIdDelete(id, {})).resolves.toBe(null)
  })
  test("v2BlacklistSearchPost", () => {
    const body: Array<api.BlacklistKeyDto> = undefined
    return expect(instance.v2BlacklistSearchPost(body, {})).resolves.toBe(null)
  })
})

describe("CitiesApi", () => {
  let instance: api.CitiesApi
  beforeEach(function() {
    instance = new api.CitiesApi(config)
  });

  test("v2CitiesIdPut", () => {
    const id: string = "id_example"
    const body: api.CityEditDto = undefined
    return expect(instance.v2CitiesIdPut(id, body, {})).resolves.toBe(null)
  })
  test("v2CitiesPost", () => {
    const body: api.CityEditDto = undefined
    return expect(instance.v2CitiesPost(body, {})).resolves.toBe(null)
  })
})

describe("CoachesApi", () => {
  let instance: api.CoachesApi
  beforeEach(function() {
    instance = new api.CoachesApi(config)
  });

  test("v2CoachesGet", () => {
    const offset: number = 56
    const limit: number = 56
    const languageCode: string = "languageCode_example"
    return expect(instance.v2CoachesGet(offset, limit, languageCode, {})).resolves.toBe(null)
  })
  test("v2CoachesIdGet", () => {
    const id: string = "id_example"
    const languageCode: string = "languageCode_example"
    return expect(instance.v2CoachesIdGet(id, languageCode, {})).resolves.toBe(null)
  })
  test("v2CoachesIdPut", () => {
    const id: string = "id_example"
    const body: api.CoachEditDto = undefined
    return expect(instance.v2CoachesIdPut(id, body, {})).resolves.toBe(null)
  })
  test("v2CoachesPost", () => {
    const body: api.CoachEditDto = undefined
    return expect(instance.v2CoachesPost(body, {})).resolves.toBe(null)
  })
})

describe("CountriesApi", () => {
  let instance: api.CountriesApi
  beforeEach(function() {
    instance = new api.CountriesApi(config)
  });

  test("countriesGet", () => {
    const acceptLanguage: string = "acceptLanguage_example"
    return expect(instance.countriesGet(acceptLanguage, {})).resolves.toBe(null)
  })
})

describe("EventIncidentsApi", () => {
  let instance: api.EventIncidentsApi
  beforeEach(function() {
    instance = new api.EventIncidentsApi(config)
  });

  test("eventIncidentsGet", () => {
    const acceptLanguage: string = "acceptLanguage_example"
    const lastUpdate: Date = 2013-10-20T19:20:30+01:00
    return expect(instance.eventIncidentsGet(acceptLanguage, lastUpdate, {})).resolves.toBe(null)
  })
})

describe("EventPlayerTypeApi", () => {
  let instance: api.EventPlayerTypeApi
  beforeEach(function() {
    instance = new api.EventPlayerTypeApi(config)
  });

  test("eventPlayerTypesGet", () => {
    const acceptLanguage: string = "acceptLanguage_example"
    return expect(instance.eventPlayerTypesGet(acceptLanguage, {})).resolves.toBe(null)
  })
})

describe("EventStatusApi", () => {
  let instance: api.EventStatusApi
  beforeEach(function() {
    instance = new api.EventStatusApi(config)
  });

  test("eventStatusGet", () => {
    const acceptLanguage: string = "acceptLanguage_example"
    return expect(instance.eventStatusGet(acceptLanguage, {})).resolves.toBe(null)
  })
})

describe("EventsApi", () => {
  let instance: api.EventsApi
  beforeEach(function() {
    instance = new api.EventsApi(config)
  });

  test("eventsByTeamsGet", () => {
    const homeId: number = 56
    const awayId: number = 56
    const acceptLanguage: string = "acceptLanguage_example"
    return expect(instance.eventsByTeamsGet(homeId, awayId, acceptLanguage, {})).resolves.toBe(null)
  })
  test("eventsGet", () => {
    const acceptLanguage: string = "acceptLanguage_example"
    const fromTime: Date = 2013-10-20T19:20:30+01:00
    const toTime: Date = 2013-10-20T19:20:30+01:00
    const groupBy: string = "groupBy_example"
    const clientOrder: string = "clientOrder_example"
    return expect(instance.eventsGet(acceptLanguage, fromTime, toTime, groupBy, clientOrder, {})).resolves.toBe(null)
  })
  test("eventsIdGet", () => {
    const id: string = "id_example"
    const acceptLanguage: string = "acceptLanguage_example"
    const expand: string = "expand_example"
    return expect(instance.eventsIdGet(id, acceptLanguage, expand, {})).resolves.toBe(null)
  })
  test("eventsIdIncidentsGet", () => {
    const id: string = "id_example"
    const acceptLanguage: string = "acceptLanguage_example"
    const groupBy: string = "groupBy_example"
    const direction: string = "direction_example"
    return expect(instance.eventsIdIncidentsGet(id, acceptLanguage, groupBy, direction, {})).resolves.toBe(null)
  })
  test("eventsIdLineupsGet", () => {
    const id: number = 56
    const acceptLanguage: string = "acceptLanguage_example"
    return expect(instance.eventsIdLineupsGet(id, acceptLanguage, {})).resolves.toBe(null)
  })
  test("eventsIdPlayersGet", () => {
    const id: string = "id_example"
    const acceptLanguage: string = "acceptLanguage_example"
    const groupBy: string = "groupBy_example"
    return expect(instance.eventsIdPlayersGet(id, acceptLanguage, groupBy, {})).resolves.toBe(null)
  })
  test("eventsIdPregameoddsGet", () => {
    const id: string = "id_example"
    const xOddClient: string = "xOddClient_example"
    return expect(instance.eventsIdPregameoddsGet(id, xOddClient, {})).resolves.toBe(null)
  })
  test("eventsLiveGet", () => {
    const acceptLanguage: string = "acceptLanguage_example"
    const groupBy: string = "groupBy_example"
    return expect(instance.eventsLiveGet(acceptLanguage, groupBy, {})).resolves.toBe(null)
  })
  test("eventsSinceGet", () => {
    const acceptLanguage: string = "acceptLanguage_example"
    const lastUpdate: Date = 2013-10-20T19:20:30+01:00
    return expect(instance.eventsSinceGet(acceptLanguage, lastUpdate, {})).resolves.toBe(null)
  })
  test("matchesGet", () => {
    const acceptLanguage: string = "acceptLanguage_example"
    const fromStartTime: Date = 2013-10-20T19:20:30+01:00
    const toStartTime: Date = 2013-10-20T19:20:30+01:00
    const teamIds: string = "teamIds_example"
    const matchIds: string = "matchIds_example"
    const tournamentIds: string = "tournamentIds_example"
    const stageIds: string = "stageIds_example"
    const rounds: string = "rounds_example"
    const seasonIds: string = "seasonIds_example"
    const statusTypes: string = "statusTypes_example"
    const offset: number = 56
    const limit: number = 56
    const tournamentOrder: string = "tournamentOrder_example"
    const refereeId: string = "refereeId_example"
    const venueId: string = "venueId_example"
    const statusCode: string = "statusCode_example"
    const sortDirection: string = "sortDirection_example"
    return expect(instance.matchesGet(acceptLanguage, fromStartTime, toStartTime, teamIds, matchIds, tournamentIds, stageIds, rounds, seasonIds, statusTypes, offset, limit, tournamentOrder, refereeId, venueId, statusCode, sortDirection, {})).resolves.toBe(null)
  })
  test("tournamentsSeasonsStagesIdEventsGet", () => {
    const id: number = 56
    const round: string = "round_example"
    const sortDirection: string = "sortDirection_example"
    const acceptLanguage: string = "acceptLanguage_example"
    return expect(instance.tournamentsSeasonsStagesIdEventsGet(id, round, sortDirection, acceptLanguage, {})).resolves.toBe(null)
  })
})

describe("KnockoutSchemeApi", () => {
  let instance: api.KnockoutSchemeApi
  beforeEach(function() {
    instance = new api.KnockoutSchemeApi(config)
  });

  test("v2KnockoutSchemesStageIdGet", () => {
    const stageId: string = "stageId_example"
    const languageCode: string = "languageCode_example"
    return expect(instance.v2KnockoutSchemesStageIdGet(stageId, languageCode, {})).resolves.toBe(null)
  })
})

describe("LanguagesApi", () => {
  let instance: api.LanguagesApi
  beforeEach(function() {
    instance = new api.LanguagesApi(config)
  });

  test("v2LanguagesGet", () => {
    return expect(instance.v2LanguagesGet({})).resolves.toBe(null)
  })
})

describe("LineupsApi", () => {
  let instance: api.LineupsApi
  beforeEach(function() {
    instance = new api.LineupsApi(config)
  });

  test("lineupsGet", () => {
    const acceptLanguage: string = "acceptLanguage_example"
    const lastUpdate: Date = 2013-10-20T19:20:30+01:00
    return expect(instance.lineupsGet(acceptLanguage, lastUpdate, {})).resolves.toBe(null)
  })
  test("v2MatchesIdLineupsGet", () => {
    const id: string = "id_example"
    const languageCode: string = "languageCode_example"
    return expect(instance.v2MatchesIdLineupsGet(id, languageCode, {})).resolves.toBe(null)
  })
  test("v2MatchesIdLineupsPut", () => {
    const body: api.V2LineupInput = undefined
    const id: string = "id_example"
    return expect(instance.v2MatchesIdLineupsPut(body, id, {})).resolves.toBe(null)
  })
})

describe("MappingsApi", () => {
  let instance: api.MappingsApi
  beforeEach(function() {
    instance = new api.MappingsApi(config)
  });

  test("mappingsSportalGet", () => {
    const object: string = "object_example"
    const id: number = 56
    return expect(instance.mappingsSportalGet(object, id, {})).resolves.toBe(null)
  })
  test("mappingsSportalReverseGet", () => {
    const object: string = "object_example"
    const id: number = 56
    return expect(instance.mappingsSportalReverseGet(object, id, {})).resolves.toBe(null)
  })
})

describe("MatchEventsApi", () => {
  let instance: api.MatchEventsApi
  beforeEach(function() {
    instance = new api.MatchEventsApi(config)
  });

  test("v2MatchesIdEventsGet", () => {
    const id: string = "id_example"
    const languageCode: string = "languageCode_example"
    return expect(instance.v2MatchesIdEventsGet(id, languageCode, {})).resolves.toBe(null)
  })
  test("v2MatchesIdEventsPut", () => {
    const body: api.V2MatchEventInputWrapper = undefined
    const id: string = "id_example"
    return expect(instance.v2MatchesIdEventsPut(body, id, {})).resolves.toBe(null)
  })
})

describe("MatchesApi", () => {
  let instance: api.MatchesApi
  beforeEach(function() {
    instance = new api.MatchesApi(config)
  });

  test("matchesIdCommentaryGet", () => {
    const id: string = "id_example"
    const languageCode: string = "languageCode_example"
    return expect(instance.matchesIdCommentaryGet(id, languageCode, {})).resolves.toBe(null)
  })
  test("v2MatchesGet", () => {
    const limit: number = 56
    const offset: number = 56
    const tournamentIds: Array<number> = undefined
    const seasonIds: Array<number> = undefined
    const stageIds: Array<number> = undefined
    const groupIds: Array<number> = undefined
    const roundIds: Array<string> = undefined
    const roundFilter: Array<string> = undefined
    const fromKickoffTime: Date = 2013-10-20T19:20:30+01:00
    const toKickoffTime: Date = 2013-10-20T19:20:30+01:00
    const teamIds: Array<number> = undefined
    const statusTypes: Array<string> = undefined
    const statusCodes: Array<string> = undefined
    const refereeId: number = 56
    const venueId: string = "venueId_example"
    const sortDirection: string = "sortDirection_example"
    return expect(instance.v2MatchesGet(limit, offset, tournamentIds, seasonIds, stageIds, groupIds, roundIds, roundFilter, fromKickoffTime, toKickoffTime, teamIds, statusTypes, statusCodes, refereeId, venueId, sortDirection, {})).resolves.toBe(null)
  })
  test("v2MatchesIdGet", () => {
    const id: string = "id_example"
    const languageCode: string = "languageCode_example"
    return expect(instance.v2MatchesIdGet(id, languageCode, {})).resolves.toBe(null)
  })
  test("v2MatchesIdPut", () => {
    const body: api.V2MatchInput = undefined
    const id: string = "id_example"
    return expect(instance.v2MatchesIdPut(body, id, {})).resolves.toBe(null)
  })
  test("v2MatchesLivescoreGet", () => {
    const matchIds: Array<number> = undefined
    const date: string = 2013-10-20
    const utcOffset: number = 3.4
    const tournamentGroup: string = "tournamentGroup_example"
    const statusTypes: Array<string> = undefined
    const selectionFilter: string = "selectionFilter_example"
    return expect(instance.v2MatchesLivescoreGet(matchIds, date, utcOffset, tournamentGroup, statusTypes, selectionFilter, {})).resolves.toBe(null)
  })
  test("v2MatchesPost", () => {
    const body: api.V2MatchInput = undefined
    return expect(instance.v2MatchesPost(body, {})).resolves.toBe(null)
  })
})

describe("OddsApi", () => {
  let instance: api.OddsApi
  beforeEach(function() {
    instance = new api.OddsApi(config)
  });

  test("eventsIdLiveoddsGet", () => {
    const id: string = "id_example"
    const xOddClient: string = "xOddClient_example"
    return expect(instance.eventsIdLiveoddsGet(id, xOddClient, {})).resolves.toBe(null)
  })
  test("eventsIdOddsGet", () => {
    const id: string = "id_example"
    const xOddClient: string = "xOddClient_example"
    return expect(instance.eventsIdOddsGet(id, xOddClient, {})).resolves.toBe(null)
  })
  test("eventsIdPregameoddsGet", () => {
    const id: string = "id_example"
    const xOddClient: string = "xOddClient_example"
    return expect(instance.eventsIdPregameoddsGet(id, xOddClient, {})).resolves.toBe(null)
  })
  test("liveoddsGet", () => {
    const xOddClient: string = "xOddClient_example"
    return expect(instance.liveoddsGet(xOddClient, {})).resolves.toBe(null)
  })
  test("oddProvidersGet", () => {
    const xOddClient: string = "xOddClient_example"
    return expect(instance.oddProvidersGet(xOddClient, {})).resolves.toBe(null)
  })
  test("oddsGet", () => {
    const oddClient: string = "oddClient_example"
    const sportType: string = "sportType_example"
    const eventType: string = "eventType_example"
    const fromEventStartTime: Date = 2013-10-20T19:20:30+01:00
    const toEventStartTime: Date = 2013-10-20T19:20:30+01:00
    const teamId: number = 56
    const teamIds: string = "teamIds_example"
    const eventOrder: string = "eventOrder_example"
    const matchIds: string = "matchIds_example"
    const tournamentIds: string = "tournamentIds_example"
    const seasonIds: string = "seasonIds_example"
    const oddsType: string = "oddsType_example"
    return expect(instance.oddsGet(oddClient, sportType, eventType, fromEventStartTime, toEventStartTime, teamId, teamIds, eventOrder, matchIds, tournamentIds, seasonIds, oddsType, {})).resolves.toBe(null)
  })
  test("pregameoddsGet", () => {
    const xOddClient: string = "xOddClient_example"
    const fromTime: Date = 2013-10-20T19:20:30+01:00
    const toTime: Date = 2013-10-20T19:20:30+01:00
    return expect(instance.pregameoddsGet(xOddClient, fromTime, toTime, {})).resolves.toBe(null)
  })
})

describe("PlayerStatisticApi", () => {
  let instance: api.PlayerStatisticApi
  beforeEach(function() {
    instance = new api.PlayerStatisticApi(config)
  });

  test("statisticsPlayersGet", () => {
    const languageCode: string = "languageCode_example"
    const playerIds: string = "playerIds_example"
    const seasonIds: string = "seasonIds_example"
    const teamId: number = 56
    return expect(instance.statisticsPlayersGet(languageCode, playerIds, seasonIds, teamId, {})).resolves.toBe(null)
  })
  test("v2StatisticsPlayersMatchPut", () => {
    const body: Array<api.V2PlayerStatisticInput> = undefined
    return expect(instance.v2StatisticsPlayersMatchPut(body, {})).resolves.toBe(null)
  })
  test("v2StatisticsPlayersSeasonGet", () => {
    const playerIds: string = "playerIds_example"
    const seasonIds: string = "seasonIds_example"
    const teamId: number = 56
    const languageCode: string = "languageCode_example"
    return expect(instance.v2StatisticsPlayersSeasonGet(playerIds, seasonIds, teamId, languageCode, {})).resolves.toBe(null)
  })
})

describe("PlayersApi", () => {
  let instance: api.PlayersApi
  beforeEach(function() {
    instance = new api.PlayersApi(config)
  });

  test("playersGet", () => {
    const name: string = "name_example"
    const acceptLanguage: string = "acceptLanguage_example"
    const maxResults: number = 56
    const teamId: number = 56
    return expect(instance.playersGet(name, acceptLanguage, maxResults, teamId, {})).resolves.toBe(null)
  })
  test("playersIdGet", () => {
    const id: string = "id_example"
    const acceptLanguage: string = "acceptLanguage_example"
    const expand: string = "expand_example"
    return expect(instance.playersIdGet(id, acceptLanguage, expand, {})).resolves.toBe(null)
  })
  test("playersIdStatisticsGet", () => {
    const id: string = "id_example"
    const acceptLanguage: string = "acceptLanguage_example"
    const type: string = "type_example"
    const groupBy: string = "groupBy_example"
    return expect(instance.playersIdStatisticsGet(id, acceptLanguage, type, groupBy, {})).resolves.toBe(null)
  })
  test("playersIdTeamsGet", () => {
    const id: string = "id_example"
    const acceptLanguage: string = "acceptLanguage_example"
    return expect(instance.playersIdTeamsGet(id, acceptLanguage, {})).resolves.toBe(null)
  })
  test("v2PlayersGet", () => {
    const offset: number = 56
    const limit: number = 56
    const languageCode: string = "languageCode_example"
    return expect(instance.v2PlayersGet(offset, limit, languageCode, {})).resolves.toBe(null)
  })
  test("v2PlayersIdClubsActivePut", () => {
    const id: string = "id_example"
    const body: api.V2ActiveClubsInput = undefined
    return expect(instance.v2PlayersIdClubsActivePut(id, body, {})).resolves.toBe(null)
  })
  test("v2PlayersIdGet", () => {
    const id: string = "id_example"
    const languageCode: string = "languageCode_example"
    return expect(instance.v2PlayersIdGet(id, languageCode, {})).resolves.toBe(null)
  })
  test("v2PlayersIdPut", () => {
    const body: api.PlayerEditDto = undefined
    const id: string = "id_example"
    return expect(instance.v2PlayersIdPut(body, id, {})).resolves.toBe(null)
  })
  test("v2PlayersPost", () => {
    const body: api.PlayerEditDto = undefined
    return expect(instance.v2PlayersPost(body, {})).resolves.toBe(null)
  })
})

describe("PresidentsApi", () => {
  let instance: api.PresidentsApi
  beforeEach(function() {
    instance = new api.PresidentsApi(config)
  });

  test("v2PresidentsIdPut", () => {
    const id: string = "id_example"
    const body: api.V2PresidentUpdate = undefined
    return expect(instance.v2PresidentsIdPut(id, body, {})).resolves.toBe(null)
  })
  test("v2PresidentsPost", () => {
    const body: api.V2PresidentInput = undefined
    return expect(instance.v2PresidentsPost(body, {})).resolves.toBe(null)
  })
})

describe("ProviderMappingsApi", () => {
  let instance: api.ProviderMappingsApi
  beforeEach(function() {
    instance = new api.ProviderMappingsApi(config)
  });

  test("v2MappingsSearchPost", () => {
    const body: api.MappingsSearchBody = undefined
    return expect(instance.v2MappingsSearchPost(body, {})).resolves.toBe(null)
  })
})

describe("RefereesApi", () => {
  let instance: api.RefereesApi
  beforeEach(function() {
    instance = new api.RefereesApi(config)
  });

  test("v2RefereesGet", () => {
    const offset: number = 56
    const limit: number = 56
    const seasonIds: string = "seasonIds_example"
    const languageCode: string = "languageCode_example"
    return expect(instance.v2RefereesGet(offset, limit, seasonIds, languageCode, {})).resolves.toBe(null)
  })
  test("v2RefereesIdGet", () => {
    const id: string = "id_example"
    const languageCode: string = "languageCode_example"
    return expect(instance.v2RefereesIdGet(id, languageCode, {})).resolves.toBe(null)
  })
  test("v2RefereesIdPut", () => {
    const id: string = "id_example"
    const body: api.RefereeEditDto = undefined
    return expect(instance.v2RefereesIdPut(id, body, {})).resolves.toBe(null)
  })
  test("v2RefereesPost", () => {
    const body: api.RefereeEditDto = undefined
    return expect(instance.v2RefereesPost(body, {})).resolves.toBe(null)
  })
})

describe("RoundsApi", () => {
  let instance: api.RoundsApi
  beforeEach(function() {
    instance = new api.RoundsApi(config)
  });

  test("v2RoundsGet", () => {
    const seasonId: number = 56
    const languageCode: string = "languageCode_example"
    return expect(instance.v2RoundsGet(seasonId, languageCode, {})).resolves.toBe(null)
  })
  test("v2StagesIdRoundsGet", () => {
    const id: string = "id_example"
    const languageCode: string = "languageCode_example"
    return expect(instance.v2StagesIdRoundsGet(id, languageCode, {})).resolves.toBe(null)
  })
})

describe("SeasonApi", () => {
  let instance: api.SeasonApi
  beforeEach(function() {
    instance = new api.SeasonApi(config)
  });

  test("v2SeasonsDetailsGet", () => {
    const seasonId: string = "seasonId_example"
    const tournamentId: string = "tournamentId_example"
    const status: string = "status_example"
    const languageCode: string = "languageCode_example"
    return expect(instance.v2SeasonsDetailsGet(seasonId, tournamentId, status, languageCode, {})).resolves.toBe(null)
  })
  test("v2SeasonsGet", () => {
    const tournamentId: string = "tournamentId_example"
    const teamId: string = "teamId_example"
    const status: string = "status_example"
    const languageCode: string = "languageCode_example"
    return expect(instance.v2SeasonsGet(tournamentId, teamId, status, languageCode, {})).resolves.toBe(null)
  })
  test("v2SeasonsIdPut", () => {
    const body: api.V2TournamentSeasonUpdateInput = undefined
    const id: string = "id_example"
    return expect(instance.v2SeasonsIdPut(body, id, {})).resolves.toBe(null)
  })
  test("v2SeasonsIdStagesGet", () => {
    const id: string = "id_example"
    const languageCode: string = "languageCode_example"
    return expect(instance.v2SeasonsIdStagesGet(id, languageCode, {})).resolves.toBe(null)
  })
  test("v2SeasonsIdStagesPost", () => {
    const body: Array<api.V2SeasonStage> = undefined
    const id: string = "id_example"
    return expect(instance.v2SeasonsIdStagesPost(body, id, {})).resolves.toBe(null)
  })
  test("v2SeasonsPost", () => {
    const body: api.V2TournamentSeasonInsertInput = undefined
    return expect(instance.v2SeasonsPost(body, {})).resolves.toBe(null)
  })
  test("v2StagesIdDelete", () => {
    const id: string = "id_example"
    return expect(instance.v2StagesIdDelete(id, {})).resolves.toBe(null)
  })
  test("v2TournamentsIdSeasonsCurrentPatch", () => {
    const body: api.V2TournamentSeasonStatusInput = undefined
    const id: string = "id_example"
    return expect(instance.v2TournamentsIdSeasonsCurrentPatch(body, id, {})).resolves.toBe(null)
  })
})

describe("StagesApi", () => {
  let instance: api.StagesApi
  beforeEach(function() {
    instance = new api.StagesApi(config)
  });

  test("stagesGet", () => {
    const teamId: number = 56
    const tournamentIds: string = "tournamentIds_example"
    const acceptLanguage: string = "acceptLanguage_example"
    return expect(instance.stagesGet(teamId, tournamentIds, acceptLanguage, {})).resolves.toBe(null)
  })
  test("v2GroupsIdDelete", () => {
    const id: string = "id_example"
    return expect(instance.v2GroupsIdDelete(id, {})).resolves.toBe(null)
  })
  test("v2StagesIdGroupsGet", () => {
    const id: string = "id_example"
    const languageCode: string = "languageCode_example"
    return expect(instance.v2StagesIdGroupsGet(id, languageCode, {})).resolves.toBe(null)
  })
  test("v2StagesIdGroupsPost", () => {
    const body: Array<api.V2StageGroup> = undefined
    const id: string = "id_example"
    return expect(instance.v2StagesIdGroupsPost(body, id, {})).resolves.toBe(null)
  })
  test("v2StagesIdTeamsPut", () => {
    const body: Array<api.V2StageTeamInput> = undefined
    const id: string = "id_example"
    return expect(instance.v2StagesIdTeamsPut(body, id, {})).resolves.toBe(null)
  })
})

describe("StandingRuleApi", () => {
  let instance: api.StandingRuleApi
  beforeEach(function() {
    instance = new api.StandingRuleApi(config)
  });

  test("standingRulesGet", () => {
    const acceptLanguage: string = "acceptLanguage_example"
    return expect(instance.standingRulesGet(acceptLanguage, {})).resolves.toBe(null)
  })
})

describe("StandingsApi", () => {
  let instance: api.StandingsApi
  beforeEach(function() {
    instance = new api.StandingsApi(config)
  });

  test("v2StandingsLeagueEntityIdPut", () => {
    const body: api.V2LeagueStandingInput = undefined
    const entity: string = "entity_example"
    const id: string = "id_example"
    return expect(instance.v2StandingsLeagueEntityIdPut(body, entity, id, {})).resolves.toBe(null)
  })
  test("v2StandingsLeagueEntityIdRulesPut", () => {
    const body: api.V2StandingEntryRuleWrapper = undefined
    const entity: string = "entity_example"
    const id: string = "id_example"
    return expect(instance.v2StandingsLeagueEntityIdRulesPut(body, entity, id, {})).resolves.toBe(null)
  })
  test("v2StandingsTopscorerEntityIdPut", () => {
    const body: api.V2TopScorerStandingInput = undefined
    const entity: string = "entity_example"
    const id: string = "id_example"
    return expect(instance.v2StandingsTopscorerEntityIdPut(body, entity, id, {})).resolves.toBe(null)
  })
})

describe("TeamSquadApi", () => {
  let instance: api.TeamSquadApi
  beforeEach(function() {
    instance = new api.TeamSquadApi(config)
  });

  test("v2TeamsIdSquadGet", () => {
    const id: string = "id_example"
    const memberStatus: string = "memberStatus_example"
    const languageCode: string = "languageCode_example"
    return expect(instance.v2TeamsIdSquadGet(id, memberStatus, languageCode, {})).resolves.toBe(null)
  })
  test("v2TeamsIdSquadPatch", () => {
    const body: api.V2TeamSquadInput = undefined
    const id: string = "id_example"
    return expect(instance.v2TeamsIdSquadPatch(body, id, {})).resolves.toBe(null)
  })
})

describe("TeamStatsApi", () => {
  let instance: api.TeamStatsApi
  beforeEach(function() {
    instance = new api.TeamStatsApi(config)
  });

  test("eventTeamstatsGet", () => {
    const acceptLanguage: string = "acceptLanguage_example"
    const lastUpdate: Date = 2013-10-20T19:20:30+01:00
    return expect(instance.eventTeamstatsGet(acceptLanguage, lastUpdate, {})).resolves.toBe(null)
  })
  test("eventsIdTeamstatsGet", () => {
    const id: number = 56
    const acceptLanguage: string = "acceptLanguage_example"
    return expect(instance.eventsIdTeamstatsGet(id, acceptLanguage, {})).resolves.toBe(null)
  })
})

describe("TeamsApi", () => {
  let instance: api.TeamsApi
  beforeEach(function() {
    instance = new api.TeamsApi(config)
  });

  test("countriesIdTeamsGet", () => {
    const id: string = "id_example"
    const acceptLanguage: string = "acceptLanguage_example"
    const national: string = "national_example"
    return expect(instance.countriesIdTeamsGet(id, acceptLanguage, national, {})).resolves.toBe(null)
  })
  test("teamsGet", () => {
    const name: string = "name_example"
    const acceptLanguage: string = "acceptLanguage_example"
    const maxResults: number = 56
    const countryId: number = 56
    return expect(instance.teamsGet(name, acceptLanguage, maxResults, countryId, {})).resolves.toBe(null)
  })
  test("teamsIdEventsGet", () => {
    const id: string = "id_example"
    const acceptLanguage: string = "acceptLanguage_example"
    const fromTime: Date = 2013-10-20T19:20:30+01:00
    const toTime: Date = 2013-10-20T19:20:30+01:00
    const direction: string = "direction_example"
    const tournamentSeasonStageId: number = 56
    return expect(instance.teamsIdEventsGet(id, acceptLanguage, fromTime, toTime, direction, tournamentSeasonStageId, {})).resolves.toBe(null)
  })
  test("teamsIdFormGet", () => {
    const id: string = "id_example"
    const acceptLanguage: string = "acceptLanguage_example"
    const expand: string = "expand_example"
    return expect(instance.teamsIdFormGet(id, acceptLanguage, expand, {})).resolves.toBe(null)
  })
  test("teamsIdGet", () => {
    const id: string = "id_example"
    const acceptLanguage: string = "acceptLanguage_example"
    const expand: string = "expand_example"
    return expect(instance.teamsIdGet(id, acceptLanguage, expand, {})).resolves.toBe(null)
  })
  test("teamsIdPlayersGet", () => {
    const id: string = "id_example"
    const acceptLanguage: string = "acceptLanguage_example"
    const groupBy: string = "groupBy_example"
    return expect(instance.teamsIdPlayersGet(id, acceptLanguage, groupBy, {})).resolves.toBe(null)
  })
  test("teamsIdPlayersStatisticsGet", () => {
    const id: string = "id_example"
    const acceptLanguage: string = "acceptLanguage_example"
    const groupBy: string = "groupBy_example"
    return expect(instance.teamsIdPlayersStatisticsGet(id, acceptLanguage, groupBy, {})).resolves.toBe(null)
  })
  test("teamsIdPlayersStatisticsSeasonsGet", () => {
    const id: string = "id_example"
    const acceptLanguage: string = "acceptLanguage_example"
    return expect(instance.teamsIdPlayersStatisticsSeasonsGet(id, acceptLanguage, {})).resolves.toBe(null)
  })
  test("teamsIdPlayersStatisticsSeasonsSeasonIdGet", () => {
    const seasonId: number = 56
    const id: string = "id_example"
    const acceptLanguage: string = "acceptLanguage_example"
    const groupBy: string = "groupBy_example"
    return expect(instance.teamsIdPlayersStatisticsSeasonsSeasonIdGet(seasonId, id, acceptLanguage, groupBy, {})).resolves.toBe(null)
  })
  test("teamsIdStatisticsLeagueGet", () => {
    const id: string = "id_example"
    const acceptLanguage: string = "acceptLanguage_example"
    const standing: string = "standing_example"
    return expect(instance.teamsIdStatisticsLeagueGet(id, acceptLanguage, standing, {})).resolves.toBe(null)
  })
  test("tournamentsSeasonsIdTeamsGet", () => {
    const id: number = 56
    const acceptLanguage: string = "acceptLanguage_example"
    return expect(instance.tournamentsSeasonsIdTeamsGet(id, acceptLanguage, {})).resolves.toBe(null)
  })
  test("tournamentsSeasonsStagesIdTeamsGet", () => {
    const id: number = 56
    const acceptLanguage: string = "acceptLanguage_example"
    return expect(instance.tournamentsSeasonsStagesIdTeamsGet(id, acceptLanguage, {})).resolves.toBe(null)
  })
  test("v2TeamsColorsPost", () => {
    const body: api.V2TeamColors = undefined
    return expect(instance.v2TeamsColorsPost(body, {})).resolves.toBe(null)
  })
  test("v2TeamsGet", () => {
    const offset: number = 56
    const limit: number = 56
    const languageCode: string = "languageCode_example"
    return expect(instance.v2TeamsGet(offset, limit, languageCode, {})).resolves.toBe(null)
  })
  test("v2TeamsIdGet", () => {
    const id: string = "id_example"
    const languageCode: string = "languageCode_example"
    return expect(instance.v2TeamsIdGet(id, languageCode, {})).resolves.toBe(null)
  })
  test("v2TeamsIdPut", () => {
    const body: api.TeamEditDto = undefined
    const id: string = "id_example"
    return expect(instance.v2TeamsIdPut(body, id, {})).resolves.toBe(null)
  })
  test("v2TeamsPost", () => {
    const body: api.TeamEditDto = undefined
    return expect(instance.v2TeamsPost(body, {})).resolves.toBe(null)
  })
})

describe("TournamentGroupsApi", () => {
  let instance: api.TournamentGroupsApi
  beforeEach(function() {
    instance = new api.TournamentGroupsApi(config)
  });

  test("v2TournamentsGroupsCodeGet", () => {
    const code: string = "code_example"
    return expect(instance.v2TournamentsGroupsCodeGet(code, {})).resolves.toBe(null)
  })
  test("v2TournamentsGroupsCodePut", () => {
    const body: api.V2TournamentGroupUpdateInput = undefined
    const code: string = "code_example"
    return expect(instance.v2TournamentsGroupsCodePut(body, code, {})).resolves.toBe(null)
  })
  test("v2TournamentsGroupsCodeSelectionDatePost", () => {
    const code: string = "code_example"
    const date: string = 2013-10-20
    const body: Array<api.V2TournamentGroupSelection> = undefined
    return expect(instance.v2TournamentsGroupsCodeSelectionDatePost(code, date, body, {})).resolves.toBe(null)
  })
  test("v2TournamentsGroupsGet", () => {
    return expect(instance.v2TournamentsGroupsGet({})).resolves.toBe(null)
  })
  test("v2TournamentsGroupsPost", () => {
    const body: api.V2TournamentGroupInsertInput = undefined
    return expect(instance.v2TournamentsGroupsPost(body, {})).resolves.toBe(null)
  })
})

describe("TournamentsApi", () => {
  let instance: api.TournamentsApi
  beforeEach(function() {
    instance = new api.TournamentsApi(config)
  });

  test("tournamentsGet", () => {
    const acceptLanguage: string = "acceptLanguage_example"
    const countryId: number = 56
    const clientOrder: string = "clientOrder_example"
    const expandClientSortorder: string = "expandClientSortorder_example"
    return expect(instance.tournamentsGet(acceptLanguage, countryId, clientOrder, expandClientSortorder, {})).resolves.toBe(null)
  })
  test("tournamentsIdGet", () => {
    const id: string = "id_example"
    const acceptLanguage: string = "acceptLanguage_example"
    return expect(instance.tournamentsIdGet(id, acceptLanguage, {})).resolves.toBe(null)
  })
  test("tournamentsIdSeasonsGet", () => {
    const id: string = "id_example"
    const acceptLanguage: string = "acceptLanguage_example"
    return expect(instance.tournamentsIdSeasonsGet(id, acceptLanguage, {})).resolves.toBe(null)
  })
  test("tournamentsIdSeasonsLatestGet", () => {
    const id: number = 56
    const acceptLanguage: string = "acceptLanguage_example"
    return expect(instance.tournamentsIdSeasonsLatestGet(id, acceptLanguage, {})).resolves.toBe(null)
  })
  test("tournamentsSeasonsIdCardlistGet", () => {
    const id: number = 56
    const acceptLanguage: string = "acceptLanguage_example"
    return expect(instance.tournamentsSeasonsIdCardlistGet(id, acceptLanguage, {})).resolves.toBe(null)
  })
  test("tournamentsSeasonsIdEventsGet", () => {
    const id: number = 56
    const acceptLanguage: string = "acceptLanguage_example"
    const groupBy: string = "groupBy_example"
    return expect(instance.tournamentsSeasonsIdEventsGet(id, acceptLanguage, groupBy, {})).resolves.toBe(null)
  })
  test("tournamentsSeasonsIdGet", () => {
    const id: number = 56
    const acceptLanguage: string = "acceptLanguage_example"
    return expect(instance.tournamentsSeasonsIdGet(id, acceptLanguage, {})).resolves.toBe(null)
  })
  test("tournamentsSeasonsIdTeamsGet", () => {
    const id: number = 56
    const acceptLanguage: string = "acceptLanguage_example"
    return expect(instance.tournamentsSeasonsIdTeamsGet(id, acceptLanguage, {})).resolves.toBe(null)
  })
  test("tournamentsSeasonsIdTopscorerGet", () => {
    const id: number = 56
    const acceptLanguage: string = "acceptLanguage_example"
    return expect(instance.tournamentsSeasonsIdTopscorerGet(id, acceptLanguage, {})).resolves.toBe(null)
  })
  test("tournamentsSeasonsStagesActiveGet", () => {
    return expect(instance.tournamentsSeasonsStagesActiveGet({})).resolves.toBe(null)
  })
  test("tournamentsSeasonsStagesGroupsIdGet", () => {
    const id: number = 56
    const expand: string = "expand_example"
    const acceptLanguage: string = "acceptLanguage_example"
    return expect(instance.tournamentsSeasonsStagesGroupsIdGet(id, expand, acceptLanguage, {})).resolves.toBe(null)
  })
  test("tournamentsSeasonsStagesGroupsIdStandingGet", () => {
    const id: number = 56
    const expand: string = "expand_example"
    const acceptLanguage: string = "acceptLanguage_example"
    return expect(instance.tournamentsSeasonsStagesGroupsIdStandingGet(id, expand, acceptLanguage, {})).resolves.toBe(null)
  })
  test("tournamentsSeasonsStagesIdEventsGet", () => {
    const id: number = 56
    const round: string = "round_example"
    const sortDirection: string = "sortDirection_example"
    const acceptLanguage: string = "acceptLanguage_example"
    return expect(instance.tournamentsSeasonsStagesIdEventsGet(id, round, sortDirection, acceptLanguage, {})).resolves.toBe(null)
  })
  test("tournamentsSeasonsStagesIdGet", () => {
    const id: number = 56
    const expand: string = "expand_example"
    const acceptLanguage: string = "acceptLanguage_example"
    return expect(instance.tournamentsSeasonsStagesIdGet(id, expand, acceptLanguage, {})).resolves.toBe(null)
  })
  test("tournamentsSeasonsStagesIdRoundsGet", () => {
    const id: number = 56
    const expand: string = "expand_example"
    return expect(instance.tournamentsSeasonsStagesIdRoundsGet(id, expand, {})).resolves.toBe(null)
  })
  test("tournamentsSeasonsStagesIdStandingGet", () => {
    const id: number = 56
    const expand: string = "expand_example"
    const acceptLanguage: string = "acceptLanguage_example"
    return expect(instance.tournamentsSeasonsStagesIdStandingGet(id, expand, acceptLanguage, {})).resolves.toBe(null)
  })
  test("tournamentsSeasonsStagesIdTeamsGet", () => {
    const id: number = 56
    const acceptLanguage: string = "acceptLanguage_example"
    return expect(instance.tournamentsSeasonsStagesIdTeamsGet(id, acceptLanguage, {})).resolves.toBe(null)
  })
})

describe("TranslationsApi", () => {
  let instance: api.TranslationsApi
  beforeEach(function() {
    instance = new api.TranslationsApi(config)
  });

  test("v2TranslationsEntitiesGet", () => {
    return expect(instance.v2TranslationsEntitiesGet({})).resolves.toBe(null)
  })
  test("v2TranslationsPost", () => {
    const body: Array<api.TranslationDto> = undefined
    return expect(instance.v2TranslationsPost(body, {})).resolves.toBe(null)
  })
  test("v2TranslationsSearchPost", () => {
    const body: Array<api.TranslationKeyDto> = undefined
    return expect(instance.v2TranslationsSearchPost(body, {})).resolves.toBe(null)
  })
})

describe("VenuesApi", () => {
  let instance: api.VenuesApi
  beforeEach(function() {
    instance = new api.VenuesApi(config)
  });

  test("v2VenuesGet", () => {
    const offset: number = 56
    const limit: number = 56
    const seasonIds: string = "seasonIds_example"
    const languageCode: string = "languageCode_example"
    return expect(instance.v2VenuesGet(offset, limit, seasonIds, languageCode, {})).resolves.toBe(null)
  })
  test("v2VenuesIdGet", () => {
    const id: string = "id_example"
    const languageCode: string = "languageCode_example"
    return expect(instance.v2VenuesIdGet(id, languageCode, {})).resolves.toBe(null)
  })
  test("v2VenuesIdPut", () => {
    const id: string = "id_example"
    const body: api.V2PutVenues = undefined
    return expect(instance.v2VenuesIdPut(id, body, {})).resolves.toBe(null)
  })
  test("v2VenuesPost", () => {
    const body: api.V2PostVenues = undefined
    return expect(instance.v2VenuesPost(body, {})).resolves.toBe(null)
  })
})

