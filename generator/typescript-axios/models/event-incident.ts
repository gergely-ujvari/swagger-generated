/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { PartialPerson } from './partial-person';
/**
 * 
 * @export
 * @interface EventIncident
 */
export interface EventIncident {
    /**
     * Unique identifier
     * @type {number}
     * @memberof EventIncident
     */
    id: number;
    /**
     * Identifier of the event during which the incident occurred
     * @type {number}
     * @memberof EventIncident
     */
    eventId: number;
    /**
     * The type of incident
     * @type {string}
     * @memberof EventIncident
     */
    type: EventIncidentTypeEnum;
    /**
     * Whether the incident is related to the home or away team. true if home team
     * @type {boolean}
     * @memberof EventIncident
     */
    homeTeam: boolean;
    /**
     * The minute when the incident occured
     * @type {number}
     * @memberof EventIncident
     */
    minute: number;
    /**
     * Id of the team for which the incident is related
     * @type {number}
     * @memberof EventIncident
     */
    teamId?: number;
    /**
     * Updated home team score if the incident changes the scoreline (penalty, goal, own_goal, etc)
     * @type {number}
     * @memberof EventIncident
     */
    goalHome?: number;
    /**
     * Updated away team score  if the incident changes the scoreline (penalty, goal, own_goal, etc)
     * @type {number}
     * @memberof EventIncident
     */
    goalAway?: number;
    /**
     * 
     * @type {PartialPerson}
     * @memberof EventIncident
     */
    player?: PartialPerson;
    /**
     * 
     * @type {PartialPerson}
     * @memberof EventIncident
     */
    relPlayer?: PartialPerson;
    /**
     * Whether the incident has been deleted or not - a disallowed goal for example
     * @type {boolean}
     * @memberof EventIncident
     */
    deleted?: boolean;
    /**
     * If there are multiple incidents with the same minute, this indicates how they are sorted
     * @type {number}
     * @memberof EventIncident
     */
    sortorder?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum EventIncidentTypeEnum {
    PenaltyShootoutScored = 'penalty_shootout_scored',
    YellowCardRed = 'yellow_card_red',
    PenaltyShootoutMissed = 'penalty_shootout_missed',
    Substitution = 'substitution',
    Goal = 'goal',
    RedCard = 'red_card',
    PenaltyMiss = 'penalty_miss',
    YellowCard = 'yellow_card',
    PenaltyGoal = 'penalty_goal',
    OwnGoal = 'own_goal'
}

