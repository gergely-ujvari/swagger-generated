/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Event } from '../models';
import { EventIncident } from '../models';
import { EventPlayer } from '../models';
import { EventsByDate } from '../models';
import { Lineup } from '../models';
import { NotFoundError } from '../models';
import { Odd } from '../models';
/**
 * EventsApi - axios parameter creator
 * @export
 */
export const EventsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a list of events by home and away team id
         * @param {number} homeId Filter events with home team id
         * @param {number} awayId Filter events with away team id
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsByTeamsGet: async (homeId: number, awayId: number, acceptLanguage?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'homeId' is not null or undefined
            if (homeId === null || homeId === undefined) {
                throw new RequiredError('homeId','Required parameter homeId was null or undefined when calling eventsByTeamsGet.');
            }
            // verify required parameter 'awayId' is not null or undefined
            if (awayId === null || awayId === undefined) {
                throw new RequiredError('awayId','Required parameter awayId was null or undefined when calling eventsByTeamsGet.');
            }
            const localVarPath = `/events/by_teams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (homeId !== undefined) {
                localVarQueryParameter['home_id'] = homeId;
            }

            if (awayId !== undefined) {
                localVarQueryParameter['away_id'] = awayId;
            }

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of Events
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {Date} [fromTime] Filter events, which have a start_time after the specified date, format is RFC 3339
         * @param {Date} [toTime] Filter events, which have a start_time before the specified date, format is RFC 3339
         * @param {string} [groupBy] Group events by a specified property. Event models are returned as an &#x27;items&#x27; array inside the property object. Can be used to return events in a more convenient format for displaying. NOTE: when using this parameter the response schema changes.
         * @param {string} [clientOrder] Order matching events for a specific client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsGet: async (acceptLanguage?: string, fromTime?: Date, toTime?: Date, groupBy?: string, clientOrder?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (fromTime !== undefined) {
                localVarQueryParameter['from_time'] = (fromTime as any instanceof Date) ?
                    (fromTime as any).toISOString() :
                    fromTime;
            }

            if (toTime !== undefined) {
                localVarQueryParameter['to_time'] = (toTime as any instanceof Date) ?
                    (toTime as any).toISOString() :
                    toTime;
            }

            if (groupBy !== undefined) {
                localVarQueryParameter['group_by'] = groupBy;
            }

            if (clientOrder !== undefined) {
                localVarQueryParameter['client_order'] = clientOrder;
            }

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [expand] Specifies additional information to include with the standing response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsIdGet: async (id: string, acceptLanguage?: string, expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling eventsIdGet.');
            }
            const localVarPath = `/events/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of EventIncident for a specified Event (goal, subs, red cards, penalties, etc).
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [groupBy] Group results by a property. If &#x27;team&#x27; is used the json object has &#x27;home_team&#x27; and &#x27;away_team&#x27;, each containing an array of EventIncident objects
         * @param {string} [direction] Whether to sort the results by ascending or descending order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsIdIncidentsGet: async (id: string, acceptLanguage?: string, groupBy?: string, direction?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling eventsIdIncidentsGet.');
            }
            const localVarPath = `/events/{id}/incidents`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (groupBy !== undefined) {
                localVarQueryParameter['group_by'] = groupBy;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get lineup information for an event. Includes players, formation and coach
         * @param {number} id Event.id for which lineups are requested
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsIdLineupsGet: async (id: number, acceptLanguage?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling eventsIdLineupsGet.');
            }
            const localVarPath = `/events/{id}/lineups`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of players which are involved in an Event. The list can be used to build lineups for the teams
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [groupBy] Group results by a property. If &#x27;team&#x27; is used the json object has &#x27;home_team&#x27; and &#x27;away_team&#x27;, each containing an array of EventPlayer objects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsIdPlayersGet: async (id: string, acceptLanguage?: string, groupBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling eventsIdPlayersGet.');
            }
            const localVarPath = `/events/{id}/players`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (groupBy !== undefined) {
                localVarQueryParameter['group_by'] = groupBy;
            }

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get available pre-game odds for an Event
         * @param {string} id Unique identifier of the resource.
         * @param {string} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#x27;coupon&#x27; key with the odds fo building URLs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsIdPregameoddsGet: async (id: string, xOddClient: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling eventsIdPregameoddsGet.');
            }
            // verify required parameter 'xOddClient' is not null or undefined
            if (xOddClient === null || xOddClient === undefined) {
                throw new RequiredError('xOddClient','Required parameter xOddClient was null or undefined when calling eventsIdPregameoddsGet.');
            }
            const localVarPath = `/events/{id}/pregameodds`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (xOddClient !== undefined && xOddClient !== null) {
                localVarHeaderParameter['X-Odd-Client'] = String(xOddClient);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of events which are currently live
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [groupBy] Group events by a specified property. Event models are returned as an &#x27;items&#x27; array inside the property object. Can be used to return events in a more convenient format for displaying. NOTE: when using this parameter the response schema changes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsLiveGet: async (acceptLanguage?: string, groupBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/events/live`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (groupBy !== undefined) {
                localVarQueryParameter['group_by'] = groupBy;
            }

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of events which have been updated since the specified timestamp
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {Date} [lastUpdate] Filter events, have been updated after the specified date-time. By default will return updated Events during the last hour
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsSinceGet: async (acceptLanguage?: string, lastUpdate?: Date, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/events/since`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (lastUpdate !== undefined) {
                localVarQueryParameter['last_update'] = (lastUpdate as any instanceof Date) ?
                    (lastUpdate as any).toISOString() :
                    lastUpdate;
            }

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of matches for team/between teams
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {Date} [fromStartTime] Return matches with start_time &gt;&#x3D; from_start_time. RFC 3339 format
         * @param {Date} [toStartTime] Return matches with start_time &lt;&#x3D; from_start_time. RFC 3339 format
         * @param {string} [teamIds] List for team IDs separated by commas. In case of one ID, it will return all matches for a selected team, in case of multiple - it will return matches between selected teams.
         * @param {string} [matchIds] List for match IDs separated by commas.
         * @param {string} [tournamentIds] List for tournament IDs separated by commas.
         * @param {string} [stageIds] List for stage IDs separated by commas.
         * @param {string} [rounds] List for rounds separated by commas.
         * @param {string} [seasonIds] List for season IDs separated by commas.
         * @param {string} [statusTypes] List of status types.
         * @param {number} [offset] Results offset
         * @param {number} [limit] Results limit
         * @param {string} [tournamentOrder] Tournament filtering and ordering.
         * @param {string} [refereeId] Filter matches by referee
         * @param {string} [venueId] Filter matches by venue
         * @param {string} [statusCode] Filter matches by event_status.code
         * @param {string} [sortDirection] Result ordering - asc/desc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesGet: async (acceptLanguage?: string, fromStartTime?: Date, toStartTime?: Date, teamIds?: string, matchIds?: string, tournamentIds?: string, stageIds?: string, rounds?: string, seasonIds?: string, statusTypes?: string, offset?: number, limit?: number, tournamentOrder?: string, refereeId?: string, venueId?: string, statusCode?: string, sortDirection?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/matches`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (fromStartTime !== undefined) {
                localVarQueryParameter['from_start_time'] = (fromStartTime as any instanceof Date) ?
                    (fromStartTime as any).toISOString() :
                    fromStartTime;
            }

            if (toStartTime !== undefined) {
                localVarQueryParameter['to_start_time'] = (toStartTime as any instanceof Date) ?
                    (toStartTime as any).toISOString() :
                    toStartTime;
            }

            if (teamIds !== undefined) {
                localVarQueryParameter['team_ids'] = teamIds;
            }

            if (matchIds !== undefined) {
                localVarQueryParameter['match_ids'] = matchIds;
            }

            if (tournamentIds !== undefined) {
                localVarQueryParameter['tournament_ids'] = tournamentIds;
            }

            if (stageIds !== undefined) {
                localVarQueryParameter['stage_ids'] = stageIds;
            }

            if (rounds !== undefined) {
                localVarQueryParameter['rounds'] = rounds;
            }

            if (seasonIds !== undefined) {
                localVarQueryParameter['season_ids'] = seasonIds;
            }

            if (statusTypes !== undefined) {
                localVarQueryParameter['status_types'] = statusTypes;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (tournamentOrder !== undefined) {
                localVarQueryParameter['tournament_order'] = tournamentOrder;
            }

            if (refereeId !== undefined) {
                localVarQueryParameter['referee_id'] = refereeId;
            }

            if (venueId !== undefined) {
                localVarQueryParameter['venue_id'] = venueId;
            }

            if (statusCode !== undefined) {
                localVarQueryParameter['status_code'] = statusCode;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sort_direction'] = sortDirection;
            }

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of events which are fixtures in a given TournamentSeasonStage resource
         * @param {number} id Unique identifier of the TournamentSeasonStage resource
         * @param {string} [round] Filter the event list by a specific round
         * @param {string} [sortDirection] Sort results by date in ascending or descending order
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentsSeasonsStagesIdEventsGet: async (id: number, round?: string, sortDirection?: string, acceptLanguage?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling tournamentsSeasonsStagesIdEventsGet.');
            }
            const localVarPath = `/tournaments/seasons/stages/{id}/events`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (round !== undefined) {
                localVarQueryParameter['round'] = round;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sort_direction'] = sortDirection;
            }

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventsApi - functional programming interface
 * @export
 */
export const EventsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get a list of events by home and away team id
         * @param {number} homeId Filter events with home team id
         * @param {number} awayId Filter events with away team id
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsByTeamsGet(homeId: number, awayId: number, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Event>>> {
            const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).eventsByTeamsGet(homeId, awayId, acceptLanguage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of Events
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {Date} [fromTime] Filter events, which have a start_time after the specified date, format is RFC 3339
         * @param {Date} [toTime] Filter events, which have a start_time before the specified date, format is RFC 3339
         * @param {string} [groupBy] Group events by a specified property. Event models are returned as an &#x27;items&#x27; array inside the property object. Can be used to return events in a more convenient format for displaying. NOTE: when using this parameter the response schema changes.
         * @param {string} [clientOrder] Order matching events for a specific client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsGet(acceptLanguage?: string, fromTime?: Date, toTime?: Date, groupBy?: string, clientOrder?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Event>>>> {
            const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).eventsGet(acceptLanguage, fromTime, toTime, groupBy, clientOrder, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [expand] Specifies additional information to include with the standing response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsIdGet(id: string, acceptLanguage?: string, expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Event>>> {
            const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).eventsIdGet(id, acceptLanguage, expand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of EventIncident for a specified Event (goal, subs, red cards, penalties, etc).
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [groupBy] Group results by a property. If &#x27;team&#x27; is used the json object has &#x27;home_team&#x27; and &#x27;away_team&#x27;, each containing an array of EventIncident objects
         * @param {string} [direction] Whether to sort the results by ascending or descending order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsIdIncidentsGet(id: string, acceptLanguage?: string, groupBy?: string, direction?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<EventIncident>>>> {
            const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).eventsIdIncidentsGet(id, acceptLanguage, groupBy, direction, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get lineup information for an event. Includes players, formation and coach
         * @param {number} id Event.id for which lineups are requested
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsIdLineupsGet(id: number, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Lineup>>> {
            const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).eventsIdLineupsGet(id, acceptLanguage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of players which are involved in an Event. The list can be used to build lineups for the teams
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [groupBy] Group results by a property. If &#x27;team&#x27; is used the json object has &#x27;home_team&#x27; and &#x27;away_team&#x27;, each containing an array of EventPlayer objects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsIdPlayersGet(id: string, acceptLanguage?: string, groupBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<EventPlayer>>>> {
            const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).eventsIdPlayersGet(id, acceptLanguage, groupBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get available pre-game odds for an Event
         * @param {string} id Unique identifier of the resource.
         * @param {string} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#x27;coupon&#x27; key with the odds fo building URLs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsIdPregameoddsGet(id: string, xOddClient: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Odd>>>> {
            const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).eventsIdPregameoddsGet(id, xOddClient, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of events which are currently live
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [groupBy] Group events by a specified property. Event models are returned as an &#x27;items&#x27; array inside the property object. Can be used to return events in a more convenient format for displaying. NOTE: when using this parameter the response schema changes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsLiveGet(acceptLanguage?: string, groupBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Event>>>> {
            const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).eventsLiveGet(acceptLanguage, groupBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of events which have been updated since the specified timestamp
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {Date} [lastUpdate] Filter events, have been updated after the specified date-time. By default will return updated Events during the last hour
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsSinceGet(acceptLanguage?: string, lastUpdate?: Date, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Event>>>> {
            const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).eventsSinceGet(acceptLanguage, lastUpdate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of matches for team/between teams
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {Date} [fromStartTime] Return matches with start_time &gt;&#x3D; from_start_time. RFC 3339 format
         * @param {Date} [toStartTime] Return matches with start_time &lt;&#x3D; from_start_time. RFC 3339 format
         * @param {string} [teamIds] List for team IDs separated by commas. In case of one ID, it will return all matches for a selected team, in case of multiple - it will return matches between selected teams.
         * @param {string} [matchIds] List for match IDs separated by commas.
         * @param {string} [tournamentIds] List for tournament IDs separated by commas.
         * @param {string} [stageIds] List for stage IDs separated by commas.
         * @param {string} [rounds] List for rounds separated by commas.
         * @param {string} [seasonIds] List for season IDs separated by commas.
         * @param {string} [statusTypes] List of status types.
         * @param {number} [offset] Results offset
         * @param {number} [limit] Results limit
         * @param {string} [tournamentOrder] Tournament filtering and ordering.
         * @param {string} [refereeId] Filter matches by referee
         * @param {string} [venueId] Filter matches by venue
         * @param {string} [statusCode] Filter matches by event_status.code
         * @param {string} [sortDirection] Result ordering - asc/desc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async matchesGet(acceptLanguage?: string, fromStartTime?: Date, toStartTime?: Date, teamIds?: string, matchIds?: string, tournamentIds?: string, stageIds?: string, rounds?: string, seasonIds?: string, statusTypes?: string, offset?: number, limit?: number, tournamentOrder?: string, refereeId?: string, venueId?: string, statusCode?: string, sortDirection?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Event>>>> {
            const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).matchesGet(acceptLanguage, fromStartTime, toStartTime, teamIds, matchIds, tournamentIds, stageIds, rounds, seasonIds, statusTypes, offset, limit, tournamentOrder, refereeId, venueId, statusCode, sortDirection, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of events which are fixtures in a given TournamentSeasonStage resource
         * @param {number} id Unique identifier of the TournamentSeasonStage resource
         * @param {string} [round] Filter the event list by a specific round
         * @param {string} [sortDirection] Sort results by date in ascending or descending order
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsSeasonsStagesIdEventsGet(id: number, round?: string, sortDirection?: string, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<EventsByDate>>>> {
            const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).tournamentsSeasonsStagesIdEventsGet(id, round, sortDirection, acceptLanguage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EventsApi - factory interface
 * @export
 */
export const EventsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get a list of events by home and away team id
         * @param {number} homeId Filter events with home team id
         * @param {number} awayId Filter events with away team id
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsByTeamsGet(homeId: number, awayId: number, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Event>> {
            return EventsApiFp(configuration).eventsByTeamsGet(homeId, awayId, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of Events
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {Date} [fromTime] Filter events, which have a start_time after the specified date, format is RFC 3339
         * @param {Date} [toTime] Filter events, which have a start_time before the specified date, format is RFC 3339
         * @param {string} [groupBy] Group events by a specified property. Event models are returned as an &#x27;items&#x27; array inside the property object. Can be used to return events in a more convenient format for displaying. NOTE: when using this parameter the response schema changes.
         * @param {string} [clientOrder] Order matching events for a specific client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsGet(acceptLanguage?: string, fromTime?: Date, toTime?: Date, groupBy?: string, clientOrder?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Event>>> {
            return EventsApiFp(configuration).eventsGet(acceptLanguage, fromTime, toTime, groupBy, clientOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [expand] Specifies additional information to include with the standing response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsIdGet(id: string, acceptLanguage?: string, expand?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Event>> {
            return EventsApiFp(configuration).eventsIdGet(id, acceptLanguage, expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of EventIncident for a specified Event (goal, subs, red cards, penalties, etc).
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [groupBy] Group results by a property. If &#x27;team&#x27; is used the json object has &#x27;home_team&#x27; and &#x27;away_team&#x27;, each containing an array of EventIncident objects
         * @param {string} [direction] Whether to sort the results by ascending or descending order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsIdIncidentsGet(id: string, acceptLanguage?: string, groupBy?: string, direction?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<EventIncident>>> {
            return EventsApiFp(configuration).eventsIdIncidentsGet(id, acceptLanguage, groupBy, direction, options).then((request) => request(axios, basePath));
        },
        /**
         * Get lineup information for an event. Includes players, formation and coach
         * @param {number} id Event.id for which lineups are requested
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsIdLineupsGet(id: number, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Lineup>> {
            return EventsApiFp(configuration).eventsIdLineupsGet(id, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of players which are involved in an Event. The list can be used to build lineups for the teams
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [groupBy] Group results by a property. If &#x27;team&#x27; is used the json object has &#x27;home_team&#x27; and &#x27;away_team&#x27;, each containing an array of EventPlayer objects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsIdPlayersGet(id: string, acceptLanguage?: string, groupBy?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<EventPlayer>>> {
            return EventsApiFp(configuration).eventsIdPlayersGet(id, acceptLanguage, groupBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get available pre-game odds for an Event
         * @param {string} id Unique identifier of the resource.
         * @param {string} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#x27;coupon&#x27; key with the odds fo building URLs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsIdPregameoddsGet(id: string, xOddClient: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Odd>>> {
            return EventsApiFp(configuration).eventsIdPregameoddsGet(id, xOddClient, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of events which are currently live
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [groupBy] Group events by a specified property. Event models are returned as an &#x27;items&#x27; array inside the property object. Can be used to return events in a more convenient format for displaying. NOTE: when using this parameter the response schema changes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsLiveGet(acceptLanguage?: string, groupBy?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Event>>> {
            return EventsApiFp(configuration).eventsLiveGet(acceptLanguage, groupBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of events which have been updated since the specified timestamp
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {Date} [lastUpdate] Filter events, have been updated after the specified date-time. By default will return updated Events during the last hour
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsSinceGet(acceptLanguage?: string, lastUpdate?: Date, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Event>>> {
            return EventsApiFp(configuration).eventsSinceGet(acceptLanguage, lastUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of matches for team/between teams
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {Date} [fromStartTime] Return matches with start_time &gt;&#x3D; from_start_time. RFC 3339 format
         * @param {Date} [toStartTime] Return matches with start_time &lt;&#x3D; from_start_time. RFC 3339 format
         * @param {string} [teamIds] List for team IDs separated by commas. In case of one ID, it will return all matches for a selected team, in case of multiple - it will return matches between selected teams.
         * @param {string} [matchIds] List for match IDs separated by commas.
         * @param {string} [tournamentIds] List for tournament IDs separated by commas.
         * @param {string} [stageIds] List for stage IDs separated by commas.
         * @param {string} [rounds] List for rounds separated by commas.
         * @param {string} [seasonIds] List for season IDs separated by commas.
         * @param {string} [statusTypes] List of status types.
         * @param {number} [offset] Results offset
         * @param {number} [limit] Results limit
         * @param {string} [tournamentOrder] Tournament filtering and ordering.
         * @param {string} [refereeId] Filter matches by referee
         * @param {string} [venueId] Filter matches by venue
         * @param {string} [statusCode] Filter matches by event_status.code
         * @param {string} [sortDirection] Result ordering - asc/desc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async matchesGet(acceptLanguage?: string, fromStartTime?: Date, toStartTime?: Date, teamIds?: string, matchIds?: string, tournamentIds?: string, stageIds?: string, rounds?: string, seasonIds?: string, statusTypes?: string, offset?: number, limit?: number, tournamentOrder?: string, refereeId?: string, venueId?: string, statusCode?: string, sortDirection?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Event>>> {
            return EventsApiFp(configuration).matchesGet(acceptLanguage, fromStartTime, toStartTime, teamIds, matchIds, tournamentIds, stageIds, rounds, seasonIds, statusTypes, offset, limit, tournamentOrder, refereeId, venueId, statusCode, sortDirection, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of events which are fixtures in a given TournamentSeasonStage resource
         * @param {number} id Unique identifier of the TournamentSeasonStage resource
         * @param {string} [round] Filter the event list by a specific round
         * @param {string} [sortDirection] Sort results by date in ascending or descending order
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsSeasonsStagesIdEventsGet(id: number, round?: string, sortDirection?: string, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<EventsByDate>>> {
            return EventsApiFp(configuration).tournamentsSeasonsStagesIdEventsGet(id, round, sortDirection, acceptLanguage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventsApi - object-oriented interface
 * @export
 * @class EventsApi
 * @extends {BaseAPI}
 */
export class EventsApi extends BaseAPI {
    /**
     * Get a list of events by home and away team id
     * @param {number} homeId Filter events with home team id
     * @param {number} awayId Filter events with away team id
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public async eventsByTeamsGet(homeId: number, awayId: number, acceptLanguage?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Event>> {
        return EventsApiFp(this.configuration).eventsByTeamsGet(homeId, awayId, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of Events
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {Date} [fromTime] Filter events, which have a start_time after the specified date, format is RFC 3339
     * @param {Date} [toTime] Filter events, which have a start_time before the specified date, format is RFC 3339
     * @param {string} [groupBy] Group events by a specified property. Event models are returned as an &#x27;items&#x27; array inside the property object. Can be used to return events in a more convenient format for displaying. NOTE: when using this parameter the response schema changes.
     * @param {string} [clientOrder] Order matching events for a specific client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public async eventsGet(acceptLanguage?: string, fromTime?: Date, toTime?: Date, groupBy?: string, clientOrder?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Event>>> {
        return EventsApiFp(this.configuration).eventsGet(acceptLanguage, fromTime, toTime, groupBy, clientOrder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} id Unique identifier of the resource.
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {string} [expand] Specifies additional information to include with the standing response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public async eventsIdGet(id: string, acceptLanguage?: string, expand?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Event>> {
        return EventsApiFp(this.configuration).eventsIdGet(id, acceptLanguage, expand, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of EventIncident for a specified Event (goal, subs, red cards, penalties, etc).
     * @param {string} id Unique identifier of the resource.
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {string} [groupBy] Group results by a property. If &#x27;team&#x27; is used the json object has &#x27;home_team&#x27; and &#x27;away_team&#x27;, each containing an array of EventIncident objects
     * @param {string} [direction] Whether to sort the results by ascending or descending order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public async eventsIdIncidentsGet(id: string, acceptLanguage?: string, groupBy?: string, direction?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<EventIncident>>> {
        return EventsApiFp(this.configuration).eventsIdIncidentsGet(id, acceptLanguage, groupBy, direction, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get lineup information for an event. Includes players, formation and coach
     * @param {number} id Event.id for which lineups are requested
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public async eventsIdLineupsGet(id: number, acceptLanguage?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Lineup>> {
        return EventsApiFp(this.configuration).eventsIdLineupsGet(id, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of players which are involved in an Event. The list can be used to build lineups for the teams
     * @param {string} id Unique identifier of the resource.
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {string} [groupBy] Group results by a property. If &#x27;team&#x27; is used the json object has &#x27;home_team&#x27; and &#x27;away_team&#x27;, each containing an array of EventPlayer objects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public async eventsIdPlayersGet(id: string, acceptLanguage?: string, groupBy?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<EventPlayer>>> {
        return EventsApiFp(this.configuration).eventsIdPlayersGet(id, acceptLanguage, groupBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get available pre-game odds for an Event
     * @param {string} id Unique identifier of the resource.
     * @param {string} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#x27;coupon&#x27; key with the odds fo building URLs.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public async eventsIdPregameoddsGet(id: string, xOddClient: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Odd>>> {
        return EventsApiFp(this.configuration).eventsIdPregameoddsGet(id, xOddClient, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of events which are currently live
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {string} [groupBy] Group events by a specified property. Event models are returned as an &#x27;items&#x27; array inside the property object. Can be used to return events in a more convenient format for displaying. NOTE: when using this parameter the response schema changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public async eventsLiveGet(acceptLanguage?: string, groupBy?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Event>>> {
        return EventsApiFp(this.configuration).eventsLiveGet(acceptLanguage, groupBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of events which have been updated since the specified timestamp
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {Date} [lastUpdate] Filter events, have been updated after the specified date-time. By default will return updated Events during the last hour
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public async eventsSinceGet(acceptLanguage?: string, lastUpdate?: Date, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Event>>> {
        return EventsApiFp(this.configuration).eventsSinceGet(acceptLanguage, lastUpdate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of matches for team/between teams
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {Date} [fromStartTime] Return matches with start_time &gt;&#x3D; from_start_time. RFC 3339 format
     * @param {Date} [toStartTime] Return matches with start_time &lt;&#x3D; from_start_time. RFC 3339 format
     * @param {string} [teamIds] List for team IDs separated by commas. In case of one ID, it will return all matches for a selected team, in case of multiple - it will return matches between selected teams.
     * @param {string} [matchIds] List for match IDs separated by commas.
     * @param {string} [tournamentIds] List for tournament IDs separated by commas.
     * @param {string} [stageIds] List for stage IDs separated by commas.
     * @param {string} [rounds] List for rounds separated by commas.
     * @param {string} [seasonIds] List for season IDs separated by commas.
     * @param {string} [statusTypes] List of status types.
     * @param {number} [offset] Results offset
     * @param {number} [limit] Results limit
     * @param {string} [tournamentOrder] Tournament filtering and ordering.
     * @param {string} [refereeId] Filter matches by referee
     * @param {string} [venueId] Filter matches by venue
     * @param {string} [statusCode] Filter matches by event_status.code
     * @param {string} [sortDirection] Result ordering - asc/desc
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public async matchesGet(acceptLanguage?: string, fromStartTime?: Date, toStartTime?: Date, teamIds?: string, matchIds?: string, tournamentIds?: string, stageIds?: string, rounds?: string, seasonIds?: string, statusTypes?: string, offset?: number, limit?: number, tournamentOrder?: string, refereeId?: string, venueId?: string, statusCode?: string, sortDirection?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Event>>> {
        return EventsApiFp(this.configuration).matchesGet(acceptLanguage, fromStartTime, toStartTime, teamIds, matchIds, tournamentIds, stageIds, rounds, seasonIds, statusTypes, offset, limit, tournamentOrder, refereeId, venueId, statusCode, sortDirection, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of events which are fixtures in a given TournamentSeasonStage resource
     * @param {number} id Unique identifier of the TournamentSeasonStage resource
     * @param {string} [round] Filter the event list by a specific round
     * @param {string} [sortDirection] Sort results by date in ascending or descending order
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public async tournamentsSeasonsStagesIdEventsGet(id: number, round?: string, sortDirection?: string, acceptLanguage?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<EventsByDate>>> {
        return EventsApiFp(this.configuration).tournamentsSeasonsStagesIdEventsGet(id, round, sortDirection, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
}
