/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CardlistStandingData } from '../models';
import { Event } from '../models';
import { EventsByDate } from '../models';
import { LeagueStandingData } from '../models';
import { NotFoundError } from '../models';
import { PartialTeam } from '../models';
import { Round } from '../models';
import { StageGroupWithStandingTournamentSeasonStage } from '../models';
import { TopscorerStandingData } from '../models';
import { Tournament } from '../models';
import { TournamentSeason } from '../models';
import { TournamentSeasonStage } from '../models';
import { TournamentSeasonStageWithStandingGroups } from '../models';
import { TournamentSeasonWithStages } from '../models';
import { TournamentWithSeasons } from '../models';
/**
 * TournamentsApi - axios parameter creator
 * @export
 */
export const TournamentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a list of available Tournament resources
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {number} [countryId] Get Tournaments from a specific Country.id
         * @param {string} [clientOrder] Get Tournaments ordered for a specific client
         * @param {string} [expandClientSortorder] Include extra information with Tournament response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentsGet: async (acceptLanguage?: string, countryId?: number, clientOrder?: string, expandClientSortorder?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tournaments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (countryId !== undefined) {
                localVarQueryParameter['country_id'] = countryId;
            }

            if (clientOrder !== undefined) {
                localVarQueryParameter['client_order'] = clientOrder;
            }

            if (expandClientSortorder !== undefined) {
                localVarQueryParameter['expand_client_sortorder'] = expandClientSortorder;
            }

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentsIdGet: async (id: string, acceptLanguage?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling tournamentsIdGet.');
            }
            const localVarPath = `/tournaments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of seasons for a given Tournament id
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentsIdSeasonsGet: async (id: string, acceptLanguage?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling tournamentsIdSeasonsGet.');
            }
            const localVarPath = `/tournaments/{id}/seasons`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information for the latest season for a given Tournament. This is an alias to whatever resource is first in /tournaments/{id}/seasons
         * @param {number} id Unique identifier of the Tournament resource
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentsIdSeasonsLatestGet: async (id: number, acceptLanguage?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling tournamentsIdSeasonsLatestGet.');
            }
            const localVarPath = `/tournaments/{id}/seasons/latest`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a standing by red,yellow cards for a specific TournamentSeason resource.
         * @param {number} id Unique identifier of the TournamentSeason resource
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentsSeasonsIdCardlistGet: async (id: number, acceptLanguage?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling tournamentsSeasonsIdCardlistGet.');
            }
            const localVarPath = `/tournaments/seasons/{id}/cardlist`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of Events, for a given TournamentSeason
         * @param {number} id Unique identifier of the TournamentSeason resource
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [groupBy] Whether to group events by date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentsSeasonsIdEventsGet: async (id: number, acceptLanguage?: string, groupBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling tournamentsSeasonsIdEventsGet.');
            }
            const localVarPath = `/tournaments/seasons/{id}/events`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (groupBy !== undefined) {
                localVarQueryParameter['group_by'] = groupBy;
            }

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information for a given TournamentSeason resource id.
         * @param {number} id Unique identifier of the TournamentSeason resource
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentsSeasonsIdGet: async (id: number, acceptLanguage?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling tournamentsSeasonsIdGet.');
            }
            const localVarPath = `/tournaments/seasons/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of Teams, which are participating in a given TournamentSeason
         * @param {number} id Unique identifier of the TournamentSeason resource
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentsSeasonsIdTeamsGet: async (id: number, acceptLanguage?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling tournamentsSeasonsIdTeamsGet.');
            }
            const localVarPath = `/tournaments/seasons/{id}/teams`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of topscorers for a specific TournamentSeason resource.
         * @param {number} id Unique identifier of the TournamentSeason resource
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentsSeasonsIdTopscorerGet: async (id: number, acceptLanguage?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling tournamentsSeasonsIdTopscorerGet.');
            }
            const localVarPath = `/tournaments/seasons/{id}/topscorer`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all currently active tournament season stages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentsSeasonsStagesActiveGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tournaments/seasons/stages/active`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information for a StageGroup Resource
         * @param {number} id Unique identifier of the StageGroup resource
         * @param {string} [expand] Specify additional information to include with the response
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentsSeasonsStagesGroupsIdGet: async (id: number, expand?: string, acceptLanguage?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling tournamentsSeasonsStagesGroupsIdGet.');
            }
            const localVarPath = `/tournaments/seasons/stages/groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Standing for a StageGroup Resource
         * @param {number} id Unique identifier of the StageGroup resource
         * @param {string} [expand] Specify additional information to include with the response
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentsSeasonsStagesGroupsIdStandingGet: async (id: number, expand?: string, acceptLanguage?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling tournamentsSeasonsStagesGroupsIdStandingGet.');
            }
            const localVarPath = `/tournaments/seasons/stages/groups/{id}/standing`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of events which are fixtures in a given TournamentSeasonStage resource
         * @param {number} id Unique identifier of the TournamentSeasonStage resource
         * @param {string} [round] Filter the event list by a specific round
         * @param {string} [sortDirection] Sort results by date in ascending or descending order
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentsSeasonsStagesIdEventsGet: async (id: number, round?: string, sortDirection?: string, acceptLanguage?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling tournamentsSeasonsStagesIdEventsGet.');
            }
            const localVarPath = `/tournaments/seasons/stages/{id}/events`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (round !== undefined) {
                localVarQueryParameter['round'] = round;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sort_direction'] = sortDirection;
            }

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information for a TournamentSeasonStage Resource
         * @param {number} id Unique identifier of the TournamentSeasonStage resource
         * @param {string} [expand] Specify additional information to include with the response
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentsSeasonsStagesIdGet: async (id: number, expand?: string, acceptLanguage?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling tournamentsSeasonsStagesIdGet.');
            }
            const localVarPath = `/tournaments/seasons/stages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of rounds for a specific TournamentSeasonStage
         * @param {number} id Unique identifier of the TournamentSeasonStage resource
         * @param {string} [expand] Specify what additional information to include with the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentsSeasonsStagesIdRoundsGet: async (id: number, expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling tournamentsSeasonsStagesIdRoundsGet.');
            }
            const localVarPath = `/tournaments/seasons/stages/{id}/rounds`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Standing for a TournamentSeasonStage Resource
         * @param {number} id Unique identifier of the TournamentSeasonStage resource
         * @param {string} [expand] Specify additional information to include with the response
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentsSeasonsStagesIdStandingGet: async (id: number, expand?: string, acceptLanguage?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling tournamentsSeasonsStagesIdStandingGet.');
            }
            const localVarPath = `/tournaments/seasons/stages/{id}/standing`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of Teams, which are participating in a given TournamentSeasonStage
         * @param {number} id Unique identifier of the TournamentSeasonStage resource
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentsSeasonsStagesIdTeamsGet: async (id: number, acceptLanguage?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling tournamentsSeasonsStagesIdTeamsGet.');
            }
            const localVarPath = `/tournaments/seasons/stages/{id}/teams`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TournamentsApi - functional programming interface
 * @export
 */
export const TournamentsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get a list of available Tournament resources
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {number} [countryId] Get Tournaments from a specific Country.id
         * @param {string} [clientOrder] Get Tournaments ordered for a specific client
         * @param {string} [expandClientSortorder] Include extra information with Tournament response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsGet(acceptLanguage?: string, countryId?: number, clientOrder?: string, expandClientSortorder?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Tournament>>>> {
            const localVarAxiosArgs = await TournamentsApiAxiosParamCreator(configuration).tournamentsGet(acceptLanguage, countryId, clientOrder, expandClientSortorder, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsIdGet(id: string, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TournamentWithSeasons>>> {
            const localVarAxiosArgs = await TournamentsApiAxiosParamCreator(configuration).tournamentsIdGet(id, acceptLanguage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of seasons for a given Tournament id
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsIdSeasonsGet(id: string, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<TournamentSeason>>>> {
            const localVarAxiosArgs = await TournamentsApiAxiosParamCreator(configuration).tournamentsIdSeasonsGet(id, acceptLanguage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information for the latest season for a given Tournament. This is an alias to whatever resource is first in /tournaments/{id}/seasons
         * @param {number} id Unique identifier of the Tournament resource
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsIdSeasonsLatestGet(id: number, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TournamentSeasonWithStages>>> {
            const localVarAxiosArgs = await TournamentsApiAxiosParamCreator(configuration).tournamentsIdSeasonsLatestGet(id, acceptLanguage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a standing by red,yellow cards for a specific TournamentSeason resource.
         * @param {number} id Unique identifier of the TournamentSeason resource
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsSeasonsIdCardlistGet(id: number, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<CardlistStandingData>>>> {
            const localVarAxiosArgs = await TournamentsApiAxiosParamCreator(configuration).tournamentsSeasonsIdCardlistGet(id, acceptLanguage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of Events, for a given TournamentSeason
         * @param {number} id Unique identifier of the TournamentSeason resource
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [groupBy] Whether to group events by date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsSeasonsIdEventsGet(id: number, acceptLanguage?: string, groupBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Event>>>> {
            const localVarAxiosArgs = await TournamentsApiAxiosParamCreator(configuration).tournamentsSeasonsIdEventsGet(id, acceptLanguage, groupBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information for a given TournamentSeason resource id.
         * @param {number} id Unique identifier of the TournamentSeason resource
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsSeasonsIdGet(id: number, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TournamentSeasonWithStages>>> {
            const localVarAxiosArgs = await TournamentsApiAxiosParamCreator(configuration).tournamentsSeasonsIdGet(id, acceptLanguage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of Teams, which are participating in a given TournamentSeason
         * @param {number} id Unique identifier of the TournamentSeason resource
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsSeasonsIdTeamsGet(id: number, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<PartialTeam>>>> {
            const localVarAxiosArgs = await TournamentsApiAxiosParamCreator(configuration).tournamentsSeasonsIdTeamsGet(id, acceptLanguage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of topscorers for a specific TournamentSeason resource.
         * @param {number} id Unique identifier of the TournamentSeason resource
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsSeasonsIdTopscorerGet(id: number, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<TopscorerStandingData>>>> {
            const localVarAxiosArgs = await TournamentsApiAxiosParamCreator(configuration).tournamentsSeasonsIdTopscorerGet(id, acceptLanguage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all currently active tournament season stages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsSeasonsStagesActiveGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<TournamentSeasonStage>>>> {
            const localVarAxiosArgs = await TournamentsApiAxiosParamCreator(configuration).tournamentsSeasonsStagesActiveGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information for a StageGroup Resource
         * @param {number} id Unique identifier of the StageGroup resource
         * @param {string} [expand] Specify additional information to include with the response
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsSeasonsStagesGroupsIdGet(id: number, expand?: string, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<StageGroupWithStandingTournamentSeasonStage>>> {
            const localVarAxiosArgs = await TournamentsApiAxiosParamCreator(configuration).tournamentsSeasonsStagesGroupsIdGet(id, expand, acceptLanguage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Standing for a StageGroup Resource
         * @param {number} id Unique identifier of the StageGroup resource
         * @param {string} [expand] Specify additional information to include with the response
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsSeasonsStagesGroupsIdStandingGet(id: number, expand?: string, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<LeagueStandingData>>>> {
            const localVarAxiosArgs = await TournamentsApiAxiosParamCreator(configuration).tournamentsSeasonsStagesGroupsIdStandingGet(id, expand, acceptLanguage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of events which are fixtures in a given TournamentSeasonStage resource
         * @param {number} id Unique identifier of the TournamentSeasonStage resource
         * @param {string} [round] Filter the event list by a specific round
         * @param {string} [sortDirection] Sort results by date in ascending or descending order
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsSeasonsStagesIdEventsGet(id: number, round?: string, sortDirection?: string, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<EventsByDate>>>> {
            const localVarAxiosArgs = await TournamentsApiAxiosParamCreator(configuration).tournamentsSeasonsStagesIdEventsGet(id, round, sortDirection, acceptLanguage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information for a TournamentSeasonStage Resource
         * @param {number} id Unique identifier of the TournamentSeasonStage resource
         * @param {string} [expand] Specify additional information to include with the response
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsSeasonsStagesIdGet(id: number, expand?: string, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TournamentSeasonStageWithStandingGroups>>> {
            const localVarAxiosArgs = await TournamentsApiAxiosParamCreator(configuration).tournamentsSeasonsStagesIdGet(id, expand, acceptLanguage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of rounds for a specific TournamentSeasonStage
         * @param {number} id Unique identifier of the TournamentSeasonStage resource
         * @param {string} [expand] Specify what additional information to include with the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsSeasonsStagesIdRoundsGet(id: number, expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Round>>>> {
            const localVarAxiosArgs = await TournamentsApiAxiosParamCreator(configuration).tournamentsSeasonsStagesIdRoundsGet(id, expand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Standing for a TournamentSeasonStage Resource
         * @param {number} id Unique identifier of the TournamentSeasonStage resource
         * @param {string} [expand] Specify additional information to include with the response
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsSeasonsStagesIdStandingGet(id: number, expand?: string, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<LeagueStandingData>>>> {
            const localVarAxiosArgs = await TournamentsApiAxiosParamCreator(configuration).tournamentsSeasonsStagesIdStandingGet(id, expand, acceptLanguage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of Teams, which are participating in a given TournamentSeasonStage
         * @param {number} id Unique identifier of the TournamentSeasonStage resource
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsSeasonsStagesIdTeamsGet(id: number, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<PartialTeam>>>> {
            const localVarAxiosArgs = await TournamentsApiAxiosParamCreator(configuration).tournamentsSeasonsStagesIdTeamsGet(id, acceptLanguage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TournamentsApi - factory interface
 * @export
 */
export const TournamentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get a list of available Tournament resources
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {number} [countryId] Get Tournaments from a specific Country.id
         * @param {string} [clientOrder] Get Tournaments ordered for a specific client
         * @param {string} [expandClientSortorder] Include extra information with Tournament response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsGet(acceptLanguage?: string, countryId?: number, clientOrder?: string, expandClientSortorder?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Tournament>>> {
            return TournamentsApiFp(configuration).tournamentsGet(acceptLanguage, countryId, clientOrder, expandClientSortorder, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsIdGet(id: string, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<TournamentWithSeasons>> {
            return TournamentsApiFp(configuration).tournamentsIdGet(id, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of seasons for a given Tournament id
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsIdSeasonsGet(id: string, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<TournamentSeason>>> {
            return TournamentsApiFp(configuration).tournamentsIdSeasonsGet(id, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information for the latest season for a given Tournament. This is an alias to whatever resource is first in /tournaments/{id}/seasons
         * @param {number} id Unique identifier of the Tournament resource
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsIdSeasonsLatestGet(id: number, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<TournamentSeasonWithStages>> {
            return TournamentsApiFp(configuration).tournamentsIdSeasonsLatestGet(id, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a standing by red,yellow cards for a specific TournamentSeason resource.
         * @param {number} id Unique identifier of the TournamentSeason resource
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsSeasonsIdCardlistGet(id: number, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<CardlistStandingData>>> {
            return TournamentsApiFp(configuration).tournamentsSeasonsIdCardlistGet(id, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of Events, for a given TournamentSeason
         * @param {number} id Unique identifier of the TournamentSeason resource
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [groupBy] Whether to group events by date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsSeasonsIdEventsGet(id: number, acceptLanguage?: string, groupBy?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Event>>> {
            return TournamentsApiFp(configuration).tournamentsSeasonsIdEventsGet(id, acceptLanguage, groupBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information for a given TournamentSeason resource id.
         * @param {number} id Unique identifier of the TournamentSeason resource
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsSeasonsIdGet(id: number, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<TournamentSeasonWithStages>> {
            return TournamentsApiFp(configuration).tournamentsSeasonsIdGet(id, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of Teams, which are participating in a given TournamentSeason
         * @param {number} id Unique identifier of the TournamentSeason resource
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsSeasonsIdTeamsGet(id: number, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<PartialTeam>>> {
            return TournamentsApiFp(configuration).tournamentsSeasonsIdTeamsGet(id, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of topscorers for a specific TournamentSeason resource.
         * @param {number} id Unique identifier of the TournamentSeason resource
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsSeasonsIdTopscorerGet(id: number, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<TopscorerStandingData>>> {
            return TournamentsApiFp(configuration).tournamentsSeasonsIdTopscorerGet(id, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all currently active tournament season stages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsSeasonsStagesActiveGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<TournamentSeasonStage>>> {
            return TournamentsApiFp(configuration).tournamentsSeasonsStagesActiveGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get information for a StageGroup Resource
         * @param {number} id Unique identifier of the StageGroup resource
         * @param {string} [expand] Specify additional information to include with the response
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsSeasonsStagesGroupsIdGet(id: number, expand?: string, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<StageGroupWithStandingTournamentSeasonStage>> {
            return TournamentsApiFp(configuration).tournamentsSeasonsStagesGroupsIdGet(id, expand, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Standing for a StageGroup Resource
         * @param {number} id Unique identifier of the StageGroup resource
         * @param {string} [expand] Specify additional information to include with the response
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsSeasonsStagesGroupsIdStandingGet(id: number, expand?: string, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<LeagueStandingData>>> {
            return TournamentsApiFp(configuration).tournamentsSeasonsStagesGroupsIdStandingGet(id, expand, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of events which are fixtures in a given TournamentSeasonStage resource
         * @param {number} id Unique identifier of the TournamentSeasonStage resource
         * @param {string} [round] Filter the event list by a specific round
         * @param {string} [sortDirection] Sort results by date in ascending or descending order
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsSeasonsStagesIdEventsGet(id: number, round?: string, sortDirection?: string, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<EventsByDate>>> {
            return TournamentsApiFp(configuration).tournamentsSeasonsStagesIdEventsGet(id, round, sortDirection, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information for a TournamentSeasonStage Resource
         * @param {number} id Unique identifier of the TournamentSeasonStage resource
         * @param {string} [expand] Specify additional information to include with the response
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsSeasonsStagesIdGet(id: number, expand?: string, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<TournamentSeasonStageWithStandingGroups>> {
            return TournamentsApiFp(configuration).tournamentsSeasonsStagesIdGet(id, expand, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of rounds for a specific TournamentSeasonStage
         * @param {number} id Unique identifier of the TournamentSeasonStage resource
         * @param {string} [expand] Specify what additional information to include with the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsSeasonsStagesIdRoundsGet(id: number, expand?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Round>>> {
            return TournamentsApiFp(configuration).tournamentsSeasonsStagesIdRoundsGet(id, expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Standing for a TournamentSeasonStage Resource
         * @param {number} id Unique identifier of the TournamentSeasonStage resource
         * @param {string} [expand] Specify additional information to include with the response
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsSeasonsStagesIdStandingGet(id: number, expand?: string, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<LeagueStandingData>>> {
            return TournamentsApiFp(configuration).tournamentsSeasonsStagesIdStandingGet(id, expand, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of Teams, which are participating in a given TournamentSeasonStage
         * @param {number} id Unique identifier of the TournamentSeasonStage resource
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsSeasonsStagesIdTeamsGet(id: number, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<PartialTeam>>> {
            return TournamentsApiFp(configuration).tournamentsSeasonsStagesIdTeamsGet(id, acceptLanguage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TournamentsApi - object-oriented interface
 * @export
 * @class TournamentsApi
 * @extends {BaseAPI}
 */
export class TournamentsApi extends BaseAPI {
    /**
     * Get a list of available Tournament resources
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {number} [countryId] Get Tournaments from a specific Country.id
     * @param {string} [clientOrder] Get Tournaments ordered for a specific client
     * @param {string} [expandClientSortorder] Include extra information with Tournament response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentsApi
     */
    public async tournamentsGet(acceptLanguage?: string, countryId?: number, clientOrder?: string, expandClientSortorder?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Tournament>>> {
        return TournamentsApiFp(this.configuration).tournamentsGet(acceptLanguage, countryId, clientOrder, expandClientSortorder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} id Unique identifier of the resource.
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentsApi
     */
    public async tournamentsIdGet(id: string, acceptLanguage?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<TournamentWithSeasons>> {
        return TournamentsApiFp(this.configuration).tournamentsIdGet(id, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of seasons for a given Tournament id
     * @param {string} id Unique identifier of the resource.
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentsApi
     */
    public async tournamentsIdSeasonsGet(id: string, acceptLanguage?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<TournamentSeason>>> {
        return TournamentsApiFp(this.configuration).tournamentsIdSeasonsGet(id, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get information for the latest season for a given Tournament. This is an alias to whatever resource is first in /tournaments/{id}/seasons
     * @param {number} id Unique identifier of the Tournament resource
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentsApi
     */
    public async tournamentsIdSeasonsLatestGet(id: number, acceptLanguage?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<TournamentSeasonWithStages>> {
        return TournamentsApiFp(this.configuration).tournamentsIdSeasonsLatestGet(id, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a standing by red,yellow cards for a specific TournamentSeason resource.
     * @param {number} id Unique identifier of the TournamentSeason resource
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentsApi
     */
    public async tournamentsSeasonsIdCardlistGet(id: number, acceptLanguage?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<CardlistStandingData>>> {
        return TournamentsApiFp(this.configuration).tournamentsSeasonsIdCardlistGet(id, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of Events, for a given TournamentSeason
     * @param {number} id Unique identifier of the TournamentSeason resource
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {string} [groupBy] Whether to group events by date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentsApi
     */
    public async tournamentsSeasonsIdEventsGet(id: number, acceptLanguage?: string, groupBy?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Event>>> {
        return TournamentsApiFp(this.configuration).tournamentsSeasonsIdEventsGet(id, acceptLanguage, groupBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get information for a given TournamentSeason resource id.
     * @param {number} id Unique identifier of the TournamentSeason resource
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentsApi
     */
    public async tournamentsSeasonsIdGet(id: number, acceptLanguage?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<TournamentSeasonWithStages>> {
        return TournamentsApiFp(this.configuration).tournamentsSeasonsIdGet(id, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of Teams, which are participating in a given TournamentSeason
     * @param {number} id Unique identifier of the TournamentSeason resource
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentsApi
     */
    public async tournamentsSeasonsIdTeamsGet(id: number, acceptLanguage?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<PartialTeam>>> {
        return TournamentsApiFp(this.configuration).tournamentsSeasonsIdTeamsGet(id, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of topscorers for a specific TournamentSeason resource.
     * @param {number} id Unique identifier of the TournamentSeason resource
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentsApi
     */
    public async tournamentsSeasonsIdTopscorerGet(id: number, acceptLanguage?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<TopscorerStandingData>>> {
        return TournamentsApiFp(this.configuration).tournamentsSeasonsIdTopscorerGet(id, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all currently active tournament season stages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentsApi
     */
    public async tournamentsSeasonsStagesActiveGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<TournamentSeasonStage>>> {
        return TournamentsApiFp(this.configuration).tournamentsSeasonsStagesActiveGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get information for a StageGroup Resource
     * @param {number} id Unique identifier of the StageGroup resource
     * @param {string} [expand] Specify additional information to include with the response
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentsApi
     */
    public async tournamentsSeasonsStagesGroupsIdGet(id: number, expand?: string, acceptLanguage?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<StageGroupWithStandingTournamentSeasonStage>> {
        return TournamentsApiFp(this.configuration).tournamentsSeasonsStagesGroupsIdGet(id, expand, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Standing for a StageGroup Resource
     * @param {number} id Unique identifier of the StageGroup resource
     * @param {string} [expand] Specify additional information to include with the response
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentsApi
     */
    public async tournamentsSeasonsStagesGroupsIdStandingGet(id: number, expand?: string, acceptLanguage?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<LeagueStandingData>>> {
        return TournamentsApiFp(this.configuration).tournamentsSeasonsStagesGroupsIdStandingGet(id, expand, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of events which are fixtures in a given TournamentSeasonStage resource
     * @param {number} id Unique identifier of the TournamentSeasonStage resource
     * @param {string} [round] Filter the event list by a specific round
     * @param {string} [sortDirection] Sort results by date in ascending or descending order
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentsApi
     */
    public async tournamentsSeasonsStagesIdEventsGet(id: number, round?: string, sortDirection?: string, acceptLanguage?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<EventsByDate>>> {
        return TournamentsApiFp(this.configuration).tournamentsSeasonsStagesIdEventsGet(id, round, sortDirection, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get information for a TournamentSeasonStage Resource
     * @param {number} id Unique identifier of the TournamentSeasonStage resource
     * @param {string} [expand] Specify additional information to include with the response
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentsApi
     */
    public async tournamentsSeasonsStagesIdGet(id: number, expand?: string, acceptLanguage?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<TournamentSeasonStageWithStandingGroups>> {
        return TournamentsApiFp(this.configuration).tournamentsSeasonsStagesIdGet(id, expand, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of rounds for a specific TournamentSeasonStage
     * @param {number} id Unique identifier of the TournamentSeasonStage resource
     * @param {string} [expand] Specify what additional information to include with the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentsApi
     */
    public async tournamentsSeasonsStagesIdRoundsGet(id: number, expand?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Round>>> {
        return TournamentsApiFp(this.configuration).tournamentsSeasonsStagesIdRoundsGet(id, expand, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Standing for a TournamentSeasonStage Resource
     * @param {number} id Unique identifier of the TournamentSeasonStage resource
     * @param {string} [expand] Specify additional information to include with the response
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentsApi
     */
    public async tournamentsSeasonsStagesIdStandingGet(id: number, expand?: string, acceptLanguage?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<LeagueStandingData>>> {
        return TournamentsApiFp(this.configuration).tournamentsSeasonsStagesIdStandingGet(id, expand, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of Teams, which are participating in a given TournamentSeasonStage
     * @param {number} id Unique identifier of the TournamentSeasonStage resource
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentsApi
     */
    public async tournamentsSeasonsStagesIdTeamsGet(id: number, acceptLanguage?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<PartialTeam>>> {
        return TournamentsApiFp(this.configuration).tournamentsSeasonsStagesIdTeamsGet(id, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
}
