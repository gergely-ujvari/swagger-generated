/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { NotFoundError } from '../models';
import { Player } from '../models';
import { PlayerDto } from '../models';
import { PlayerEditDto } from '../models';
import { PlayerPageDto } from '../models';
import { PlayerProfile } from '../models';
import { PlayerStatistics } from '../models';
import { PlayerTeam } from '../models';
import { V2ActiveClubsInput } from '../models';
import { V2PlayerActiveClub } from '../models';
import { V2PlayerProfile } from '../models';
/**
 * PlayersApi - axios parameter creator
 * @export
 */
export const PlayersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Search player list by parameters
         * @param {string} name Filter players by names. Length must be &gt;&#x3D; 4. The filter matches on a per word basis. If you query for &#x27;Ronaldo&#x27; it will match both &#x27;Cristiono Ronaldo&#x27; and &#x27;Ronaldo&#x27;
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {number} [maxResults] Limit the number of results returned
         * @param {number} [teamId] Return only players which are currently in the specified team&#x27;s squad
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersGet: async (name: string, acceptLanguage?: string, maxResults?: number, teamId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling playersGet.');
            }
            const localVarPath = `/players`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['max_results'] = maxResults;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a specific Player
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [expand] Specify additional information to include in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersIdGet: async (id: string, acceptLanguage?: string, expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling playersIdGet.');
            }
            const localVarPath = `/players/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns statistics throughout a Player's career
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [type] Filter statistics for different types of team and competition
         * @param {string} [groupBy] Group response by a given property
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersIdStatisticsGet: async (id: string, acceptLanguage?: string, type?: string, groupBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling playersIdStatisticsGet.');
            }
            const localVarPath = `/players/{id}/statistics`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (groupBy !== undefined) {
                localVarQueryParameter['group_by'] = groupBy;
            }

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the Teams in which a Player has participated during his career
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersIdTeamsGet: async (id: string, acceptLanguage?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling playersIdTeamsGet.');
            }
            const localVarPath = `/players/{id}/teams`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Search player list by parameters
         * @param {number} offset The number of items to skip before starting to collect the result set
         * @param {number} limit Limit the number of results returned
         * @param {string} [languageCode] Returns translated response based on the language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2PlayersGet: async (offset: number, limit: number, languageCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'offset' is not null or undefined
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling v2PlayersGet.');
            }
            // verify required parameter 'limit' is not null or undefined
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling v2PlayersGet.');
            }
            const localVarPath = `/v2/players`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (languageCode !== undefined) {
                localVarQueryParameter['language_code'] = languageCode;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the active clubs of a player
         * @param {string} id Unique identifier of the resource.
         * @param {V2ActiveClubsInput} [body] Active clubs input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2PlayersIdClubsActivePut: async (id: string, body?: V2ActiveClubsInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v2PlayersIdClubsActivePut.');
            }
            const localVarPath = `/v2/players/{id}/clubs/active`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get player by id
         * @param {string} id Unique identifier of the resource.
         * @param {string} [languageCode] Returns translated response based on the language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2PlayersIdGet: async (id: string, languageCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v2PlayersIdGet.');
            }
            const localVarPath = `/v2/players/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (languageCode !== undefined) {
                localVarQueryParameter['language_code'] = languageCode;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Player information
         * @param {PlayerEditDto} body Player information to save in persistance
         * @param {string} id Unique identifier of the resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2PlayersIdPut: async (body: PlayerEditDto, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v2PlayersIdPut.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v2PlayersIdPut.');
            }
            const localVarPath = `/v2/players/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Store a newly created player in storage.
         * @param {PlayerEditDto} [body] PlayerEditDto object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2PlayersPost: async (body?: PlayerEditDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/players`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlayersApi - functional programming interface
 * @export
 */
export const PlayersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Search player list by parameters
         * @param {string} name Filter players by names. Length must be &gt;&#x3D; 4. The filter matches on a per word basis. If you query for &#x27;Ronaldo&#x27; it will match both &#x27;Cristiono Ronaldo&#x27; and &#x27;Ronaldo&#x27;
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {number} [maxResults] Limit the number of results returned
         * @param {number} [teamId] Return only players which are currently in the specified team&#x27;s squad
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playersGet(name: string, acceptLanguage?: string, maxResults?: number, teamId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Player>>>> {
            const localVarAxiosArgs = await PlayersApiAxiosParamCreator(configuration).playersGet(name, acceptLanguage, maxResults, teamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information about a specific Player
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [expand] Specify additional information to include in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playersIdGet(id: string, acceptLanguage?: string, expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PlayerProfile>>> {
            const localVarAxiosArgs = await PlayersApiAxiosParamCreator(configuration).playersIdGet(id, acceptLanguage, expand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns statistics throughout a Player's career
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [type] Filter statistics for different types of team and competition
         * @param {string} [groupBy] Group response by a given property
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playersIdStatisticsGet(id: string, acceptLanguage?: string, type?: string, groupBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<PlayerStatistics>>>> {
            const localVarAxiosArgs = await PlayersApiAxiosParamCreator(configuration).playersIdStatisticsGet(id, acceptLanguage, type, groupBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the Teams in which a Player has participated during his career
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playersIdTeamsGet(id: string, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<PlayerTeam>>>> {
            const localVarAxiosArgs = await PlayersApiAxiosParamCreator(configuration).playersIdTeamsGet(id, acceptLanguage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Search player list by parameters
         * @param {number} offset The number of items to skip before starting to collect the result set
         * @param {number} limit Limit the number of results returned
         * @param {string} [languageCode] Returns translated response based on the language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2PlayersGet(offset: number, limit: number, languageCode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PlayerPageDto>>> {
            const localVarAxiosArgs = await PlayersApiAxiosParamCreator(configuration).v2PlayersGet(offset, limit, languageCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update the active clubs of a player
         * @param {string} id Unique identifier of the resource.
         * @param {V2ActiveClubsInput} [body] Active clubs input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2PlayersIdClubsActivePut(id: string, body?: V2ActiveClubsInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<V2PlayerActiveClub>>>> {
            const localVarAxiosArgs = await PlayersApiAxiosParamCreator(configuration).v2PlayersIdClubsActivePut(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get player by id
         * @param {string} id Unique identifier of the resource.
         * @param {string} [languageCode] Returns translated response based on the language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2PlayersIdGet(id: string, languageCode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<V2PlayerProfile>>> {
            const localVarAxiosArgs = await PlayersApiAxiosParamCreator(configuration).v2PlayersIdGet(id, languageCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update Player information
         * @param {PlayerEditDto} body Player information to save in persistance
         * @param {string} id Unique identifier of the resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2PlayersIdPut(body: PlayerEditDto, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await PlayersApiAxiosParamCreator(configuration).v2PlayersIdPut(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Store a newly created player in storage.
         * @param {PlayerEditDto} [body] PlayerEditDto object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2PlayersPost(body?: PlayerEditDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PlayerDto>>> {
            const localVarAxiosArgs = await PlayersApiAxiosParamCreator(configuration).v2PlayersPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PlayersApi - factory interface
 * @export
 */
export const PlayersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Search player list by parameters
         * @param {string} name Filter players by names. Length must be &gt;&#x3D; 4. The filter matches on a per word basis. If you query for &#x27;Ronaldo&#x27; it will match both &#x27;Cristiono Ronaldo&#x27; and &#x27;Ronaldo&#x27;
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {number} [maxResults] Limit the number of results returned
         * @param {number} [teamId] Return only players which are currently in the specified team&#x27;s squad
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playersGet(name: string, acceptLanguage?: string, maxResults?: number, teamId?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Player>>> {
            return PlayersApiFp(configuration).playersGet(name, acceptLanguage, maxResults, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a specific Player
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [expand] Specify additional information to include in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playersIdGet(id: string, acceptLanguage?: string, expand?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<PlayerProfile>> {
            return PlayersApiFp(configuration).playersIdGet(id, acceptLanguage, expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns statistics throughout a Player's career
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [type] Filter statistics for different types of team and competition
         * @param {string} [groupBy] Group response by a given property
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playersIdStatisticsGet(id: string, acceptLanguage?: string, type?: string, groupBy?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<PlayerStatistics>>> {
            return PlayersApiFp(configuration).playersIdStatisticsGet(id, acceptLanguage, type, groupBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the Teams in which a Player has participated during his career
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playersIdTeamsGet(id: string, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<PlayerTeam>>> {
            return PlayersApiFp(configuration).playersIdTeamsGet(id, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Search player list by parameters
         * @param {number} offset The number of items to skip before starting to collect the result set
         * @param {number} limit Limit the number of results returned
         * @param {string} [languageCode] Returns translated response based on the language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2PlayersGet(offset: number, limit: number, languageCode?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<PlayerPageDto>> {
            return PlayersApiFp(configuration).v2PlayersGet(offset, limit, languageCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the active clubs of a player
         * @param {string} id Unique identifier of the resource.
         * @param {V2ActiveClubsInput} [body] Active clubs input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2PlayersIdClubsActivePut(id: string, body?: V2ActiveClubsInput, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<V2PlayerActiveClub>>> {
            return PlayersApiFp(configuration).v2PlayersIdClubsActivePut(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Get player by id
         * @param {string} id Unique identifier of the resource.
         * @param {string} [languageCode] Returns translated response based on the language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2PlayersIdGet(id: string, languageCode?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<V2PlayerProfile>> {
            return PlayersApiFp(configuration).v2PlayersIdGet(id, languageCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Player information
         * @param {PlayerEditDto} body Player information to save in persistance
         * @param {string} id Unique identifier of the resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2PlayersIdPut(body: PlayerEditDto, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return PlayersApiFp(configuration).v2PlayersIdPut(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Store a newly created player in storage.
         * @param {PlayerEditDto} [body] PlayerEditDto object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2PlayersPost(body?: PlayerEditDto, options?: AxiosRequestConfig): Promise<AxiosResponse<PlayerDto>> {
            return PlayersApiFp(configuration).v2PlayersPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlayersApi - object-oriented interface
 * @export
 * @class PlayersApi
 * @extends {BaseAPI}
 */
export class PlayersApi extends BaseAPI {
    /**
     * Search player list by parameters
     * @param {string} name Filter players by names. Length must be &gt;&#x3D; 4. The filter matches on a per word basis. If you query for &#x27;Ronaldo&#x27; it will match both &#x27;Cristiono Ronaldo&#x27; and &#x27;Ronaldo&#x27;
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {number} [maxResults] Limit the number of results returned
     * @param {number} [teamId] Return only players which are currently in the specified team&#x27;s squad
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    public async playersGet(name: string, acceptLanguage?: string, maxResults?: number, teamId?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Player>>> {
        return PlayersApiFp(this.configuration).playersGet(name, acceptLanguage, maxResults, teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get information about a specific Player
     * @param {string} id Unique identifier of the resource.
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {string} [expand] Specify additional information to include in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    public async playersIdGet(id: string, acceptLanguage?: string, expand?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<PlayerProfile>> {
        return PlayersApiFp(this.configuration).playersIdGet(id, acceptLanguage, expand, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns statistics throughout a Player's career
     * @param {string} id Unique identifier of the resource.
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {string} [type] Filter statistics for different types of team and competition
     * @param {string} [groupBy] Group response by a given property
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    public async playersIdStatisticsGet(id: string, acceptLanguage?: string, type?: string, groupBy?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<PlayerStatistics>>> {
        return PlayersApiFp(this.configuration).playersIdStatisticsGet(id, acceptLanguage, type, groupBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the Teams in which a Player has participated during his career
     * @param {string} id Unique identifier of the resource.
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    public async playersIdTeamsGet(id: string, acceptLanguage?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<PlayerTeam>>> {
        return PlayersApiFp(this.configuration).playersIdTeamsGet(id, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Search player list by parameters
     * @param {number} offset The number of items to skip before starting to collect the result set
     * @param {number} limit Limit the number of results returned
     * @param {string} [languageCode] Returns translated response based on the language code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    public async v2PlayersGet(offset: number, limit: number, languageCode?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<PlayerPageDto>> {
        return PlayersApiFp(this.configuration).v2PlayersGet(offset, limit, languageCode, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update the active clubs of a player
     * @param {string} id Unique identifier of the resource.
     * @param {V2ActiveClubsInput} [body] Active clubs input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    public async v2PlayersIdClubsActivePut(id: string, body?: V2ActiveClubsInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<V2PlayerActiveClub>>> {
        return PlayersApiFp(this.configuration).v2PlayersIdClubsActivePut(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get player by id
     * @param {string} id Unique identifier of the resource.
     * @param {string} [languageCode] Returns translated response based on the language code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    public async v2PlayersIdGet(id: string, languageCode?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<V2PlayerProfile>> {
        return PlayersApiFp(this.configuration).v2PlayersIdGet(id, languageCode, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update Player information
     * @param {PlayerEditDto} body Player information to save in persistance
     * @param {string} id Unique identifier of the resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    public async v2PlayersIdPut(body: PlayerEditDto, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return PlayersApiFp(this.configuration).v2PlayersIdPut(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Store a newly created player in storage.
     * @param {PlayerEditDto} [body] PlayerEditDto object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    public async v2PlayersPost(body?: PlayerEditDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<PlayerDto>> {
        return PlayersApiFp(this.configuration).v2PlayersPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
