/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { NotFoundError } from '../models';
import { V2Season } from '../models';
import { V2SeasonDetails } from '../models';
import { V2SeasonList } from '../models';
import { V2SeasonStage } from '../models';
import { V2SeasonStageCollection } from '../models';
import { V2TournamentSeasonInsertInput } from '../models';
import { V2TournamentSeasonStatusInput } from '../models';
import { V2TournamentSeasonUpdateInput } from '../models';
/**
 * SeasonApi - axios parameter creator
 * @export
 */
export const SeasonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the details of a season by season_id, or by tournament_id and active status
         * @param {string} [seasonId] The ID of the season of interest
         * @param {string} [tournamentId] The ID of the tournament whose active season is of interest
         * @param {string} [status] Required only when the tournament_id parameter is provided
         * @param {string} [languageCode] Returns translated response based on the language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2SeasonsDetailsGet: async (seasonId?: string, tournamentId?: string, status?: string, languageCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/seasons/details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (seasonId !== undefined) {
                localVarQueryParameter['season_id'] = seasonId;
            }

            if (tournamentId !== undefined) {
                localVarQueryParameter['tournament_id'] = tournamentId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (languageCode !== undefined) {
                localVarQueryParameter['language_code'] = languageCode;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get seasons by tournament_id, team_id and status
         * @param {string} [tournamentId] Required only if no other parameters are provided
         * @param {string} [teamId] Required only if no other paramenters are provided
         * @param {string} [status] Required only if no other parameters are provided
         * @param {string} [languageCode] Returns translated response based on the language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2SeasonsGet: async (tournamentId?: string, teamId?: string, status?: string, languageCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/seasons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (tournamentId !== undefined) {
                localVarQueryParameter['tournament_id'] = tournamentId;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (languageCode !== undefined) {
                localVarQueryParameter['language_code'] = languageCode;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing season
         * @param {V2TournamentSeasonUpdateInput} body Season name
         * @param {string} id Unique identifier of the resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2SeasonsIdPut: async (body: V2TournamentSeasonUpdateInput, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v2SeasonsIdPut.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v2SeasonsIdPut.');
            }
            const localVarPath = `/v2/seasons/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List all stages for specific season
         * @param {string} id Unique identifier of the resource.
         * @param {string} [languageCode] Returns translated response based on the language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2SeasonsIdStagesGet: async (id: string, languageCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v2SeasonsIdStagesGet.');
            }
            const localVarPath = `/v2/seasons/{id}/stages`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (languageCode !== undefined) {
                localVarQueryParameter['language_code'] = languageCode;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create or update multiple stages
         * @param {Array<V2SeasonStage>} body List of stages to be updated or created
         * @param {string} id Unique identifier of the resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2SeasonsIdStagesPost: async (body: Array<V2SeasonStage>, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v2SeasonsIdStagesPost.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v2SeasonsIdStagesPost.');
            }
            const localVarPath = `/v2/seasons/{id}/stages`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new season
         * @param {V2TournamentSeasonInsertInput} body Season information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2SeasonsPost: async (body: V2TournamentSeasonInsertInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v2SeasonsPost.');
            }
            const localVarPath = `/v2/seasons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Permanently delete stage
         * @param {string} id Unique identifier of the resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2StagesIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v2StagesIdDelete.');
            }
            const localVarPath = `/v2/stages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Set the current season as active and change all other seasons in the tournament to inactive
         * @param {V2TournamentSeasonStatusInput} body Season unique identifier
         * @param {string} id Unique identifier of the resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2TournamentsIdSeasonsCurrentPatch: async (body: V2TournamentSeasonStatusInput, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v2TournamentsIdSeasonsCurrentPatch.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v2TournamentsIdSeasonsCurrentPatch.');
            }
            const localVarPath = `/v2/tournaments/{id}/seasons/current`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SeasonApi - functional programming interface
 * @export
 */
export const SeasonApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get the details of a season by season_id, or by tournament_id and active status
         * @param {string} [seasonId] The ID of the season of interest
         * @param {string} [tournamentId] The ID of the tournament whose active season is of interest
         * @param {string} [status] Required only when the tournament_id parameter is provided
         * @param {string} [languageCode] Returns translated response based on the language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2SeasonsDetailsGet(seasonId?: string, tournamentId?: string, status?: string, languageCode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<V2SeasonDetails>>> {
            const localVarAxiosArgs = await SeasonApiAxiosParamCreator(configuration).v2SeasonsDetailsGet(seasonId, tournamentId, status, languageCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get seasons by tournament_id, team_id and status
         * @param {string} [tournamentId] Required only if no other parameters are provided
         * @param {string} [teamId] Required only if no other paramenters are provided
         * @param {string} [status] Required only if no other parameters are provided
         * @param {string} [languageCode] Returns translated response based on the language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2SeasonsGet(tournamentId?: string, teamId?: string, status?: string, languageCode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<V2SeasonList>>> {
            const localVarAxiosArgs = await SeasonApiAxiosParamCreator(configuration).v2SeasonsGet(tournamentId, teamId, status, languageCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update an existing season
         * @param {V2TournamentSeasonUpdateInput} body Season name
         * @param {string} id Unique identifier of the resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2SeasonsIdPut(body: V2TournamentSeasonUpdateInput, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<V2Season>>> {
            const localVarAxiosArgs = await SeasonApiAxiosParamCreator(configuration).v2SeasonsIdPut(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List all stages for specific season
         * @param {string} id Unique identifier of the resource.
         * @param {string} [languageCode] Returns translated response based on the language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2SeasonsIdStagesGet(id: string, languageCode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<V2SeasonStageCollection>>> {
            const localVarAxiosArgs = await SeasonApiAxiosParamCreator(configuration).v2SeasonsIdStagesGet(id, languageCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create or update multiple stages
         * @param {Array<V2SeasonStage>} body List of stages to be updated or created
         * @param {string} id Unique identifier of the resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2SeasonsIdStagesPost(body: Array<V2SeasonStage>, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<V2SeasonStageCollection>>> {
            const localVarAxiosArgs = await SeasonApiAxiosParamCreator(configuration).v2SeasonsIdStagesPost(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new season
         * @param {V2TournamentSeasonInsertInput} body Season information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2SeasonsPost(body: V2TournamentSeasonInsertInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<V2Season>>> {
            const localVarAxiosArgs = await SeasonApiAxiosParamCreator(configuration).v2SeasonsPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Permanently delete stage
         * @param {string} id Unique identifier of the resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2StagesIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SeasonApiAxiosParamCreator(configuration).v2StagesIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Set the current season as active and change all other seasons in the tournament to inactive
         * @param {V2TournamentSeasonStatusInput} body Season unique identifier
         * @param {string} id Unique identifier of the resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2TournamentsIdSeasonsCurrentPatch(body: V2TournamentSeasonStatusInput, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<V2Season>>> {
            const localVarAxiosArgs = await SeasonApiAxiosParamCreator(configuration).v2TournamentsIdSeasonsCurrentPatch(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SeasonApi - factory interface
 * @export
 */
export const SeasonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get the details of a season by season_id, or by tournament_id and active status
         * @param {string} [seasonId] The ID of the season of interest
         * @param {string} [tournamentId] The ID of the tournament whose active season is of interest
         * @param {string} [status] Required only when the tournament_id parameter is provided
         * @param {string} [languageCode] Returns translated response based on the language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2SeasonsDetailsGet(seasonId?: string, tournamentId?: string, status?: string, languageCode?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<V2SeasonDetails>> {
            return SeasonApiFp(configuration).v2SeasonsDetailsGet(seasonId, tournamentId, status, languageCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Get seasons by tournament_id, team_id and status
         * @param {string} [tournamentId] Required only if no other parameters are provided
         * @param {string} [teamId] Required only if no other paramenters are provided
         * @param {string} [status] Required only if no other parameters are provided
         * @param {string} [languageCode] Returns translated response based on the language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2SeasonsGet(tournamentId?: string, teamId?: string, status?: string, languageCode?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<V2SeasonList>> {
            return SeasonApiFp(configuration).v2SeasonsGet(tournamentId, teamId, status, languageCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing season
         * @param {V2TournamentSeasonUpdateInput} body Season name
         * @param {string} id Unique identifier of the resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2SeasonsIdPut(body: V2TournamentSeasonUpdateInput, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<V2Season>> {
            return SeasonApiFp(configuration).v2SeasonsIdPut(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * List all stages for specific season
         * @param {string} id Unique identifier of the resource.
         * @param {string} [languageCode] Returns translated response based on the language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2SeasonsIdStagesGet(id: string, languageCode?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<V2SeasonStageCollection>> {
            return SeasonApiFp(configuration).v2SeasonsIdStagesGet(id, languageCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Create or update multiple stages
         * @param {Array<V2SeasonStage>} body List of stages to be updated or created
         * @param {string} id Unique identifier of the resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2SeasonsIdStagesPost(body: Array<V2SeasonStage>, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<V2SeasonStageCollection>> {
            return SeasonApiFp(configuration).v2SeasonsIdStagesPost(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new season
         * @param {V2TournamentSeasonInsertInput} body Season information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2SeasonsPost(body: V2TournamentSeasonInsertInput, options?: AxiosRequestConfig): Promise<AxiosResponse<V2Season>> {
            return SeasonApiFp(configuration).v2SeasonsPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Permanently delete stage
         * @param {string} id Unique identifier of the resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2StagesIdDelete(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SeasonApiFp(configuration).v2StagesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Set the current season as active and change all other seasons in the tournament to inactive
         * @param {V2TournamentSeasonStatusInput} body Season unique identifier
         * @param {string} id Unique identifier of the resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2TournamentsIdSeasonsCurrentPatch(body: V2TournamentSeasonStatusInput, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<V2Season>> {
            return SeasonApiFp(configuration).v2TournamentsIdSeasonsCurrentPatch(body, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SeasonApi - object-oriented interface
 * @export
 * @class SeasonApi
 * @extends {BaseAPI}
 */
export class SeasonApi extends BaseAPI {
    /**
     * Get the details of a season by season_id, or by tournament_id and active status
     * @param {string} [seasonId] The ID of the season of interest
     * @param {string} [tournamentId] The ID of the tournament whose active season is of interest
     * @param {string} [status] Required only when the tournament_id parameter is provided
     * @param {string} [languageCode] Returns translated response based on the language code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonApi
     */
    public async v2SeasonsDetailsGet(seasonId?: string, tournamentId?: string, status?: string, languageCode?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<V2SeasonDetails>> {
        return SeasonApiFp(this.configuration).v2SeasonsDetailsGet(seasonId, tournamentId, status, languageCode, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get seasons by tournament_id, team_id and status
     * @param {string} [tournamentId] Required only if no other parameters are provided
     * @param {string} [teamId] Required only if no other paramenters are provided
     * @param {string} [status] Required only if no other parameters are provided
     * @param {string} [languageCode] Returns translated response based on the language code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonApi
     */
    public async v2SeasonsGet(tournamentId?: string, teamId?: string, status?: string, languageCode?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<V2SeasonList>> {
        return SeasonApiFp(this.configuration).v2SeasonsGet(tournamentId, teamId, status, languageCode, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update an existing season
     * @param {V2TournamentSeasonUpdateInput} body Season name
     * @param {string} id Unique identifier of the resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonApi
     */
    public async v2SeasonsIdPut(body: V2TournamentSeasonUpdateInput, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<V2Season>> {
        return SeasonApiFp(this.configuration).v2SeasonsIdPut(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List all stages for specific season
     * @param {string} id Unique identifier of the resource.
     * @param {string} [languageCode] Returns translated response based on the language code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonApi
     */
    public async v2SeasonsIdStagesGet(id: string, languageCode?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<V2SeasonStageCollection>> {
        return SeasonApiFp(this.configuration).v2SeasonsIdStagesGet(id, languageCode, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create or update multiple stages
     * @param {Array<V2SeasonStage>} body List of stages to be updated or created
     * @param {string} id Unique identifier of the resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonApi
     */
    public async v2SeasonsIdStagesPost(body: Array<V2SeasonStage>, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<V2SeasonStageCollection>> {
        return SeasonApiFp(this.configuration).v2SeasonsIdStagesPost(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new season
     * @param {V2TournamentSeasonInsertInput} body Season information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonApi
     */
    public async v2SeasonsPost(body: V2TournamentSeasonInsertInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<V2Season>> {
        return SeasonApiFp(this.configuration).v2SeasonsPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Permanently delete stage
     * @param {string} id Unique identifier of the resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonApi
     */
    public async v2StagesIdDelete(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SeasonApiFp(this.configuration).v2StagesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Set the current season as active and change all other seasons in the tournament to inactive
     * @param {V2TournamentSeasonStatusInput} body Season unique identifier
     * @param {string} id Unique identifier of the resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonApi
     */
    public async v2TournamentsIdSeasonsCurrentPatch(body: V2TournamentSeasonStatusInput, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<V2Season>> {
        return SeasonApiFp(this.configuration).v2TournamentsIdSeasonsCurrentPatch(body, id, options).then((request) => request(this.axios, this.basePath));
    }
}
