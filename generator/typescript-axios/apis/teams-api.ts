/* tslint:disable */
/* eslint-disable */
/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Event } from '../models';
import { NotFoundError } from '../models';
import { PartialTeam } from '../models';
import { Team } from '../models';
import { TeamEditDto } from '../models';
import { TeamForm } from '../models';
import { TeamPageDto } from '../models';
import { TeamPlayer } from '../models';
import { TeamPlayerSeasonStatistics } from '../models';
import { TeamSeasonStatistics } from '../models';
import { TournamentSeasonWithTournament } from '../models';
import { V2TeamColors } from '../models';
import { V2TeamProfile } from '../models';
/**
 * TeamsApi - axios parameter creator
 * @export
 */
export const TeamsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Teams for a specific Country.id
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [national] Filter teams for different types of national and non national
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesIdTeamsGet: async (id: string, acceptLanguage?: string, national?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling countriesIdTeamsGet.');
            }
            const localVarPath = `/countries/{id}/teams`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (national !== undefined) {
                localVarQueryParameter['national'] = national;
            }

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Search all teams by parameters
         * @param {string} name Filter by team. Length must be &gt;&#x3D; 4. The filter matches on a per word basis. If you query for &#x27;United&#x27; it will match both &#x27;West Ham United&#x27; and &#x27;Newcastle United&#x27;
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {number} [maxResults] Limit the number of results returned
         * @param {number} [countryId] Filter teams just from the specified country
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsGet: async (name: string, acceptLanguage?: string, maxResults?: number, countryId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling teamsGet.');
            }
            const localVarPath = `/teams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['max_results'] = maxResults;
            }

            if (countryId !== undefined) {
                localVarQueryParameter['country_id'] = countryId;
            }

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of events in which a team with a specified id has participated
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {Date} [fromTime] Filter events, which have a start_time after the specified date, format is RFC 3339
         * @param {Date} [toTime] Filter events, which have a start_time before the specified date, format is RFC 3339
         * @param {string} [direction] Whether to sort the results by ascending or descending order
         * @param {number} [tournamentSeasonStageId] Filter events for a specific tournament_season_stage.id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsIdEventsGet: async (id: string, acceptLanguage?: string, fromTime?: Date, toTime?: Date, direction?: string, tournamentSeasonStageId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling teamsIdEventsGet.');
            }
            const localVarPath = `/teams/{id}/events`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (fromTime !== undefined) {
                localVarQueryParameter['from_time'] = (fromTime as any instanceof Date) ?
                    (fromTime as any).toISOString() :
                    fromTime;
            }

            if (toTime !== undefined) {
                localVarQueryParameter['to_time'] = (toTime as any instanceof Date) ?
                    (toTime as any).toISOString() :
                    toTime;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (tournamentSeasonStageId !== undefined) {
                localVarQueryParameter['tournament_season_stage_id'] = tournamentSeasonStageId;
            }

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Team form information accross all tournaments
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [expand] Whether to include information about every event in the TeamForm response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsIdFormGet: async (id: string, acceptLanguage?: string, expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling teamsIdFormGet.');
            }
            const localVarPath = `/teams/{id}/form`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a specific Team
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [expand] Specifies additional information to include with the Team response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsIdGet: async (id: string, acceptLanguage?: string, expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling teamsIdGet.');
            }
            const localVarPath = `/teams/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current squad for a Team
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [groupBy] Group players by a specific property
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsIdPlayersGet: async (id: string, acceptLanguage?: string, groupBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling teamsIdPlayersGet.');
            }
            const localVarPath = `/teams/{id}/players`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (groupBy !== undefined) {
                localVarQueryParameter['group_by'] = groupBy;
            }

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get player statistics for the current season in the Team's League
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [groupBy] Group the response by a specific property
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsIdPlayersStatisticsGet: async (id: string, acceptLanguage?: string, groupBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling teamsIdPlayersStatisticsGet.');
            }
            const localVarPath = `/teams/{id}/players/statistics`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (groupBy !== undefined) {
                localVarQueryParameter['group_by'] = groupBy;
            }

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of TournamentSeasons for which Player Statistics are available
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsIdPlayersStatisticsSeasonsGet: async (id: string, acceptLanguage?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling teamsIdPlayersStatisticsSeasonsGet.');
            }
            const localVarPath = `/teams/{id}/players/statistics/seasons`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get player statistics for the current season in the Team's League
         * @param {number} seasonId Unique identifier of the TournamentSeason resource
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [groupBy] Group the response by a specific property
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsIdPlayersStatisticsSeasonsSeasonIdGet: async (seasonId: number, id: string, acceptLanguage?: string, groupBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seasonId' is not null or undefined
            if (seasonId === null || seasonId === undefined) {
                throw new RequiredError('seasonId','Required parameter seasonId was null or undefined when calling teamsIdPlayersStatisticsSeasonsSeasonIdGet.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling teamsIdPlayersStatisticsSeasonsSeasonIdGet.');
            }
            const localVarPath = `/teams/{id}/players/statistics/seasons/{seasonId}`
                .replace(`{${"seasonId"}}`, encodeURIComponent(String(seasonId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (groupBy !== undefined) {
                localVarQueryParameter['group_by'] = groupBy;
            }

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the statistics for the latest League the team participates in
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [standing] Select whether to include a full league standing or just the team&#x27;s position
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsIdStatisticsLeagueGet: async (id: string, acceptLanguage?: string, standing?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling teamsIdStatisticsLeagueGet.');
            }
            const localVarPath = `/teams/{id}/statistics/league`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (standing !== undefined) {
                localVarQueryParameter['standing'] = standing;
            }

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of Teams, which are participating in a given TournamentSeason
         * @param {number} id Unique identifier of the TournamentSeason resource
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentsSeasonsIdTeamsGet: async (id: number, acceptLanguage?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling tournamentsSeasonsIdTeamsGet.');
            }
            const localVarPath = `/tournaments/seasons/{id}/teams`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of Teams, which are participating in a given TournamentSeasonStage
         * @param {number} id Unique identifier of the TournamentSeasonStage resource
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentsSeasonsStagesIdTeamsGet: async (id: number, acceptLanguage?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling tournamentsSeasonsStagesIdTeamsGet.');
            }
            const localVarPath = `/tournaments/seasons/stages/{id}/teams`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Manually insert team colors by team or event.
         * @param {V2TeamColors} [body] Team shirt colors data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2TeamsColorsPost: async (body?: V2TeamColors, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/teams/colors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get teams list
         * @param {number} offset The number of items to skip before starting to collect the result set
         * @param {number} limit Limit the number of results returned
         * @param {string} [languageCode] Returns translated response based on the language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2TeamsGet: async (offset: number, limit: number, languageCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'offset' is not null or undefined
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling v2TeamsGet.');
            }
            // verify required parameter 'limit' is not null or undefined
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling v2TeamsGet.');
            }
            const localVarPath = `/v2/teams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (languageCode !== undefined) {
                localVarQueryParameter['language_code'] = languageCode;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get team by id
         * @param {string} id Unique identifier of the resource.
         * @param {string} [languageCode] Returns translated response based on the language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2TeamsIdGet: async (id: string, languageCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v2TeamsIdGet.');
            }
            const localVarPath = `/v2/teams/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            if (languageCode !== undefined) {
                localVarQueryParameter['language_code'] = languageCode;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Team information
         * @param {TeamEditDto} body Team information to save in persistance
         * @param {string} id Unique identifier of the resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2TeamsIdPut: async (body: TeamEditDto, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v2TeamsIdPut.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v2TeamsIdPut.');
            }
            const localVarPath = `/v2/teams/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Manually insert team.
         * @param {TeamEditDto} [body] TeamEditDto object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2TeamsPost: async (body?: TeamEditDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/teams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamsApi - functional programming interface
 * @export
 */
export const TeamsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get Teams for a specific Country.id
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [national] Filter teams for different types of national and non national
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countriesIdTeamsGet(id: string, acceptLanguage?: string, national?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Team>>>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).countriesIdTeamsGet(id, acceptLanguage, national, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Search all teams by parameters
         * @param {string} name Filter by team. Length must be &gt;&#x3D; 4. The filter matches on a per word basis. If you query for &#x27;United&#x27; it will match both &#x27;West Ham United&#x27; and &#x27;Newcastle United&#x27;
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {number} [maxResults] Limit the number of results returned
         * @param {number} [countryId] Filter teams just from the specified country
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsGet(name: string, acceptLanguage?: string, maxResults?: number, countryId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Team>>>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).teamsGet(name, acceptLanguage, maxResults, countryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of events in which a team with a specified id has participated
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {Date} [fromTime] Filter events, which have a start_time after the specified date, format is RFC 3339
         * @param {Date} [toTime] Filter events, which have a start_time before the specified date, format is RFC 3339
         * @param {string} [direction] Whether to sort the results by ascending or descending order
         * @param {number} [tournamentSeasonStageId] Filter events for a specific tournament_season_stage.id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsIdEventsGet(id: string, acceptLanguage?: string, fromTime?: Date, toTime?: Date, direction?: string, tournamentSeasonStageId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Event>>>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).teamsIdEventsGet(id, acceptLanguage, fromTime, toTime, direction, tournamentSeasonStageId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Team form information accross all tournaments
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [expand] Whether to include information about every event in the TeamForm response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsIdFormGet(id: string, acceptLanguage?: string, expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<TeamForm>>>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).teamsIdFormGet(id, acceptLanguage, expand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information about a specific Team
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [expand] Specifies additional information to include with the Team response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsIdGet(id: string, acceptLanguage?: string, expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Team>>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).teamsIdGet(id, acceptLanguage, expand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the current squad for a Team
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [groupBy] Group players by a specific property
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsIdPlayersGet(id: string, acceptLanguage?: string, groupBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<TeamPlayer>>>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).teamsIdPlayersGet(id, acceptLanguage, groupBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get player statistics for the current season in the Team's League
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [groupBy] Group the response by a specific property
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsIdPlayersStatisticsGet(id: string, acceptLanguage?: string, groupBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TeamPlayerSeasonStatistics>>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).teamsIdPlayersStatisticsGet(id, acceptLanguage, groupBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of TournamentSeasons for which Player Statistics are available
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsIdPlayersStatisticsSeasonsGet(id: string, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<TournamentSeasonWithTournament>>>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).teamsIdPlayersStatisticsSeasonsGet(id, acceptLanguage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get player statistics for the current season in the Team's League
         * @param {number} seasonId Unique identifier of the TournamentSeason resource
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [groupBy] Group the response by a specific property
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsIdPlayersStatisticsSeasonsSeasonIdGet(seasonId: number, id: string, acceptLanguage?: string, groupBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TeamPlayerSeasonStatistics>>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).teamsIdPlayersStatisticsSeasonsSeasonIdGet(seasonId, id, acceptLanguage, groupBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the statistics for the latest League the team participates in
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [standing] Select whether to include a full league standing or just the team&#x27;s position
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsIdStatisticsLeagueGet(id: string, acceptLanguage?: string, standing?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TeamSeasonStatistics>>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).teamsIdStatisticsLeagueGet(id, acceptLanguage, standing, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of Teams, which are participating in a given TournamentSeason
         * @param {number} id Unique identifier of the TournamentSeason resource
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsSeasonsIdTeamsGet(id: number, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<PartialTeam>>>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).tournamentsSeasonsIdTeamsGet(id, acceptLanguage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of Teams, which are participating in a given TournamentSeasonStage
         * @param {number} id Unique identifier of the TournamentSeasonStage resource
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsSeasonsStagesIdTeamsGet(id: number, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<PartialTeam>>>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).tournamentsSeasonsStagesIdTeamsGet(id, acceptLanguage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Manually insert team colors by team or event.
         * @param {V2TeamColors} [body] Team shirt colors data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2TeamsColorsPost(body?: V2TeamColors, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<V2TeamColors>>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).v2TeamsColorsPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get teams list
         * @param {number} offset The number of items to skip before starting to collect the result set
         * @param {number} limit Limit the number of results returned
         * @param {string} [languageCode] Returns translated response based on the language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2TeamsGet(offset: number, limit: number, languageCode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TeamPageDto>>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).v2TeamsGet(offset, limit, languageCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get team by id
         * @param {string} id Unique identifier of the resource.
         * @param {string} [languageCode] Returns translated response based on the language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2TeamsIdGet(id: string, languageCode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<V2TeamProfile>>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).v2TeamsIdGet(id, languageCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update Team information
         * @param {TeamEditDto} body Team information to save in persistance
         * @param {string} id Unique identifier of the resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2TeamsIdPut(body: TeamEditDto, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<V2TeamProfile>>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).v2TeamsIdPut(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Manually insert team.
         * @param {TeamEditDto} [body] TeamEditDto object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2TeamsPost(body?: TeamEditDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<V2TeamProfile>>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).v2TeamsPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TeamsApi - factory interface
 * @export
 */
export const TeamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get Teams for a specific Country.id
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [national] Filter teams for different types of national and non national
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countriesIdTeamsGet(id: string, acceptLanguage?: string, national?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Team>>> {
            return TeamsApiFp(configuration).countriesIdTeamsGet(id, acceptLanguage, national, options).then((request) => request(axios, basePath));
        },
        /**
         * Search all teams by parameters
         * @param {string} name Filter by team. Length must be &gt;&#x3D; 4. The filter matches on a per word basis. If you query for &#x27;United&#x27; it will match both &#x27;West Ham United&#x27; and &#x27;Newcastle United&#x27;
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {number} [maxResults] Limit the number of results returned
         * @param {number} [countryId] Filter teams just from the specified country
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsGet(name: string, acceptLanguage?: string, maxResults?: number, countryId?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Team>>> {
            return TeamsApiFp(configuration).teamsGet(name, acceptLanguage, maxResults, countryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of events in which a team with a specified id has participated
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {Date} [fromTime] Filter events, which have a start_time after the specified date, format is RFC 3339
         * @param {Date} [toTime] Filter events, which have a start_time before the specified date, format is RFC 3339
         * @param {string} [direction] Whether to sort the results by ascending or descending order
         * @param {number} [tournamentSeasonStageId] Filter events for a specific tournament_season_stage.id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsIdEventsGet(id: string, acceptLanguage?: string, fromTime?: Date, toTime?: Date, direction?: string, tournamentSeasonStageId?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Event>>> {
            return TeamsApiFp(configuration).teamsIdEventsGet(id, acceptLanguage, fromTime, toTime, direction, tournamentSeasonStageId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Team form information accross all tournaments
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [expand] Whether to include information about every event in the TeamForm response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsIdFormGet(id: string, acceptLanguage?: string, expand?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<TeamForm>>> {
            return TeamsApiFp(configuration).teamsIdFormGet(id, acceptLanguage, expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a specific Team
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [expand] Specifies additional information to include with the Team response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsIdGet(id: string, acceptLanguage?: string, expand?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Team>> {
            return TeamsApiFp(configuration).teamsIdGet(id, acceptLanguage, expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the current squad for a Team
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [groupBy] Group players by a specific property
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsIdPlayersGet(id: string, acceptLanguage?: string, groupBy?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<TeamPlayer>>> {
            return TeamsApiFp(configuration).teamsIdPlayersGet(id, acceptLanguage, groupBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get player statistics for the current season in the Team's League
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [groupBy] Group the response by a specific property
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsIdPlayersStatisticsGet(id: string, acceptLanguage?: string, groupBy?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<TeamPlayerSeasonStatistics>> {
            return TeamsApiFp(configuration).teamsIdPlayersStatisticsGet(id, acceptLanguage, groupBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of TournamentSeasons for which Player Statistics are available
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsIdPlayersStatisticsSeasonsGet(id: string, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<TournamentSeasonWithTournament>>> {
            return TeamsApiFp(configuration).teamsIdPlayersStatisticsSeasonsGet(id, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get player statistics for the current season in the Team's League
         * @param {number} seasonId Unique identifier of the TournamentSeason resource
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [groupBy] Group the response by a specific property
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsIdPlayersStatisticsSeasonsSeasonIdGet(seasonId: number, id: string, acceptLanguage?: string, groupBy?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<TeamPlayerSeasonStatistics>> {
            return TeamsApiFp(configuration).teamsIdPlayersStatisticsSeasonsSeasonIdGet(seasonId, id, acceptLanguage, groupBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the statistics for the latest League the team participates in
         * @param {string} id Unique identifier of the resource.
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {string} [standing] Select whether to include a full league standing or just the team&#x27;s position
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsIdStatisticsLeagueGet(id: string, acceptLanguage?: string, standing?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<TeamSeasonStatistics>> {
            return TeamsApiFp(configuration).teamsIdStatisticsLeagueGet(id, acceptLanguage, standing, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of Teams, which are participating in a given TournamentSeason
         * @param {number} id Unique identifier of the TournamentSeason resource
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsSeasonsIdTeamsGet(id: number, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<PartialTeam>>> {
            return TeamsApiFp(configuration).tournamentsSeasonsIdTeamsGet(id, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of Teams, which are participating in a given TournamentSeasonStage
         * @param {number} id Unique identifier of the TournamentSeasonStage resource
         * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentsSeasonsStagesIdTeamsGet(id: number, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<PartialTeam>>> {
            return TeamsApiFp(configuration).tournamentsSeasonsStagesIdTeamsGet(id, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Manually insert team colors by team or event.
         * @param {V2TeamColors} [body] Team shirt colors data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2TeamsColorsPost(body?: V2TeamColors, options?: AxiosRequestConfig): Promise<AxiosResponse<V2TeamColors>> {
            return TeamsApiFp(configuration).v2TeamsColorsPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Get teams list
         * @param {number} offset The number of items to skip before starting to collect the result set
         * @param {number} limit Limit the number of results returned
         * @param {string} [languageCode] Returns translated response based on the language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2TeamsGet(offset: number, limit: number, languageCode?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<TeamPageDto>> {
            return TeamsApiFp(configuration).v2TeamsGet(offset, limit, languageCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Get team by id
         * @param {string} id Unique identifier of the resource.
         * @param {string} [languageCode] Returns translated response based on the language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2TeamsIdGet(id: string, languageCode?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<V2TeamProfile>> {
            return TeamsApiFp(configuration).v2TeamsIdGet(id, languageCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Team information
         * @param {TeamEditDto} body Team information to save in persistance
         * @param {string} id Unique identifier of the resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2TeamsIdPut(body: TeamEditDto, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<V2TeamProfile>> {
            return TeamsApiFp(configuration).v2TeamsIdPut(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Manually insert team.
         * @param {TeamEditDto} [body] TeamEditDto object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2TeamsPost(body?: TeamEditDto, options?: AxiosRequestConfig): Promise<AxiosResponse<V2TeamProfile>> {
            return TeamsApiFp(configuration).v2TeamsPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TeamsApi - object-oriented interface
 * @export
 * @class TeamsApi
 * @extends {BaseAPI}
 */
export class TeamsApi extends BaseAPI {
    /**
     * Get Teams for a specific Country.id
     * @param {string} id Unique identifier of the resource.
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {string} [national] Filter teams for different types of national and non national
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public async countriesIdTeamsGet(id: string, acceptLanguage?: string, national?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Team>>> {
        return TeamsApiFp(this.configuration).countriesIdTeamsGet(id, acceptLanguage, national, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Search all teams by parameters
     * @param {string} name Filter by team. Length must be &gt;&#x3D; 4. The filter matches on a per word basis. If you query for &#x27;United&#x27; it will match both &#x27;West Ham United&#x27; and &#x27;Newcastle United&#x27;
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {number} [maxResults] Limit the number of results returned
     * @param {number} [countryId] Filter teams just from the specified country
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public async teamsGet(name: string, acceptLanguage?: string, maxResults?: number, countryId?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Team>>> {
        return TeamsApiFp(this.configuration).teamsGet(name, acceptLanguage, maxResults, countryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of events in which a team with a specified id has participated
     * @param {string} id Unique identifier of the resource.
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {Date} [fromTime] Filter events, which have a start_time after the specified date, format is RFC 3339
     * @param {Date} [toTime] Filter events, which have a start_time before the specified date, format is RFC 3339
     * @param {string} [direction] Whether to sort the results by ascending or descending order
     * @param {number} [tournamentSeasonStageId] Filter events for a specific tournament_season_stage.id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public async teamsIdEventsGet(id: string, acceptLanguage?: string, fromTime?: Date, toTime?: Date, direction?: string, tournamentSeasonStageId?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Event>>> {
        return TeamsApiFp(this.configuration).teamsIdEventsGet(id, acceptLanguage, fromTime, toTime, direction, tournamentSeasonStageId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Team form information accross all tournaments
     * @param {string} id Unique identifier of the resource.
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {string} [expand] Whether to include information about every event in the TeamForm response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public async teamsIdFormGet(id: string, acceptLanguage?: string, expand?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<TeamForm>>> {
        return TeamsApiFp(this.configuration).teamsIdFormGet(id, acceptLanguage, expand, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get information about a specific Team
     * @param {string} id Unique identifier of the resource.
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {string} [expand] Specifies additional information to include with the Team response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public async teamsIdGet(id: string, acceptLanguage?: string, expand?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Team>> {
        return TeamsApiFp(this.configuration).teamsIdGet(id, acceptLanguage, expand, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the current squad for a Team
     * @param {string} id Unique identifier of the resource.
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {string} [groupBy] Group players by a specific property
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public async teamsIdPlayersGet(id: string, acceptLanguage?: string, groupBy?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<TeamPlayer>>> {
        return TeamsApiFp(this.configuration).teamsIdPlayersGet(id, acceptLanguage, groupBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get player statistics for the current season in the Team's League
     * @param {string} id Unique identifier of the resource.
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {string} [groupBy] Group the response by a specific property
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public async teamsIdPlayersStatisticsGet(id: string, acceptLanguage?: string, groupBy?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<TeamPlayerSeasonStatistics>> {
        return TeamsApiFp(this.configuration).teamsIdPlayersStatisticsGet(id, acceptLanguage, groupBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of TournamentSeasons for which Player Statistics are available
     * @param {string} id Unique identifier of the resource.
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public async teamsIdPlayersStatisticsSeasonsGet(id: string, acceptLanguage?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<TournamentSeasonWithTournament>>> {
        return TeamsApiFp(this.configuration).teamsIdPlayersStatisticsSeasonsGet(id, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get player statistics for the current season in the Team's League
     * @param {number} seasonId Unique identifier of the TournamentSeason resource
     * @param {string} id Unique identifier of the resource.
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {string} [groupBy] Group the response by a specific property
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public async teamsIdPlayersStatisticsSeasonsSeasonIdGet(seasonId: number, id: string, acceptLanguage?: string, groupBy?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<TeamPlayerSeasonStatistics>> {
        return TeamsApiFp(this.configuration).teamsIdPlayersStatisticsSeasonsSeasonIdGet(seasonId, id, acceptLanguage, groupBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the statistics for the latest League the team participates in
     * @param {string} id Unique identifier of the resource.
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {string} [standing] Select whether to include a full league standing or just the team&#x27;s position
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public async teamsIdStatisticsLeagueGet(id: string, acceptLanguage?: string, standing?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<TeamSeasonStatistics>> {
        return TeamsApiFp(this.configuration).teamsIdStatisticsLeagueGet(id, acceptLanguage, standing, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of Teams, which are participating in a given TournamentSeason
     * @param {number} id Unique identifier of the TournamentSeason resource
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public async tournamentsSeasonsIdTeamsGet(id: number, acceptLanguage?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<PartialTeam>>> {
        return TeamsApiFp(this.configuration).tournamentsSeasonsIdTeamsGet(id, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of Teams, which are participating in a given TournamentSeasonStage
     * @param {number} id Unique identifier of the TournamentSeasonStage resource
     * @param {string} [acceptLanguage] List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public async tournamentsSeasonsStagesIdTeamsGet(id: number, acceptLanguage?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<PartialTeam>>> {
        return TeamsApiFp(this.configuration).tournamentsSeasonsStagesIdTeamsGet(id, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Manually insert team colors by team or event.
     * @param {V2TeamColors} [body] Team shirt colors data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public async v2TeamsColorsPost(body?: V2TeamColors, options?: AxiosRequestConfig) : Promise<AxiosResponse<V2TeamColors>> {
        return TeamsApiFp(this.configuration).v2TeamsColorsPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get teams list
     * @param {number} offset The number of items to skip before starting to collect the result set
     * @param {number} limit Limit the number of results returned
     * @param {string} [languageCode] Returns translated response based on the language code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public async v2TeamsGet(offset: number, limit: number, languageCode?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<TeamPageDto>> {
        return TeamsApiFp(this.configuration).v2TeamsGet(offset, limit, languageCode, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get team by id
     * @param {string} id Unique identifier of the resource.
     * @param {string} [languageCode] Returns translated response based on the language code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public async v2TeamsIdGet(id: string, languageCode?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<V2TeamProfile>> {
        return TeamsApiFp(this.configuration).v2TeamsIdGet(id, languageCode, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update Team information
     * @param {TeamEditDto} body Team information to save in persistance
     * @param {string} id Unique identifier of the resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public async v2TeamsIdPut(body: TeamEditDto, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<V2TeamProfile>> {
        return TeamsApiFp(this.configuration).v2TeamsIdPut(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Manually insert team.
     * @param {TeamEditDto} [body] TeamEditDto object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public async v2TeamsPost(body?: TeamEditDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<V2TeamProfile>> {
        return TeamsApiFp(this.configuration).v2TeamsPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
