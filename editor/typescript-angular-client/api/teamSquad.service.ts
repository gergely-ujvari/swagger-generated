/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { V2TeamSquad } from '../model/v2TeamSquad';
import { V2TeamSquadInput } from '../model/v2TeamSquadInput';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TeamSquadService {

    protected basePath = 'https://false';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Get teams squad
     * @param id Unique identifier of the resource.
     * @param memberStatus 
     * @param languageCode Returns translated response based on the language code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v2TeamsIdSquadGet(id: string, memberStatus?: 'ALL' | 'ACTIVE' | 'INACTIVE', languageCode?: string, observe?: 'body', reportProgress?: boolean): Observable<V2TeamSquad>;
    public v2TeamsIdSquadGet(id: string, memberStatus?: 'ALL' | 'ACTIVE' | 'INACTIVE', languageCode?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<V2TeamSquad>>;
    public v2TeamsIdSquadGet(id: string, memberStatus?: 'ALL' | 'ACTIVE' | 'INACTIVE', languageCode?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<V2TeamSquad>>;
    public v2TeamsIdSquadGet(id: string, memberStatus?: 'ALL' | 'ACTIVE' | 'INACTIVE', languageCode?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v2TeamsIdSquadGet.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (memberStatus !== undefined && memberStatus !== null) {
            queryParameters = queryParameters.set('memberStatus', <any>memberStatus);
        }
        if (languageCode !== undefined && languageCode !== null) {
            queryParameters = queryParameters.set('language_code', <any>languageCode);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<V2TeamSquad>(`${this.basePath}/v2/teams/${encodeURIComponent(String(id))}/squad`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Update TeamSquad members
     * @param squadMembers TeamSquad members to update. Null value for a property means no update
     * @param id Unique identifier of the resource.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v2TeamsIdSquadPatch(squadMembers: V2TeamSquadInput, id: string, observe?: 'body', reportProgress?: boolean): Observable<V2TeamSquad>;
    public v2TeamsIdSquadPatch(squadMembers: V2TeamSquadInput, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<V2TeamSquad>>;
    public v2TeamsIdSquadPatch(squadMembers: V2TeamSquadInput, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<V2TeamSquad>>;
    public v2TeamsIdSquadPatch(squadMembers: V2TeamSquadInput, id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (squadMembers === null || squadMembers === undefined) {
            throw new Error('Required parameter squadMembers was null or undefined when calling v2TeamsIdSquadPatch.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v2TeamsIdSquadPatch.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<V2TeamSquad>(`${this.basePath}/v2/teams/${encodeURIComponent(String(id))}/squad`,
            squadMembers,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
