/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class SeasonApi {
    protected basePath = 'https://false';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
     * Get the details of a season by season_id, or by tournament_id and active status
     * @param seasonId The ID of the season of interest
     * @param tournamentId The ID of the tournament whose active season is of interest
     * @param status Required only when the tournament_id parameter is provided
     * @param languageCode Returns translated response based on the language code
     */
    public v2SeasonsDetailsGet (seasonId?: string, tournamentId?: string, status?: models.'CURRENT', languageCode?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.V2SeasonDetails> {
        const localVarPath = this.basePath + '/v2/seasons/details';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        if (seasonId !== undefined) {
            queryParameters['season_id'] = seasonId;
        }

        if (tournamentId !== undefined) {
            queryParameters['tournament_id'] = tournamentId;
        }

        if (status !== undefined) {
            queryParameters['status'] = status;
        }

        if (languageCode !== undefined) {
            queryParameters['language_code'] = languageCode;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Get seasons by tournament_id, team_id and status
     * @param tournamentId Required only if no other parameters are provided
     * @param teamId Required only if no other paramenters are provided
     * @param status Required only if no other parameters are provided
     * @param languageCode Returns translated response based on the language code
     */
    public v2SeasonsGet (tournamentId?: string, teamId?: string, status?: models.'ACTIVE', languageCode?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.V2SeasonList> {
        const localVarPath = this.basePath + '/v2/seasons';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        if (tournamentId !== undefined) {
            queryParameters['tournament_id'] = tournamentId;
        }

        if (teamId !== undefined) {
            queryParameters['team_id'] = teamId;
        }

        if (status !== undefined) {
            queryParameters['status'] = status;
        }

        if (languageCode !== undefined) {
            queryParameters['language_code'] = languageCode;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Update an existing season
     * @param id Unique identifier of the resource.
     * @param name Season name
     */
    public v2SeasonsIdPut (id: string, name: models.V2TournamentSeasonUpdateInput, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.V2Season> {
        const localVarPath = this.basePath + '/v2/seasons/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v2SeasonsIdPut.');
        }

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling v2SeasonsIdPut.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: name,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * List all stages for specific season
     * @param id Unique identifier of the resource.
     * @param languageCode Returns translated response based on the language code
     */
    public v2SeasonsIdStagesGet (id: string, languageCode?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.V2SeasonStageCollection> {
        const localVarPath = this.basePath + '/v2/seasons/{id}/stages'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v2SeasonsIdStagesGet.');
        }

        if (languageCode !== undefined) {
            queryParameters['language_code'] = languageCode;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Create or update multiple stages
     * @param stages List of stages to be updated or created
     * @param id Unique identifier of the resource.
     */
    public v2SeasonsIdStagesPost (stages: Array<models.V2SeasonStage>, id: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.V2SeasonStageCollection> {
        const localVarPath = this.basePath + '/v2/seasons/{id}/stages'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'stages' is not null or undefined
        if (stages === null || stages === undefined) {
            throw new Error('Required parameter stages was null or undefined when calling v2SeasonsIdStagesPost.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v2SeasonsIdStagesPost.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: stages,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Create a new season
     * @param season Season information
     */
    public v2SeasonsPost (season: models.V2TournamentSeasonInsertInput, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.V2Season> {
        const localVarPath = this.basePath + '/v2/seasons';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'season' is not null or undefined
        if (season === null || season === undefined) {
            throw new Error('Required parameter season was null or undefined when calling v2SeasonsPost.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: season,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Permanently delete stage
     * @param id Unique identifier of the resource.
     */
    public v2StagesIdDelete (id: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/stages/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v2StagesIdDelete.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Set the current season as active and change all other seasons in the tournament to inactive
     * @param id Unique identifier of the resource.
     * @param seasonId Season unique identifier
     */
    public v2TournamentsIdSeasonsCurrentPatch (id: string, seasonId: models.V2TournamentSeasonStatusInput, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.V2Season> {
        const localVarPath = this.basePath + '/v2/tournaments/{id}/seasons/current'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v2TournamentsIdSeasonsCurrentPatch.');
        }

        // verify required parameter 'seasonId' is not null or undefined
        if (seasonId === null || seasonId === undefined) {
            throw new Error('Required parameter seasonId was null or undefined when calling v2TournamentsIdSeasonsCurrentPatch.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PATCH',
            url: localVarPath,
            data: seasonId,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
