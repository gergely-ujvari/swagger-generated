/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.OddsApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * API for accessing various kinds of football data, updated in real time.
 * Version: 0.0.1
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.OddsApi');

goog.require('API.Client.Odd');
goog.require('API.Client.OddProvider');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.OddsApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('OddsApiBasePath') ?
                   /** @type {!string} */ ($injector.get('OddsApiBasePath')) :
                   'https://false';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('OddsApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('OddsApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.OddsApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * 
 * Get available liveodds for an event
 * @param {!string} id Unique identifier of the resource.
 * @param {!string} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#39;coupon&#39; key with the odds fo building URLs.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.Odd>>}
 */
API.Client.OddsApi.prototype.eventsIdLiveoddsGet = function(id, xOddClient, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/events/{id}/liveodds'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling eventsIdLiveoddsGet');
  }
  // verify required parameter 'xOddClient' is set
  if (!xOddClient) {
    throw new Error('Missing required parameter xOddClient when calling eventsIdLiveoddsGet');
  }
  headerParams['X-Odd-Client'] = xOddClient;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get a list of odds available in the system
 * @param {!string} id Unique identifier of the resource.
 * @param {!string} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#39;coupon&#39; key with the odds fo building URLs.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.Odd>>}
 */
API.Client.OddsApi.prototype.eventsIdOddsGet = function(id, xOddClient, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/events/{id}/odds'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling eventsIdOddsGet');
  }
  // verify required parameter 'xOddClient' is set
  if (!xOddClient) {
    throw new Error('Missing required parameter xOddClient when calling eventsIdOddsGet');
  }
  headerParams['X-Odd-Client'] = xOddClient;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get available pre-game odds for an Event
 * @param {!string} id Unique identifier of the resource.
 * @param {!string} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#39;coupon&#39; key with the odds fo building URLs.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.Odd>>}
 */
API.Client.OddsApi.prototype.eventsIdPregameoddsGet = function(id, xOddClient, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/events/{id}/pregameodds'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling eventsIdPregameoddsGet');
  }
  // verify required parameter 'xOddClient' is set
  if (!xOddClient) {
    throw new Error('Missing required parameter xOddClient when calling eventsIdPregameoddsGet');
  }
  headerParams['X-Odd-Client'] = xOddClient;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get a list of liveodds available in the system
 * @param {!string} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#39;coupon&#39; key with the odds fo building URLs.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.Odd>>}
 */
API.Client.OddsApi.prototype.liveoddsGet = function(xOddClient, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/liveodds';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'xOddClient' is set
  if (!xOddClient) {
    throw new Error('Missing required parameter xOddClient when calling liveoddsGet');
  }
  headerParams['X-Odd-Client'] = xOddClient;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Return a list of OddProviders available in the system. If X-Odd-Client is specified they will be filtered and ordered by the client configuration.
 * @param {!string} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#39;coupon&#39; key with the odds fo building URLs.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.OddProvider>>}
 */
API.Client.OddsApi.prototype.oddProvidersGet = function(xOddClient, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/odd_providers';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'xOddClient' is set
  if (!xOddClient) {
    throw new Error('Missing required parameter xOddClient when calling oddProvidersGet');
  }
  headerParams['X-Odd-Client'] = xOddClient;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Returns a list of Odds
 * @param {!string} oddClient Odd client code
 * @param {!string} sportType Sport type filter
 * @param {!string} eventType Event type filter
 * @param {!Date=} opt_fromEventStartTime Return odds for Events with start_time &gt;&#x3D; from_event_start_time. RFC 3339 format
 * @param {!Date=} opt_toEventStartTime Return odds for Events with start_time &lt;&#x3D; to_event_start_time. RFC 3339 format
 * @param {!number=} opt_teamId Team ID
 * @param {!string=} opt_teamIds List for team IDs separated by commas.
 * @param {!string=} opt_eventOrder Order matching events for a specific client
 * @param {!string=} opt_matchIds List for match IDs separated by commas.
 * @param {!string=} opt_tournamentIds List for tournament IDs separated by commas.
 * @param {!string=} opt_seasonIds List for season IDs separated by commas.
 * @param {!string=} opt_oddsType Pregame or live odds selector.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.Odd>>}
 */
API.Client.OddsApi.prototype.oddsGet = function(oddClient, sportType, eventType, opt_fromEventStartTime, opt_toEventStartTime, opt_teamId, opt_teamIds, opt_eventOrder, opt_matchIds, opt_tournamentIds, opt_seasonIds, opt_oddsType, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/odds';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'oddClient' is set
  if (!oddClient) {
    throw new Error('Missing required parameter oddClient when calling oddsGet');
  }
  // verify required parameter 'sportType' is set
  if (!sportType) {
    throw new Error('Missing required parameter sportType when calling oddsGet');
  }
  // verify required parameter 'eventType' is set
  if (!eventType) {
    throw new Error('Missing required parameter eventType when calling oddsGet');
  }
  if (opt_fromEventStartTime !== undefined) {
    queryParameters['from_event_start_time'] = opt_fromEventStartTime;
  }

  if (opt_toEventStartTime !== undefined) {
    queryParameters['to_event_start_time'] = opt_toEventStartTime;
  }

  if (oddClient !== undefined) {
    queryParameters['odd_client'] = oddClient;
  }

  if (opt_teamId !== undefined) {
    queryParameters['team_id'] = opt_teamId;
  }

  if (opt_teamIds !== undefined) {
    queryParameters['team_ids'] = opt_teamIds;
  }

  if (opt_eventOrder !== undefined) {
    queryParameters['event_order'] = opt_eventOrder;
  }

  if (sportType !== undefined) {
    queryParameters['sport_type'] = sportType;
  }

  if (opt_matchIds !== undefined) {
    queryParameters['match_ids'] = opt_matchIds;
  }

  if (opt_tournamentIds !== undefined) {
    queryParameters['tournament_ids'] = opt_tournamentIds;
  }

  if (opt_seasonIds !== undefined) {
    queryParameters['season_ids'] = opt_seasonIds;
  }

  if (eventType !== undefined) {
    queryParameters['event_type'] = eventType;
  }

  if (opt_oddsType !== undefined) {
    queryParameters['odds_type'] = opt_oddsType;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Returns a list of Odd Providers which have odds available for a given Event
 * @param {!string} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#39;coupon&#39; key with the odds fo building URLs.
 * @param {!Date=} opt_fromTime Return odds for Events with start_time &gt;&#x3D; from_time. RFC 3339 format
 * @param {!Date=} opt_toTime Return odds for Events with start_time &lt;&#x3D; to_time. RFC 3339 format
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.Odd>>}
 */
API.Client.OddsApi.prototype.pregameoddsGet = function(xOddClient, opt_fromTime, opt_toTime, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/pregameodds';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'xOddClient' is set
  if (!xOddClient) {
    throw new Error('Missing required parameter xOddClient when calling pregameoddsGet');
  }
  if (opt_fromTime !== undefined) {
    queryParameters['from_time'] = opt_fromTime;
  }

  if (opt_toTime !== undefined) {
    queryParameters['to_time'] = opt_toTime;
  }

  headerParams['X-Odd-Client'] = xOddClient;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
