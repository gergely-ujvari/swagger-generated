/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.EventsApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * API for accessing various kinds of football data, updated in real time.
 * Version: 0.0.1
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.EventsApi');

goog.require('API.Client.Event');
goog.require('API.Client.EventIncident');
goog.require('API.Client.EventPlayer');
goog.require('API.Client.EventsByDate');
goog.require('API.Client.Lineup');
goog.require('API.Client.NotFoundError');
goog.require('API.Client.Odd');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.EventsApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('EventsApiBasePath') ?
                   /** @type {!string} */ ($injector.get('EventsApiBasePath')) :
                   'https://false';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('EventsApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('EventsApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.EventsApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * 
 * Get a list of events by home and away team id
 * @param {!number} homeId Filter events with home team id
 * @param {!number} awayId Filter events with away team id
 * @param {!string=} opt_acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Event>}
 */
API.Client.EventsApi.prototype.eventsByTeamsGet = function(homeId, awayId, opt_acceptLanguage, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/events/by_teams';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'homeId' is set
  if (!homeId) {
    throw new Error('Missing required parameter homeId when calling eventsByTeamsGet');
  }
  // verify required parameter 'awayId' is set
  if (!awayId) {
    throw new Error('Missing required parameter awayId when calling eventsByTeamsGet');
  }
  if (homeId !== undefined) {
    queryParameters['home_id'] = homeId;
  }

  if (awayId !== undefined) {
    queryParameters['away_id'] = awayId;
  }

  headerParams['Accept-Language'] = opt_acceptLanguage;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get a list of Events
 * @param {!string=} opt_acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
 * @param {!Date=} opt_fromTime Filter events, which have a start_time after the specified date, format is RFC 3339
 * @param {!Date=} opt_toTime Filter events, which have a start_time before the specified date, format is RFC 3339
 * @param {!string=} opt_groupBy Group events by a specified property. Event models are returned as an &#39;items&#39; array inside the property object. Can be used to return events in a more convenient format for displaying. NOTE: when using this parameter the response schema changes.
 * @param {!string=} opt_clientOrder Order matching events for a specific client
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.Event>>}
 */
API.Client.EventsApi.prototype.eventsGet = function(opt_acceptLanguage, opt_fromTime, opt_toTime, opt_groupBy, opt_clientOrder, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/events';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_fromTime !== undefined) {
    queryParameters['from_time'] = opt_fromTime;
  }

  if (opt_toTime !== undefined) {
    queryParameters['to_time'] = opt_toTime;
  }

  if (opt_groupBy !== undefined) {
    queryParameters['group_by'] = opt_groupBy;
  }

  if (opt_clientOrder !== undefined) {
    queryParameters['client_order'] = opt_clientOrder;
  }

  headerParams['Accept-Language'] = opt_acceptLanguage;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} id Unique identifier of the resource.
 * @param {!string=} opt_acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
 * @param {!string=} opt_expand Specifies additional information to include with the standing response
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Event>}
 */
API.Client.EventsApi.prototype.eventsIdGet = function(id, opt_acceptLanguage, opt_expand, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/events/{id}'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling eventsIdGet');
  }
  if (opt_expand !== undefined) {
    queryParameters['expand'] = opt_expand;
  }

  headerParams['Accept-Language'] = opt_acceptLanguage;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get a list of EventIncident for a specified Event (goal, subs, red cards, penalties, etc).
 * @param {!string} id Unique identifier of the resource.
 * @param {!string=} opt_acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
 * @param {!string=} opt_groupBy Group results by a property. If &#39;team&#39; is used the json object has &#39;home_team&#39; and &#39;away_team&#39;, each containing an array of EventIncident objects
 * @param {!string=} opt_direction Whether to sort the results by ascending or descending order
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.EventIncident>>}
 */
API.Client.EventsApi.prototype.eventsIdIncidentsGet = function(id, opt_acceptLanguage, opt_groupBy, opt_direction, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/events/{id}/incidents'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling eventsIdIncidentsGet');
  }
  if (opt_groupBy !== undefined) {
    queryParameters['group_by'] = opt_groupBy;
  }

  if (opt_direction !== undefined) {
    queryParameters['direction'] = opt_direction;
  }

  headerParams['Accept-Language'] = opt_acceptLanguage;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get lineup information for an event. Includes players, formation and coach
 * @param {!number} id Event.id for which lineups are requested
 * @param {!string=} opt_acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Lineup>}
 */
API.Client.EventsApi.prototype.eventsIdLineupsGet = function(id, opt_acceptLanguage, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/events/{id}/lineups'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling eventsIdLineupsGet');
  }
  headerParams['Accept-Language'] = opt_acceptLanguage;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get a list of players which are involved in an Event. The list can be used to build lineups for the teams
 * @param {!string} id Unique identifier of the resource.
 * @param {!string=} opt_acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
 * @param {!string=} opt_groupBy Group results by a property. If &#39;team&#39; is used the json object has &#39;home_team&#39; and &#39;away_team&#39;, each containing an array of EventPlayer objects
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.EventPlayer>>}
 */
API.Client.EventsApi.prototype.eventsIdPlayersGet = function(id, opt_acceptLanguage, opt_groupBy, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/events/{id}/players'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling eventsIdPlayersGet');
  }
  if (opt_groupBy !== undefined) {
    queryParameters['group_by'] = opt_groupBy;
  }

  headerParams['Accept-Language'] = opt_acceptLanguage;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get available pre-game odds for an Event
 * @param {!string} id Unique identifier of the resource.
 * @param {!string} xOddClient Identifies the client for which to return filtered bookmakers with affiliate URLs. Without the parameter can not sort odd_providers or provide affiliate links. Instead it will sometimes give a &#39;coupon&#39; key with the odds fo building URLs.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.Odd>>}
 */
API.Client.EventsApi.prototype.eventsIdPregameoddsGet = function(id, xOddClient, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/events/{id}/pregameodds'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling eventsIdPregameoddsGet');
  }
  // verify required parameter 'xOddClient' is set
  if (!xOddClient) {
    throw new Error('Missing required parameter xOddClient when calling eventsIdPregameoddsGet');
  }
  headerParams['X-Odd-Client'] = xOddClient;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get a list of events which are currently live
 * @param {!string=} opt_acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
 * @param {!string=} opt_groupBy Group events by a specified property. Event models are returned as an &#39;items&#39; array inside the property object. Can be used to return events in a more convenient format for displaying. NOTE: when using this parameter the response schema changes.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.Event>>}
 */
API.Client.EventsApi.prototype.eventsLiveGet = function(opt_acceptLanguage, opt_groupBy, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/events/live';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_groupBy !== undefined) {
    queryParameters['group_by'] = opt_groupBy;
  }

  headerParams['Accept-Language'] = opt_acceptLanguage;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get a list of events which have been updated since the specified timestamp
 * @param {!string=} opt_acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
 * @param {!Date=} opt_lastUpdate Filter events, have been updated after the specified date-time. By default will return updated Events during the last hour
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.Event>>}
 */
API.Client.EventsApi.prototype.eventsSinceGet = function(opt_acceptLanguage, opt_lastUpdate, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/events/since';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_lastUpdate !== undefined) {
    queryParameters['last_update'] = opt_lastUpdate;
  }

  headerParams['Accept-Language'] = opt_acceptLanguage;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get a list of matches for team/between teams
 * @param {!string=} opt_acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
 * @param {!Date=} opt_fromStartTime Return matches with start_time &gt;&#x3D; from_start_time. RFC 3339 format
 * @param {!Date=} opt_toStartTime Return matches with start_time &lt;&#x3D; from_start_time. RFC 3339 format
 * @param {!string=} opt_teamIds List for team IDs separated by commas. In case of one ID, it will return all matches for a selected team, in case of multiple - it will return matches between selected teams.
 * @param {!string=} opt_matchIds List for match IDs separated by commas.
 * @param {!string=} opt_tournamentIds List for tournament IDs separated by commas.
 * @param {!string=} opt_stageIds List for stage IDs separated by commas.
 * @param {!string=} opt_rounds List for rounds separated by commas.
 * @param {!string=} opt_seasonIds List for season IDs separated by commas.
 * @param {!string=} opt_statusTypes List of status types.
 * @param {!number=} opt_offset Results offset
 * @param {!number=} opt_limit Results limit
 * @param {!string=} opt_tournamentOrder Tournament filtering and ordering.
 * @param {!string=} opt_refereeId Filter matches by referee
 * @param {!string=} opt_venueId Filter matches by venue
 * @param {!string=} opt_statusCode Filter matches by event_status.code
 * @param {!string=} opt_sortDirection Result ordering - asc/desc
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.Event>>}
 */
API.Client.EventsApi.prototype.matchesGet = function(opt_acceptLanguage, opt_fromStartTime, opt_toStartTime, opt_teamIds, opt_matchIds, opt_tournamentIds, opt_stageIds, opt_rounds, opt_seasonIds, opt_statusTypes, opt_offset, opt_limit, opt_tournamentOrder, opt_refereeId, opt_venueId, opt_statusCode, opt_sortDirection, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/matches';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_fromStartTime !== undefined) {
    queryParameters['from_start_time'] = opt_fromStartTime;
  }

  if (opt_toStartTime !== undefined) {
    queryParameters['to_start_time'] = opt_toStartTime;
  }

  if (opt_teamIds !== undefined) {
    queryParameters['team_ids'] = opt_teamIds;
  }

  if (opt_matchIds !== undefined) {
    queryParameters['match_ids'] = opt_matchIds;
  }

  if (opt_tournamentIds !== undefined) {
    queryParameters['tournament_ids'] = opt_tournamentIds;
  }

  if (opt_stageIds !== undefined) {
    queryParameters['stage_ids'] = opt_stageIds;
  }

  if (opt_rounds !== undefined) {
    queryParameters['rounds'] = opt_rounds;
  }

  if (opt_seasonIds !== undefined) {
    queryParameters['season_ids'] = opt_seasonIds;
  }

  if (opt_statusTypes !== undefined) {
    queryParameters['status_types'] = opt_statusTypes;
  }

  if (opt_offset !== undefined) {
    queryParameters['offset'] = opt_offset;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_tournamentOrder !== undefined) {
    queryParameters['tournament_order'] = opt_tournamentOrder;
  }

  if (opt_refereeId !== undefined) {
    queryParameters['referee_id'] = opt_refereeId;
  }

  if (opt_venueId !== undefined) {
    queryParameters['venue_id'] = opt_venueId;
  }

  if (opt_statusCode !== undefined) {
    queryParameters['status_code'] = opt_statusCode;
  }

  if (opt_sortDirection !== undefined) {
    queryParameters['sort_direction'] = opt_sortDirection;
  }

  headerParams['Accept-Language'] = opt_acceptLanguage;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get a list of events which are fixtures in a given TournamentSeasonStage resource
 * @param {!number} id Unique identifier of the TournamentSeasonStage resource
 * @param {!string=} opt_round Filter the event list by a specific round
 * @param {!string=} opt_sortDirection Sort results by date in ascending or descending order
 * @param {!string=} opt_acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.EventsByDate>>}
 */
API.Client.EventsApi.prototype.tournamentsSeasonsStagesIdEventsGet = function(id, opt_round, opt_sortDirection, opt_acceptLanguage, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/tournaments/seasons/stages/{id}/events'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling tournamentsSeasonsStagesIdEventsGet');
  }
  if (opt_round !== undefined) {
    queryParameters['round'] = opt_round;
  }

  if (opt_sortDirection !== undefined) {
    queryParameters['sort_direction'] = opt_sortDirection;
  }

  headerParams['Accept-Language'] = opt_acceptLanguage;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
