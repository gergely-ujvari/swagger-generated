/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.StandingsApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * API for accessing various kinds of football data, updated in real time.
 * Version: 0.0.1
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.StandingsApi');

goog.require('API.Client.V2LeagueStandingInput');
goog.require('API.Client.V2StandingEntryRuleWrapper');
goog.require('API.Client.V2TopScorerStandingInput');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.StandingsApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('StandingsApiBasePath') ?
                   /** @type {!string} */ ($injector.get('StandingsApiBasePath')) :
                   'https://false';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('StandingsApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('StandingsApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.StandingsApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * 
 * Update a league standing table
 * @param {!V2LeagueStandingInput} standingEntries List of all entries for the standing
 * @param {!string} entity type of entity to attach standing to
 * @param {!string} id Unique identifier of the resource.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.StandingsApi.prototype.v2StandingsLeagueEntityIdPut = function(standingEntries, entity, id, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v2/standings/league/{entity}/{id}'
      .replace('{' + 'entity' + '}', String(entity))
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'standingEntries' is set
  if (!standingEntries) {
    throw new Error('Missing required parameter standingEntries when calling v2StandingsLeagueEntityIdPut');
  }
  // verify required parameter 'entity' is set
  if (!entity) {
    throw new Error('Missing required parameter entity when calling v2StandingsLeagueEntityIdPut');
  }
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling v2StandingsLeagueEntityIdPut');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: standingEntries,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Attach standing rules to a league standing
 * @param {!V2StandingEntryRuleWrapper} standingRules list of rules for every rank
 * @param {!string} entity type of entity to attach standing to
 * @param {!string} id Unique identifier of the resource.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.StandingsApi.prototype.v2StandingsLeagueEntityIdRulesPut = function(standingRules, entity, id, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v2/standings/league/{entity}/{id}/rules'
      .replace('{' + 'entity' + '}', String(entity))
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'standingRules' is set
  if (!standingRules) {
    throw new Error('Missing required parameter standingRules when calling v2StandingsLeagueEntityIdRulesPut');
  }
  // verify required parameter 'entity' is set
  if (!entity) {
    throw new Error('Missing required parameter entity when calling v2StandingsLeagueEntityIdRulesPut');
  }
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling v2StandingsLeagueEntityIdRulesPut');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: standingRules,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Update a topscorer standing table
 * @param {!V2TopScorerStandingInput} standingEntries List of all entries for the standing
 * @param {!string} entity type of entity to attach standing to
 * @param {!string} id Unique identifier of the resource.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.StandingsApi.prototype.v2StandingsTopscorerEntityIdPut = function(standingEntries, entity, id, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v2/standings/topscorer/{entity}/{id}'
      .replace('{' + 'entity' + '}', String(entity))
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'standingEntries' is set
  if (!standingEntries) {
    throw new Error('Missing required parameter standingEntries when calling v2StandingsTopscorerEntityIdPut');
  }
  // verify required parameter 'entity' is set
  if (!entity) {
    throw new Error('Missing required parameter entity when calling v2StandingsTopscorerEntityIdPut');
  }
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling v2StandingsTopscorerEntityIdPut');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: standingEntries,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
