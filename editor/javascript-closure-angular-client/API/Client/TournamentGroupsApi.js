/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.TournamentGroupsApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * API for accessing various kinds of football data, updated in real time.
 * Version: 0.0.1
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.TournamentGroupsApi');

goog.require('API.Client.NotFoundError');
goog.require('API.Client.V2TournamentGroupInsertInput');
goog.require('API.Client.V2TournamentGroupUpdateInput');
goog.require('API.Client.date');
goog.require('API.Client.v2_TournamentGroupCollection');
goog.require('API.Client.v2_TournamentGroupGetOutput');
goog.require('API.Client.v2_TournamentGroupSelection');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.TournamentGroupsApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('TournamentGroupsApiBasePath') ?
                   /** @type {!string} */ ($injector.get('TournamentGroupsApiBasePath')) :
                   'https://false';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('TournamentGroupsApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('TournamentGroupsApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.TournamentGroupsApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * 
 * List all tournaments for a given group name and their order
 * @param {!string} code Tournament group code
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.v2_TournamentGroupGetOutput>}
 */
API.Client.TournamentGroupsApi.prototype.v2TournamentsGroupsCodeGet = function(code, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v2/tournaments/groups/{code}'
      .replace('{' + 'code' + '}', String(code));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'code' is set
  if (!code) {
    throw new Error('Missing required parameter code when calling v2TournamentsGroupsCodeGet');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Update an existing tournament group
 * @param {!string} code Tournament group unique code
 * @param {!V2TournamentGroupUpdateInput} group Tournament group information
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.TournamentGroupsApi.prototype.v2TournamentsGroupsCodePut = function(code, group, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v2/tournaments/groups/{code}'
      .replace('{' + 'code' + '}', String(code));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'code' is set
  if (!code) {
    throw new Error('Missing required parameter code when calling v2TournamentsGroupsCodePut');
  }
  // verify required parameter 'group' is set
  if (!group) {
    throw new Error('Missing required parameter group when calling v2TournamentsGroupsCodePut');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: group,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!string} code Client code
 * @param {!API.Client.date} date Date in ISO 8601 format (Y-m-d)
 * @param {!Array<!API.Client.v2_TournamentGroupSelection>=} opt_matchIds Array of match ids
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.TournamentGroupsApi.prototype.v2TournamentsGroupsCodeSelectionDatePost = function(code, date, opt_matchIds, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v2/tournaments/groups/{code}/selection/{date}'
      .replace('{' + 'code' + '}', String(code))
      .replace('{' + 'date' + '}', String(date));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'code' is set
  if (!code) {
    throw new Error('Missing required parameter code when calling v2TournamentsGroupsCodeSelectionDatePost');
  }
  // verify required parameter 'date' is set
  if (!date) {
    throw new Error('Missing required parameter date when calling v2TournamentsGroupsCodeSelectionDatePost');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: opt_matchIds,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * List all tournament groups
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.v2_TournamentGroupCollection>}
 */
API.Client.TournamentGroupsApi.prototype.v2TournamentsGroupsGet = function(opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v2/tournaments/groups';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Create a new tournament group
 * @param {!V2TournamentGroupInsertInput} group Tournament group information
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.TournamentGroupsApi.prototype.v2TournamentsGroupsPost = function(group, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v2/tournaments/groups';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'group' is set
  if (!group) {
    throw new Error('Missing required parameter group when calling v2TournamentsGroupsPost');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: group,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
