/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  V2Season,
  V2SeasonStageCollection,
  V2TournamentSeasonStatusInput,
  V2TournamentSeasonInsertInput,
  V2TournamentSeasonUpdateInput,
  V2SeasonDetails,
  V2SeasonList,
} from './models';

/**
 * v2SeasonsDetailsGet - parameters interface
 */
export interface IV2SeasonsDetailsGetParams {
  seasonId?: string;
  tournamentId?: string;
  status?: 'CURRENT';
  languageCode?: string;
}

/**
 * v2SeasonsGet - parameters interface
 */
export interface IV2SeasonsGetParams {
  tournamentId?: string;
  teamId?: string;
  status?: 'ACTIVE';
  languageCode?: string;
}

/**
 * v2SeasonsIdPut - parameters interface
 */
export interface IV2SeasonsIdPutParams {
  id: string;
  name: V2TournamentSeasonUpdateInput;
}

/**
 * v2SeasonsIdStagesGet - parameters interface
 */
export interface IV2SeasonsIdStagesGetParams {
  id: string;
  languageCode?: string;
}

/**
 * v2SeasonsIdStagesPost - parameters interface
 */
export interface IV2SeasonsIdStagesPostParams {
  stages: Array<V2SeasonStage>;
  id: string;
}

/**
 * v2SeasonsPost - parameters interface
 */
export interface IV2SeasonsPostParams {
  season: V2TournamentSeasonInsertInput;
}

/**
 * v2StagesIdDelete - parameters interface
 */
export interface IV2StagesIdDeleteParams {
  id: string;
}

/**
 * v2TournamentsIdSeasonsCurrentPatch - parameters interface
 */
export interface IV2TournamentsIdSeasonsCurrentPatchParams {
  id: string;
  seasonId: V2TournamentSeasonStatusInput;
}

/**
 * SeasonApi - API class
 */
@autoinject()
export class SeasonApi extends Api {

  /**
   * Creates a new SeasonApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Get the details of a season by season_id, or by tournament_id and active status
   * @param params.seasonId The ID of the season of interest
   * @param params.tournamentId The ID of the tournament whose active season is of interest
   * @param params.status Required only when the tournament_id parameter is provided
   * @param params.languageCode Returns translated response based on the language code
   */
  async v2SeasonsDetailsGet(params: IV2SeasonsDetailsGetParams): Promise<V2SeasonDetails> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/v2/seasons/details`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'season_id': params['seasonId'],
        'tournament_id': params['tournamentId'],
        'status': params['status'],
        'language_code': params['languageCode'],
      })

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get seasons by tournament_id, team_id and status
   * @param params.tournamentId Required only if no other parameters are provided
   * @param params.teamId Required only if no other paramenters are provided
   * @param params.status Required only if no other parameters are provided
   * @param params.languageCode Returns translated response based on the language code
   */
  async v2SeasonsGet(params: IV2SeasonsGetParams): Promise<V2SeasonList> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/v2/seasons`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'tournament_id': params['tournamentId'],
        'team_id': params['teamId'],
        'status': params['status'],
        'language_code': params['languageCode'],
      })

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update an existing season
   * @param params.id Unique identifier of the resource.
   * @param params.name Season name
   */
  async v2SeasonsIdPut(params: IV2SeasonsIdPutParams): Promise<V2Season> {
    // Verify required parameters are set
    this.ensureParamIsSet('v2SeasonsIdPut', params, 'id');
    this.ensureParamIsSet('v2SeasonsIdPut', params, 'name');

    // Create URL to call
    const url = `${this.basePath}/v2/seasons/{id}`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['name'] || {}))

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * List all stages for specific season
   * @param params.id Unique identifier of the resource.
   * @param params.languageCode Returns translated response based on the language code
   */
  async v2SeasonsIdStagesGet(params: IV2SeasonsIdStagesGetParams): Promise<V2SeasonStageCollection> {
    // Verify required parameters are set
    this.ensureParamIsSet('v2SeasonsIdStagesGet', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/v2/seasons/{id}/stages`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'language_code': params['languageCode'],
      })

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create or update multiple stages
   * @param params.stages List of stages to be updated or created
   * @param params.id Unique identifier of the resource.
   */
  async v2SeasonsIdStagesPost(params: IV2SeasonsIdStagesPostParams): Promise<V2SeasonStageCollection> {
    // Verify required parameters are set
    this.ensureParamIsSet('v2SeasonsIdStagesPost', params, 'stages');
    this.ensureParamIsSet('v2SeasonsIdStagesPost', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/v2/seasons/{id}/stages`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['stages'] || {}))

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create a new season
   * @param params.season Season information
   */
  async v2SeasonsPost(params: IV2SeasonsPostParams): Promise<V2Season> {
    // Verify required parameters are set
    this.ensureParamIsSet('v2SeasonsPost', params, 'season');

    // Create URL to call
    const url = `${this.basePath}/v2/seasons`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['season'] || {}))

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Permanently delete stage
   * @param params.id Unique identifier of the resource.
   */
  async v2StagesIdDelete(params: IV2StagesIdDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('v2StagesIdDelete', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/v2/stages/{id}`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Set the current season as active and change all other seasons in the tournament to inactive
   * @param params.id Unique identifier of the resource.
   * @param params.seasonId Season unique identifier
   */
  async v2TournamentsIdSeasonsCurrentPatch(params: IV2TournamentsIdSeasonsCurrentPatchParams): Promise<V2Season> {
    // Verify required parameters are set
    this.ensureParamIsSet('v2TournamentsIdSeasonsCurrentPatch', params, 'id');
    this.ensureParamIsSet('v2TournamentsIdSeasonsCurrentPatch', params, 'seasonId');

    // Create URL to call
    const url = `${this.basePath}/v2/tournaments/{id}/seasons/current`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['seasonId'] || {}))

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

