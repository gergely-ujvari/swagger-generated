/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  CoachEditDto,
  CoachPageDto,
  CoachDto,
} from './models';

/**
 * v2CoachesGet - parameters interface
 */
export interface IV2CoachesGetParams {
  offset: number;
  limit: number;
  languageCode?: string;
}

/**
 * v2CoachesIdGet - parameters interface
 */
export interface IV2CoachesIdGetParams {
  id: string;
  languageCode?: string;
}

/**
 * v2CoachesIdPut - parameters interface
 */
export interface IV2CoachesIdPutParams {
  id: string;
  coach?: CoachEditDto;
}

/**
 * v2CoachesPost - parameters interface
 */
export interface IV2CoachesPostParams {
  coach?: CoachEditDto;
}

/**
 * CoachesApi - API class
 */
@autoinject()
export class CoachesApi extends Api {

  /**
   * Creates a new CoachesApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * List coaches with offset and limit parameters
   * @param params.offset The number of items to skip before starting to collect the result set
   * @param params.limit Limit the number of results returned
   * @param params.languageCode Returns translated response based on the language code
   */
  async v2CoachesGet(params: IV2CoachesGetParams): Promise<CoachPageDto> {
    // Verify required parameters are set
    this.ensureParamIsSet('v2CoachesGet', params, 'offset');
    this.ensureParamIsSet('v2CoachesGet', params, 'limit');

    // Create URL to call
    const url = `${this.basePath}/v2/coaches`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'language_code': params['languageCode'],
        'offset': params['offset'],
        'limit': params['limit'],
      })

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Find coach by id
   * @param params.id Unique identifier of the resource.
   * @param params.languageCode Returns translated response based on the language code
   */
  async v2CoachesIdGet(params: IV2CoachesIdGetParams): Promise<Array<CoachDto>> {
    // Verify required parameters are set
    this.ensureParamIsSet('v2CoachesIdGet', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/v2/coaches/{id}`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'language_code': params['languageCode'],
      })

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update coach information
   * @param params.id Unique identifier of the resource.
   * @param params.coach Coach information to save in persistance
   */
  async v2CoachesIdPut(params: IV2CoachesIdPutParams): Promise<CoachDto> {
    // Verify required parameters are set
    this.ensureParamIsSet('v2CoachesIdPut', params, 'id');

    // Create URL to call
    const url = `${this.basePath}/v2/coaches/{id}`
      .replace(`{${'id'}}`, encodeURIComponent(`${params['id']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['coach'] || {}))

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Store a newly created coach in storage
   * @param params.coach 
   */
  async v2CoachesPost(params: IV2CoachesPostParams): Promise<CoachDto> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/v2/coaches`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['coach'] || {}))

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

