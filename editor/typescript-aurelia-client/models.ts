/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

export interface BasicPlayerStats extends PlayerStatsExtended {
  /**
   * Player information
   */
  player: Player;
  /**
   * Player's shirt number during the season
   */
  shirtNumber?: number;
}

export interface BlacklistDto {
  id?: string;
  key?: BlacklistKeyDto;
}

export interface BlacklistKeyDto {
  type?: BlacklistKeyDtoTypeEnum;
  entity?: BlacklistKeyDtoEntityEnum;
  entityId?: string;
  context?: string;
}

/**
 * Enum for the type property.
 */
export type BlacklistKeyDtoTypeEnum = 'TRANSLATION' | 'ASSET' | 'RELATION' | 'ENTITY';

/**
 * Enum for the entity property.
 */
export type BlacklistKeyDtoEntityEnum = 'TEAM' | 'TOURNAMENT' | 'SEASON' | 'GROUP' | 'STAGE' | 'COUNTRY' | 'PLAYER' | 'COACH' | 'LINEUP_PLAYER_TYPE' | 'MATCH_STATUS' | 'VENUE' | 'REFEREE' | 'CITY' | 'PRESIDENT' | 'LINEUP' | 'MATCH' | 'ASSET' | 'STANDING_RULE' | 'ROUND_TYPE';

export interface CardlistStandingData extends StandingData {
  /**
   * Information about the Player
   */
  player: PartialPerson;
  /**
   * Number of red cards
   */
  redCards: number;
  /**
   * Total number of cards received
   */
  totalCards: number;
  /**
   * Total number of yellow cards
   */
  yellowCards: number;
  /**
   * Number of times the Player has been booked, with a first yellow card
   */
  firstYellowCards: number;
}

export interface CityDto {
  id?: string;
  name?: string;
  country?: CountryDto;
}

export interface CityEditDto {
  name?: string;
  countryId?: string;
}

export interface Coach {
  /**
   * 277x338 full body image of Person
   */
  urlImage?: string;
  /**
   * Person's nationality
   */
  country?: Country;
  /**
   * Date when the person was born
   */
  birthdate?: string;
  /**
   * Human readable first(given) name
   */
  firstName?: string;
  /**
   * Human readable last(family) name
   */
  lastName?: string;
  /**
   * True if currently active, false if retired
   */
  active?: boolean;
  /**
   * Person's gender
   */
  gender?: CoachGenderEnum;
  /**
   * Unique identifier within the system
   */
  id?: number;
  /**
   * Human readable name of the Person
   */
  name: string;
  /**
   * 150x150 face image of Person
   */
  urlThumb?: string;
}

/**
 * Enum for the gender property.
 */
export type CoachGenderEnum = 'MALE' | 'FEMALE';

export interface CoachDto {
  id?: number;
  name?: string;
  country?: CountryDto;
  birthdate?: string;
  gender?: CoachDtoGenderEnum;
}

/**
 * Enum for the gender property.
 */
export type CoachDtoGenderEnum = 'MALE' | 'FEMALE';

export interface CoachEditDto {
  name?: string;
  countryId?: string;
  birthdate?: string;
}

export interface CoachPageDto {
  coaches?: Array<CoachDto>;
  pageMeta?: PageMetaDto;
}

export interface Country {
  /**
   * Unique identifier of the object within the system
   */
  id: number;
  /**
   * Human known name of the Country
   */
  name: string;
  /**
   * 2 letter country code if available
   */
  code?: string;
  /**
   * Image of the flag for the Country
   */
  urlFlag?: string;
}

export interface CountryDto {
  id?: string;
  name?: string;
  code?: string;
}

export interface Dto {
  code?: string;
  name?: string;
  description?: string;
}

export interface Event {
  /**
   * Number of spectators at the event
   */
  spectators?: number;
  /**
   * TournamentSeasonStage in which the Event is part of. Should be used for Standing unless the Event is part of a StageGroup
   */
  tournamentSeasonStage: PartialTournamentSeasonStage;
  /**
   * Live minute ticker. Only available if the event_status.type is 'inprogress'
   */
  minute?: number;
  /**
   * Describes the group in which the Event is part of. Available if the Event is from a TournamentSeasonStage which has groups. Example: Champions League Group Stage -> Group A
   */
  stageGroup?: StageGroup;
  referee?: PartialPerson;
  venue?: Venue;
  /**
   * Number of incidents which have occured in the Event (goals, red cards, yellow cards, etc).
   */
  incidents?: number;
  /**
   * Indicates whether player lineup information is available or not
   */
  lineupAvailable?: boolean;
  /**
   * Indicates whether the event has livescore updates. If false the event will be updated after FT.
   */
  liveUpdates?: boolean;
  /**
   * Indicates whether teamstats are available for this event
   */
  teamstatsAvailable?: boolean;
  /**
   * Score information at various stages of the Event for Home Team
   */
  homeScore?: TeamScore;
  /**
   * Score information at various stages of the Event for Home Team
   */
  awayScore?: TeamScore;
  /**
   * timestamp when the current phase (1st_half, 2nd_half, et, etc) has started. Can be used for calculating the minute ticker
   */
  startedAt?: Date;
  /**
   * Unique identifier
   */
  id: number;
  /**
   * Description of the event's current status
   */
  eventStatus: EventStatus;
  /**
   * Timestamp when the event is scheduled to start
   */
  startTime: Date;
  /**
   * Goals scored by the home team
   */
  goalHome?: number;
  /**
   * Goals scored by the away team
   */
  goalAway?: number;
  /**
   * Penalties scored by the home team. Available only if the game goes to penalty shootouts
   */
  penaltyHome?: number;
  /**
   * Penalties scored by the away team. Available only if the game goes to penalty shootouts
   */
  penaltyAway?: number;
  /**
   * Goals scored by home team over 1 or more legs. Available only if the tie has mutliple legs
   */
  aggHome?: number;
  /**
   * Goals scored by home team over 1 or more legs. Available only if the tie has mutliple legs
   */
  aggAway?: number;
  /**
   * Home Team
   */
  homeTeam: PartialTeam;
  /**
   * Away Team
   */
  awayTeam: PartialTeam;
}

export interface EventIncident {
  /**
   * Unique identifier
   */
  id: number;
  /**
   * Identifier of the event during which the incident occurred
   */
  eventId: number;
  /**
   * The type of incident
   */
  type: EventIncidentTypeEnum;
  /**
   * Whether the incident is related to the home or away team. true if home team
   */
  homeTeam: boolean;
  /**
   * The minute when the incident occured
   */
  minute: number;
  /**
   * Id of the team for which the incident is related
   */
  teamId?: number;
  /**
   * Updated home team score if the incident changes the scoreline (penalty, goal, own_goal, etc)
   */
  goalHome?: number;
  /**
   * Updated away team score  if the incident changes the scoreline (penalty, goal, own_goal, etc)
   */
  goalAway?: number;
  /**
   * Player who is the main actor in the incident: Goal Scorer, player who received yellow card. If type == 'substitution' this is the player coming off
   */
  player?: PartialPerson;
  /**
   * Player who is of secondary importance to the incident: Player who assisted a goal. If type == 'substitution' this is the player coming on
   */
  relPlayer?: PartialPerson;
  /**
   * Whether the incident has been deleted or not - a disallowed goal for example
   */
  deleted?: boolean;
  /**
   * If there are multiple incidents with the same minute, this indicates how they are sorted
   */
  sortorder?: number;
}

/**
 * Enum for the type property.
 */
export type EventIncidentTypeEnum = 'penalty_shootout_scored' | 'yellow_card_red' | 'penalty_shootout_missed' | 'substitution' | 'goal' | 'red_card' | 'penalty_miss' | 'yellow_card' | 'penalty_goal' | 'own_goal';

export interface EventPlayer {
  /**
   * Unique identifier
   */
  id: number;
  /**
   * Object describing the player in the lineup
   */
  player: PartialPerson;
  /**
   * Object describing the type of lineup
   */
  eventPlayerType: EventPlayerType;
  /**
   * Whether the player is from the home or the away team
   */
  homeTeam: boolean;
  /**
   * Number indicating the player's vertical position on the field. 1 = Goalkeeper, 2-5 = Defender, 6-9 = Midfielder, 10-11 = Forward, where 5 is an offensive defender, 9 is an offensive midfielder, etc.
   */
  positionX?: number;
  /**
   * Number indicating the player's horizontal position on the field. Ranges from 1-9, where 1 = furthest right, 9 = furthest left.
   */
  positionY?: number;
  /**
   * Number 1-11 indicating the player's position in the lineup. 1 = goalkeeper, 2 = defender furthest right.
   */
  positionNumber?: number;
  /**
   * The shirt number the player is wearing
   */
  shirtNumber?: number;
}

export interface EventPlayerSubOn {
  /**
   * Id of the player that comes on
   */
  playerId?: number;
  /**
   * Name of the player that comes on
   */
  playerName: string;
  /**
   * The minute when the substitued occured
   */
  elapsed: number;
}

export interface EventPlayerType {
  /**
   * Indicates what part of the lineup the player belongs to
   */
  category: EventPlayerTypeCategoryEnum;
  /**
   * Human readable name of the type
   */
  name: string;
  /**
   * Internal unique code to identify the type
   */
  code: string;
}

/**
 * Enum for the category property.
 */
export type EventPlayerTypeCategoryEnum = 'miss' | 'sub' | 'start' | 'unknown';

export interface EventStatus {
  /**
   * Status classification
   */
  type: EventStatusTypeEnum;
  /**
   * Human readable name describing the status, can be translated
   */
  name: string;
  /**
   * Human readable short name describing the status, can be translated
   */
  shortName?: string;
  /**
   * Unique string used to identify the status
   */
  code: EventStatusCodeEnum;
}

/**
 * Enum for the type property.
 */
export type EventStatusTypeEnum = 'finished' | 'cancelled' | 'notstarted' | 'interrupted' | 'inprogress';

/**
 * Enum for the code property.
 */
export type EventStatusCodeEnum = 'finished' | 'not_started' | '1st_half' | '2nd_half';

export interface EventTeamStats {
  /**
   * The Team whose stats are represented in the object
   */
  team: PartialTeam;
  /**
   * Whether the stats are for the home or the away team
   */
  homeTeam: boolean;
  /**
   * Object containing the team statistics
   */
  statistics: TeamStatistics;
  /**
   * Identifier of the event the stat is related to
   */
  eventId?: number;
}

export interface EventsByDate {
  date: string;
  items: Array<Event>;
}

export interface LanguageDto {
  code?: string;
}

export interface LeagueStandingData extends StandingData {
  /**
   * Information about the Team (and TeamForm) in the current rank
   */
  team?: PartialTeamWithForm;
  /**
   * Games won
   */
  wins: number;
  /**
   * Games drawn
   */
  draws: number;
  /**
   * Total games played
   */
  played: number;
  /**
   * Number of points
   */
  points: number;
  /**
   * Games lost
   */
  defeits: number;
  /**
   * Total number of goals scored
   */
  goalsFor: number;
  /**
   * Total number of goals conceded
   */
  goalsAgainst: number;
}

export interface Lineup {
  /**
   * Id of the event for which the lineup is for
   */
  eventId: number;
  /**
   * Whether the lineup is officially confirmed. Should be considered probable if != true
   */
  confirmed?: boolean;
  /**
   * Lineup information for home team
   */
  homeTeam: TeamLineup;
  /**
   * Lineup information for away team
   */
  awayTeam: TeamLineup;
}

export interface ListVenueDto {
  id?: string;
  name?: string;
  country?: CountryDto;
  city?: CityDto;
  profile?: any;
}

export interface LiveCommentaryOutputDto {
  type?: string;
  templateText?: string;
  autoText?: string;
  elapsed?: number;
  details?: Array<any>;
  incidentTimestamp?: Date;
}

export interface NotFoundError {
  message?: string;
}

export interface Odd {
  /**
   * Reference to the OddProvider which provides the betting offers
   */
  oddProvider?: OddProvider;
  /**
   * Id of the event for which odds are provided
   */
  eventId?: number;
}

export interface OddProvider {
  /**
   * Resource identifier
   */
  id: number;
  /**
   * Human readable name of the OddProvider
   */
  name: string;
  /**
   * Homepage of the OddProvider
   */
  url?: string;
  /**
   * Counrty where the OddProvider is based
   */
  country?: Country;
  urlLogo?: string;
}

export interface OutputDto {
  player: PartialPerson;
  team: PartialTeam;
  season: TournamentSeason;
  tournament: Tournament;
}

export interface PageMetaDto {
  total?: number;
  offset?: number;
  limit?: number;
}

export interface PartialEvent {
  /**
   * Unique identifier
   */
  id: number;
  /**
   * Description of the event's current status
   */
  eventStatus: EventStatus;
  /**
   * Timestamp when the event is scheduled to start
   */
  startTime: Date;
  /**
   * Goals scored by the home team
   */
  goalHome: number;
  /**
   * Goals scored by the away team
   */
  goalAway: number;
  /**
   * Penalties scored by the home team. Available only if the game goes to penalty shootouts
   */
  penaltyHome?: number;
  /**
   * Penalties scored by the away team. Available only if the game goes to penalty shootouts
   */
  penaltyAway?: number;
  /**
   * Goals scored by home team over 1 or more legs. Available only if the tie has mutliple legs
   */
  aggHome?: number;
  /**
   * Goals scored by home team over 1 or more legs. Available only if the tie has mutliple legs
   */
  aggAway?: number;
  /**
   * Home Team
   */
  homeTeam: PartialTeam;
  /**
   * Away Team
   */
  awayTeam: PartialTeam;
}

export interface PartialPerson {
  /**
   * Unique identifier within the system
   */
  id: number;
  /**
   * Human readable name of the Person
   */
  name: string;
  /**
   * 150x150 face image of Person
   */
  urlThumb?: string;
  /**
   * 277x338 full body image of Person
   */
  urlImage?: string;
}

export interface PartialTeam {
  /**
   * Whether the team is a football club(Barcelona) or national team(Spain)
   */
  national?: boolean;
  /**
   * Unique identifier of the Team within the system
   */
  id: number;
  /**
   * Human readable name of the team
   */
  name: string;
  /**
   * 3 character name of team
   */
  threeLetterCode?: string;
  /**
   * Manually inserted short name of team
   */
  shortName?: string;
  /**
   * If present and = true, the team can be one of two teams. This occurs in cup competitions when some games are still not played
   */
  undecided?: boolean;
  /**
   * Team gender, MALE, FEMALE or null
   */
  gender?: PartialTeamGenderEnum;
  urlLogo?: string;
  type?: PartialTeamTypeEnum;
}

/**
 * Enum for the gender property.
 */
export type PartialTeamGenderEnum = 'MALE' | 'FEMALE';

/**
 * Enum for the type property.
 */
export type PartialTeamTypeEnum = 'placeholder' | 'club' | 'national';

export interface PartialTeamWithForm extends PartialTeam {
  /**
   * Form guide for the Team if available and requested as an option
   */
  form?: Array<TeamForm>;
}

export interface PartialTournamentSeasonStage {
  /**
   * Unique identifier
   */
  id: number;
  /**
   * Human readable name of the TournamentSeasonStage
   */
  name: string;
  /**
   * Whether the stage is a cup such as Champions League Knockout stage, World Cup Final stages, etc
   */
  cup: boolean;
  /**
   * Id of the TournamentSeason in which the stage is part of
   */
  tournamentSeasonId: number;
  /**
   * Id of the Tournament in whicth the stage is part of
   */
  tournamentId: number;
  /**
   * Reference to the Country where the TournamentSeasonStage is held
   */
  country: Country;
  /**
   * Indicates which confederation the stage is part of (for World Cup qualif.)
   */
  confederation?: string;
}

export interface Player {
  /**
   * Playing position of the player
   */
  position?: PlayerPositionEnum;
  /**
   * Person's nationality
   */
  country: Country;
  /**
   * Date when the person was born
   */
  birthdate?: string;
  /**
   * Human readable first(given) name
   */
  firstName?: string;
  /**
   * Human readable last(family) name
   */
  lastName?: string;
  /**
   * True if currently active, false if retired
   */
  active?: boolean;
  /**
   * Person's gender
   */
  gender?: PlayerGenderEnum;
  /**
   * Unique identifier within the system
   */
  id: number;
  /**
   * Human readable name of the Person
   */
  name: string;
  /**
   * 150x150 face image of Person
   */
  urlThumb?: string;
  /**
   * 277x338 full body image of Person
   */
  urlImage?: string;
}

/**
 * Enum for the position property.
 */
export type PlayerPositionEnum = 'keeper' | 'defender' | 'midfielder' | 'forward';

/**
 * Enum for the gender property.
 */
export type PlayerGenderEnum = 'MALE' | 'FEMALE';

export interface PlayerDto {
  id?: string;
  name?: string;
  country?: CountryDto;
  active?: boolean;
  birthdate?: string;
  birthCity?: CityDto;
  profile?: PlayerProfileDto;
  social?: PlayerEditSocialDto;
  position?: string;
  gender?: PlayerDtoGenderEnum;
}

/**
 * Enum for the gender property.
 */
export type PlayerDtoGenderEnum = 'MALE' | 'FEMALE';

export interface PlayerEditDto {
  name?: string;
  countryId?: string;
  active?: boolean;
  birthdate?: string;
  birthCityId?: string;
  profile?: PlayerProfileDto;
  social?: PlayerEditSocialDto;
  position?: string;
}

export interface PlayerEditSocialDto {
  web?: string;
  twitterId?: string;
  facebookId?: string;
  instagramId?: string;
  wikipediaId?: string;
  youtubeChannelId?: string;
}

export interface PlayerPageDto {
  players?: Array<PlayerDto>;
  pageMeta?: PageMetaDto;
}

export interface PlayerProfile extends Player {
  /**
   * Information about the current league the player is in
   */
  currentLeague?: TournamentSeasonWithTournament;
  /**
   * Information about the club the Player is currently playing in
   */
  club?: PlayerTeam;
  /**
   * Information about the national team the Player is currently playing in
   */
  nationalTeam?: PlayerTeam;
  /**
   * Display name of the player position
   */
  positionDisplay?: string;
}

export interface PlayerProfileDto {
  height?: string;
  weight?: string;
}

export interface PlayerStatisticItem {
  name?: string;
  value?: string;
}

export interface PlayerStatistics extends PlayerStatsExtended {
  tournamentSeason: TournamentSeasonWithTournament;
  /**
   * Player Information
   */
  player: PartialPerson;
  /**
   * Team for which the Player competes
   */
  team: PartialTeam;
  /**
   * Shirt number of the player during the TournamentSeason
   */
  shirtNumber?: number;
  /**
   * Position of the player during the TournamentSeason
   */
  position?: string;
}

export interface PlayerStatsBasic {
  /**
   * Total goals scored
   */
  goals: number;
  /**
   * Total games played
   */
  played: number;
  /**
   * Total minutes played
   */
  minutes: number;
  /**
   * Number of red cards
   */
  redCards: number;
  /**
   * Number of yellow cards
   */
  yellowCards: number;
  /**
   * Number of assists
   */
  assists?: number;
}

export interface PlayerStatsExtended extends PlayerStatsBasic {
  /**
   * Goals conceded (Goalkeeper)
   */
  conceded?: number;
  /**
   * Games started as a substitute
   */
  substitute?: number;
  /**
   * Games without allowing a goal (Goalkeeper)
   */
  cleansheets?: number;
  /**
   * Games where the player has come on
   */
  substituteIn?: number;
  /**
   * Games where the player has come off
   */
  substituteOut?: number;
  /**
   * Minutes played after coming on as a substitute
   */
  minutesSubstitute?: number;
}

export interface PlayerTeam extends TeamPlayerData {
  /**
   * Whether the person is currently part of the Team
   */
  active?: boolean;
  /**
   * Date when the Person joined the team
   */
  startDate?: string;
  /**
   * Date when the Person left the team (if any)
   */
  endDate?: string;
  /**
   * Reference to the Team the player participates in
   */
  team: PartialTeam;
}

export interface RefereeDto {
  id?: string;
  name?: string;
  country?: CountryDto;
  birthdate?: string;
  active?: boolean;
  gender?: RefereeDtoGenderEnum;
}

/**
 * Enum for the gender property.
 */
export type RefereeDtoGenderEnum = 'MALE' | 'FEMALE';

export interface RefereeEditDto {
  name?: string;
  countryId?: string;
  birthdate?: Date;
  active?: boolean;
}

export interface RefereePageDto {
  referees?: Array<RefereeDto>;
  pageMeta?: PageMetaDto;
}

export interface Round {
  round: string;
  startTime: Date;
  endTime: Date;
  events?: Array<PartialEvent>;
}

export interface SeasonDto {
  id: number;
  name: string;
  active: boolean;
}

export interface StageDto {
  id: number;
  name: string;
  cup: boolean;
  season: SeasonDto;
  tournament: TournamentDto;
  startDate?: string;
  endDate?: string;
  live?: boolean;
  stageGroups?: number;
}

export interface StageGroup {
  /**
   * Unique resource identifier
   */
  id: number;
  /**
   * Human readable name of the Group
   */
  name: string;
  /**
   * The order in the stage of the group
   */
  orderInStage?: number;
}

export interface StageGroupWithStanding extends StageGroup {
  /**
   * League Standing for the StageGroup if available and requested
   */
  standing?: Array<LeagueStandingData>;
}

export interface StageGroupWithStandingTournamentSeasonStage extends StageGroupWithStanding {
  /**
   * Reference to the TournamentSeasonStage the group is a part of
   */
  tournamentSeasonStage: TournamentSeasonStage;
}

export interface StandingData {
  /**
   * Position of the team/player in the standing
   */
  rank: number;
  /**
   * Reference to the team in the Standing (for league) or the Team for which the Player competes (topscorer, cardlist)
   */
  team: PartialTeam;
  /**
   * List of applicable rules to the current standing rank
   */
  rules?: Array<StandingRule>;
}

export interface StandingRule {
  /**
   * Human readable name describing the standing rule
   */
  name: string;
  /**
   * Unique code identifying the standing rule
   */
  code: string;
  /**
   * Type classification of the standing rule
   */
  type: StandingRuleTypeEnum;
  /**
   * Detailed description of the standing rule
   */
  description?: string;
  id?: number;
}

/**
 * Enum for the type property.
 */
export type StandingRuleTypeEnum = 'promotion' | 'promotion_playoff' | 'relegation' | 'relegation_playoff' | 'tiertwo' | 'tiertwo_playoff';

export interface Team {
  /**
   * Reference to the Country where the team is based.
   */
  country: Country;
  /**
   * Name of the president of the club
   */
  president?: string;
  /**
   * Year the club was founded
   */
  founded?: number;
  venue?: Venue;
  coach?: Coach;
  /**
   * Information about the League the team currently participates in
   */
  currentLeague?: TournamentSeasonWithTournament;
  /**
   * The next event the team is playing in
   */
  nextEvent?: Event;
  /**
   * Various social links for the team
   */
  social?: any;
  urlHomeKit?: string;
  urlAwayKit?: string;
  /**
   * Image of the team squad
   */
  urlSquadImage?: string;
  /**
   * Whether the team is a football club(Barcelona) or national team(Spain)
   */
  national: boolean;
  /**
   * Unique identifier of the Team within the system
   */
  id: number;
  /**
   * Human readable name of the team
   */
  name: string;
  /**
   * 3 character name of team
   */
  threeLetterCode?: string;
  /**
   * Manually inserted short name of team
   */
  shortName?: string;
  /**
   * If present and = true, the team can be one of two teams. This occurs in cup competitions when some games are still not played
   */
  undecided?: boolean;
  /**
   * Team gender, MALE, FEMALE or null
   */
  gender?: TeamGenderEnum;
  /**
   * Form guide for the Team if available and requested as an option
   */
  form?: Array<TeamForm>;
}

/**
 * Enum for the gender property.
 */
export type TeamGenderEnum = 'MALE' | 'FEMALE';

export interface TeamEditDto {
  name: string;
  threeLetterCode?: string;
  shortName?: string;
  type: string;
  countryId: string;
  venueId?: string;
  presidentId?: string;
  coachId?: string;
  social?: TeamSocialDto;
  founded?: number;
  gender?: string;
}

export interface TeamForm {
  /**
   * Information about the Event in the Form guide
   */
  event?: PartialEvent;
  /**
   * Indicates outcome of the event for the given team
   */
  outcome: TeamFormOutcomeEnum;
}

/**
 * Enum for the outcome property.
 */
export type TeamFormOutcomeEnum = 'W' | 'D' | 'L';

export interface TeamLineup {
  /**
   * resource id of the team
   */
  teamId?: number;
  /**
   * List of players involved for the team
   */
  players?: Array<EventPlayer>;
  /**
   * Information about the team's Coach
   */
  coach?: PartialPerson;
  /**
   * Lineup formation
   */
  formation?: string;
}

export interface TeamPageDto {
  teams?: Array<V2Team>;
  pageMeta?: PageMetaDto;
}

export interface TeamPlayer extends TeamPlayerData {
  /**
   * Whether the person is currently part of the Team
   */
  active?: boolean;
  /**
   * Date when the Person joined the team
   */
  startDate?: string;
  /**
   * Date when the Person left the team (if any)
   */
  endDate?: string;
  /**
   * Information for the Player
   */
  player: Player;
}

export interface TeamPlayerData {
  /**
   * Shirt number which the player wears for the team
   */
  shirtNumber?: number;
  /**
   * Whether the player is on loan with the team
   */
  loan?: boolean;
  /**
   * Whether the person is currently part of the Team
   */
  active: boolean;
  /**
   * Date when the Person joined the team
   */
  startDate?: string;
  /**
   * Date when the Person left the team (if any)
   */
  endDate?: string;
}

export interface TeamPlayerSeasonStatistics extends TournamentSeasonWithTournament {
  items?: Array<TeamPlayerStatistics>;
}

export interface TeamPlayerStatistics extends PlayerStatsExtended {
  player: Player;
  team?: Team;
  shirtNumber?: number;
}

export interface TeamScore {
  /**
   * Score at the halftime break
   */
  halfTime?: number;
  /**
   * Score in regular time + injury time
   */
  ordinaryTime?: number;
  /**
   * Score in extra time, does not include the score for ordinary time
   */
  extraTime?: number;
  /**
   * Score in penalty shootout, does not include ordinarytime or extratime
   */
  penaltyShootout?: number;
}

export interface TeamSeasonStatistics {
  teamId?: number;
  /**
   * Latest league stage during the TournamentSeason
   */
  latestLeagueStage?: TournamentSeasonStage;
  /**
   * Player statistics for the TournamentSeason
   */
  playerStatistics?: Array<BasicPlayerStats>;
}

export interface TeamSocialDto {
  web?: string;
  twitterId?: string;
  facebookId?: string;
  instagramId?: string;
  wikipediaId?: string;
}

export interface TeamStatistics {
  /**
   * Number of keys passes completed
   */
  pass?: number;
  /**
   * Percentage of time the team possess the ball
   */
  possession: number;
  /**
   * Number of goals scored
   */
  goals: number;
  /**
   * Number of corners
   */
  corners: number;
  /**
   * Number of crosses
   */
  crosses?: number;
  /**
   * Number of offsides
   */
  offside: number;
  /**
   * Shots on that have hit target
   */
  shotsOn: number;
  /**
   * Number of shots that have been blocked by an opposition player
   */
  shotsBlocked: number;
  /**
   * Shots outside the target
   */
  shotsOff: number;
  /**
   * Number of throw ins taken
   */
  throwIn?: number;
  /**
   * Number of goal kicks taken
   */
  goalKicks?: number;
  /**
   * Number of treatments to injuries
   */
  treatments?: number;
  /**
   * Total numer of yellow cards
   */
  yellowCards?: number;
  /**
   * Number of substitutions
   */
  substitutions?: number;
  /**
   * Number of counter attacks
   */
  counterAttacks?: number;
  /**
   * Total number of fouls committed by the Team
   */
  foulsCommitted: number;
}

export interface TopscorerStandingData extends StandingData {
  /**
   * Information about the Player
   */
  player: PartialPerson;
  /**
   * Number of goals scored
   */
  goals: number;
  /**
   * Total games played
   */
  played?: number;
  /**
   * Number of assists
   */
  assists?: number;
  /**
   * Total number of minutes played
   */
  minutes?: number;
  /**
   * Number of goals scored from the penalty spot
   */
  penalties?: number;
  /**
   * Number of red cards
   */
  redCards?: number;
  /**
   * Number of times the player scored first for the team
   */
  scoredFirst?: number;
  /**
   * Number of yellow cards
   */
  yellowCards?: number;
}

/**
 * Resource representing a Football Tournament such as A Grupa, Premier League, Champions League, World Cup, etc. Does not represent a specific season such as Premier League 2015/2016.
 */
export interface Tournament {
  /**
   * Unique Resource identifier of the Tournament
   */
  id: number;
  /**
   * Human readable name of the Tournament
   */
  name: string;
  /**
   * Country where the Tournament is held
   */
  country: Country;
  /**
   * Whether or not the Tournament is a regional league such as the La Liga, A PFG, EPL.
   */
  regionalLeague?: boolean;
  /**
   * Represents the order position in a custom client based sorted list
   */
  clientSortorder?: number;
  urlLogo?: string;
  /**
   * Shows if the tournament is Cup or a League
   */
  type?: any;
  /**
   * Shows if the the teams in the tournament are Male or Female
   */
  gender?: any;
  /**
   * Shows if the tournament is Regional or International
   */
  region?: any;
}

/**
 * Resource representing a Football Tournament such as A Grupa, Premier League, Champions League, World Cup, etc. Does not represent a specific season such as Premier League 2015/2016.
 */
export interface TournamentDto {
  id: number;
  name: string;
  country: V1CountryDto;
  regionalLeague?: boolean;
  urlLogo?: string;
}

export interface TournamentItemDto {
  tournamentId?: string;
  sortOrder?: number;
}

export interface TournamentSeason {
  /**
   * Unique identifier of the object
   */
  id: number;
  /**
   * Human readable name of the TournamentSeason
   */
  name: string;
  /**
   * Whether the season is currently running or whether it is finished
   */
  active: boolean;
}

export interface TournamentSeasonStage {
  /**
   * Date when the first game of the stage is held
   */
  startDate?: string;
  /**
   * Date when the final game of the stage is held
   */
  endDate?: string;
  /**
   * Whether the stage is a qualification stage to a main Tournrament (Champions League Qualification)
   */
  qualification?: boolean;
  /**
   * Whether the API has live scores for the stage
   */
  live?: boolean;
  /**
   * Number of groups in the stage. Only available if the stage has groups (Champions League Group Stage)
   */
  stageGroups?: number;
  /**
   * League standing data if available and if cup = false
   */
  standing?: Array<LeagueStandingData>;
  /**
   * List of rounds in the Stage if cup = true
   */
  rounds?: Array<Round>;
  /**
   * Unique identifier
   */
  id: number;
  /**
   * Human readable name of the TournamentSeasonStage
   */
  name: string;
  /**
   * Whether the stage is a cup such as Champions League Knockout stage, World Cup Final stages, etc
   */
  cup: boolean;
  /**
   * Id of the TournamentSeason in which the stage is part of
   */
  tournamentSeasonId: number;
  /**
   * Id of the Tournament in whicth the stage is part of
   */
  tournamentId: number;
  /**
   * Reference to the Country where the TournamentSeasonStage is held
   */
  country: Country;
  /**
   * Indicates which confederation the stage is part of (for World Cup qualif.)
   */
  confederation?: string;
}

export interface TournamentSeasonStageWithStandingGroups extends TournamentSeasonStage {
  /**
   * Unique identifier
   */
  id?: number;
  /**
   * Human readable name of the TournamentSeasonStage
   */
  name?: string;
  /**
   * Whether the stage is a cup such as Champions League Knockout stage, World Cup Final stages, etc
   */
  cup?: boolean;
  /**
   * Id of the TournamentSeason in which the stage is part of
   */
  tournamentSeasonId?: number;
  /**
   * Id of the Tournament in whicth the stage is part of
   */
  tournamentId?: number;
  /**
   * Reference to the Country where the TournamentSeasonStage is held
   */
  country?: Country;
  /**
   * Indicates which confederation the stage is part of (for World Cup qualif.)
   */
  confederation?: string;
  /**
   * List of StageGroup objects in the TournamentSeasonStage. Available if the property stage_groups exists
   */
  groups?: Array<StageGroupWithStanding>;
}

export interface TournamentSeasonWithStages extends TournamentSeasonWithTournament {
  /**
   * List of stages which take place during the TournamentSeason. If the parent Tournament has regional_league = true, this will usually be one stage with cup = false.
   */
  stages: Array<TournamentSeasonStage>;
}

export interface TournamentSeasonWithTournament extends TournamentSeason {
  /**
   * Reference to the parent Tournament
   */
  tournament: Tournament;
}

export interface TournamentWithSeasons extends Tournament {
  /**
   * List of seasons available for the Tournament
   */
  seasons: Array<TournamentSeason>;
}

export interface TranslationContentDto {
  name?: string;
  threeLetterCode?: string;
  shortName?: string;
}

export interface TranslationDto {
  key?: TranslationKeyDto;
  content?: TranslationContentDto;
}

export interface TranslationEntityDto {
  entity?: TranslationEntityDtoEntityEnum;
}

/**
 * Enum for the entity property.
 */
export type TranslationEntityDtoEntityEnum = 'LINEUP_PLAYER_TYPE' | 'COACH' | 'VENUE' | 'TOURNAMENT' | 'TEAM' | 'COUNTRY' | 'MATCH_STATUS' | 'STAGE' | 'PLAYER' | 'REFEREE' | 'CITY' | 'PRESIDENT' | 'STANDING_RULE' | 'GROUP' | 'SEASON' | 'ROUND_TYPE';

export interface TranslationKeyDto {
  entity?: TranslationKeyDtoEntityEnum;
  entityId?: string;
  language?: string;
}

/**
 * Enum for the entity property.
 */
export type TranslationKeyDtoEntityEnum = 'LINEUP_PLAYER_TYPE' | 'COACH' | 'VENUE' | 'TOURNAMENT' | 'TEAM' | 'COUNTRY' | 'MATCH_STATUS' | 'STAGE' | 'PLAYER' | 'REFEREE' | 'CITY' | 'PRESIDENT' | 'STANDING_RULE' | 'GROUP' | 'SEASON' | 'ROUND_TYPE';

export interface V1CountryDto {
  id: number;
  name: string;
  urlFlag?: string;
}

export interface V2ActiveClubsInput {
  clubs?: Array<V2ActiveTeamInput>;
}

export interface V2ActiveTeamInput {
  teamId?: string;
  contractType?: string;
  startDate?: string;
  shirtNumber?: number;
}

export interface V2Asset {
  entity?: string;
  entityId?: string;
  type?: string;
  path?: string;
  contextType?: string;
  contextId?: string;
}

export interface V2AssetCollection {
}

export interface V2AssetDeleteInput {
  entity?: string;
  entityId?: string;
  type?: string;
  contextType?: string;
  contextId?: string;
}

export interface V2AssetInput {
  entity?: string;
  entityId?: string;
  type?: string;
  path?: string;
  contextType?: string;
  contextId?: string;
}

export interface V2City {
  id?: string;
  name?: string;
  country?: V2Country;
}

export interface V2Coach {
  id?: string;
  name?: string;
  country?: V2Country;
  birthdate?: string;
  gender?: V2CoachGenderEnum;
}

/**
 * Enum for the gender property.
 */
export type V2CoachGenderEnum = 'MALE' | 'FEMALE';

export interface V2Country {
  id?: string;
  name?: string;
  code?: string;
}

export interface V2Group {
  id?: string;
  name?: string;
  orderInStage?: number;
}

export interface V2KnockoutEdgeRound {
  name?: string;
}

export interface V2KnockoutGroup {
  id?: string;
  order?: number;
  teams?: Array<V2KnockoutTeam>;
  matches?: Array<V2KnockoutMatch>;
  childObjectId?: string;
}

export interface V2KnockoutMatch {
  id?: string;
  kickoffTime?: Date;
  score?: V2MatchScore;
  homeTeamId?: string;
  awayTeamId?: string;
}

export interface V2KnockoutRound {
  name?: string;
  groups?: Array<V2KnockoutGroup>;
}

export interface V2KnockoutScheme {
  startRound?: V2KnockoutEdgeRound;
  endRound?: V2KnockoutEdgeRound;
  smallFinal?: boolean;
  stage?: V2MatchStage;
  rounds?: Array<V2KnockoutRound>;
}

export interface V2KnockoutTeam {
  id?: string;
  name?: string;
  threeLetterCode?: string;
  gender?: string;
  type?: string;
}

export interface V2LeagueEntryInput {
  rank?: number;
  teamId?: string;
  played?: number;
  wins?: number;
  draws?: number;
  losses?: number;
  points?: number;
  goalsFor?: number;
  goalsAgainst?: number;
}

export interface V2LeagueStandingInput {
  entries?: Array<V2LeagueEntryInput>;
}

export interface V2Lineup {
  matchId?: string;
  status?: V2LineupStatusEnum;
  homeTeam?: V2LineupTeamDto;
  awayTeam?: V2LineupTeamDto;
}

/**
 * Enum for the status property.
 */
export type V2LineupStatusEnum = 'CONFIRMED' | 'UNCONFIRMED' | 'NOT_AVAILABLE';

export interface V2LineupInput {
  status?: V2LineupInputStatusEnum;
  homeTeam?: V2LineupTeamInput;
  awayTeam?: V2LineupTeamInput;
}

/**
 * Enum for the status property.
 */
export type V2LineupInputStatusEnum = 'CONFIRMED' | 'UNCONFIRMED';

export interface V2LineupPlayerDto {
  type?: any;
  player?: V2Player;
  positionX?: number;
  positionY?: number;
  shirtNumber?: number;
}

export interface V2LineupPlayerInput {
  typeId?: string;
  playerId?: string;
  positionX?: number;
  positionY?: number;
  shirtNumber?: number;
}

export interface V2LineupTeamDto {
  formation?: string;
  coach?: V2Coach;
  teamId?: string;
  players?: Array<V2LineupPlayerDto>;
}

export interface V2LineupTeamInput {
  formation?: string;
  coachId?: string;
  players?: Array<V2LineupPlayerInput>;
}

export interface V2MappingDto {
  provider?: string;
  entityType?: V2MappingDtoEntityTypeEnum;
  domainId?: string;
  providerId?: string;
}

/**
 * Enum for the entityType property.
 */
export type V2MappingDtoEntityTypeEnum = 'PLAYER' | 'TEAM' | 'COACH' | 'MATCH' | 'SEASON' | 'VENUE' | 'REFEREE' | 'TOURNAMENT' | 'CITY' | 'PRESIDENT' | 'STAGE' | 'GROUP' | 'COUNTRY' | 'ODD_PROVIDER';

export interface V2MappingRequestDto {
  entityType: V2MappingRequestDtoEntityTypeEnum;
  providerId: string;
}

/**
 * Enum for the entityType property.
 */
export type V2MappingRequestDtoEntityTypeEnum = 'PLAYER' | 'TEAM' | 'COACH' | 'MATCH' | 'SEASON' | 'VENUE' | 'REFEREE' | 'TOURNAMENT' | 'CITY' | 'PRESIDENT' | 'STAGE' | 'GROUP' | 'COUNTRY' | 'ODD_PROVIDER';

export interface V2MappingRequestsDto {
  provider?: string;
  mappingRequests: Array<V2MappingRequestDto>;
}

export interface V2MappingsDto {
  mappings?: Array<V2MappingDto>;
}

export interface V2Match {
  id?: string;
  status?: V2MatchStatus;
  kickoffTime?: Date;
  stage?: V2MatchStage;
  season?: V2Season;
  group?: V2Group;
  round?: V2MatchRound;
  homeTeam?: V2MatchTeamDto;
  awayTeam?: V2MatchTeamDto;
  referees?: Array<V2MatchReferee>;
  venue?: V2MatchVenue;
  spectators?: number;
  coverage?: V2MatchCoverageEnum;
  minute?: V2MatchMinute;
  phaseStartedAt?: Date;
  finishedAt?: Date;
  score?: V2MatchScore;
}

/**
 * Enum for the coverage property.
 */
export type V2MatchCoverageEnum = 'LIVE' | 'NOT_LIVE' | 'UNKNOWN';

export interface V2MatchEvent {
  id?: string;
  matchId?: string;
  typeCode?: V2MatchEventTypeCodeEnum;
  teamPosition?: V2MatchEventTeamPositionEnum;
  minute?: number;
  teamId?: string;
  primaryPlayer?: V2Player;
  secondaryPlayer?: V2Player;
  score?: V2TeamScore;
}

/**
 * Enum for the typeCode property.
 */
export type V2MatchEventTypeCodeEnum = 'YELLOW_RED_CARD' | 'PENALTY_SHOOTOUT_MISSED' | 'PENALTY_SHOOTOUT_SCORED' | 'SUBSTITUTION' | 'GOAL' | 'RED_CARD' | 'PENALTY_MISS' | 'YELLOW_CARD' | 'ASSIST' | 'PENALTY_GOAL' | 'OWN_GOAL';

/**
 * Enum for the teamPosition property.
 */
export type V2MatchEventTeamPositionEnum = 'HOME' | 'AWAY';

export interface V2MatchEventInput {
  id?: string;
  typeCode?: V2MatchEventInputTypeCodeEnum;
  teamPosition?: V2MatchEventInputTeamPositionEnum;
  minute?: number;
  primaryPlayerId?: string;
  secondaryPlayerId?: string;
  /**
   * Property is used to determine the order of events, if two or more events have the same minute
   */
  sortOrder?: number;
}

/**
 * Enum for the typeCode property.
 */
export type V2MatchEventInputTypeCodeEnum = 'YELLOW_RED_CARD' | 'PENALTY_SHOOTOUT_MISSED' | 'PENALTY_SHOOTOUT_SCORED' | 'SUBSTITUTION' | 'GOAL' | 'RED_CARD' | 'PENALTY_MISS' | 'YELLOW_CARD' | 'ASSIST' | 'PENALTY_GOAL' | 'OWN_GOAL';

/**
 * Enum for the teamPosition property.
 */
export type V2MatchEventInputTeamPositionEnum = 'HOME' | 'AWAY';

export interface V2MatchEventInputWrapper {
  events?: Array<V2MatchEventInput>;
}

export interface V2MatchEventProfile {
  events?: Array<V2MatchEvent>;
}

export interface V2MatchInput {
  statusId?: string;
  kickoffTime?: Date;
  stageId?: string;
  homeTeamId?: string;
  awayTeamId?: string;
  roundKey?: string;
  groupId?: string;
  venueId?: string;
  referees?: Array<V2MatchRefereeInput>;
  score?: V2MatchScoreInput;
  spectators?: number;
  coverage?: V2MatchInputCoverageEnum;
  finishedAt?: Date;
  phaseStartedAt?: Date;
}

/**
 * Enum for the coverage property.
 */
export type V2MatchInputCoverageEnum = 'LIVE' | 'NOT_LIVE' | 'UNKNOWN';

export interface V2MatchMinute {
  regularTime?: number;
  injuryTime?: number;
}

export interface V2MatchReferee {
  id?: string;
  name?: string;
  role?: V2MatchRefereeRoleEnum;
  gender?: V2MatchRefereeGenderEnum;
}

/**
 * Enum for the role property.
 */
export type V2MatchRefereeRoleEnum = 'REFEREE';

/**
 * Enum for the gender property.
 */
export type V2MatchRefereeGenderEnum = 'MALE' | 'FEMALE';

export interface V2MatchRefereeInput {
  refereeId?: string;
  role?: V2MatchRefereeInputRoleEnum;
}

/**
 * Enum for the role property.
 */
export type V2MatchRefereeInputRoleEnum = 'REFEREE';

export interface V2MatchRound {
  key?: string;
  name?: string;
  type?: string;
}

export interface V2MatchScore {
  total?: V2TeamScore;
  halfTime?: V2TeamScore;
  regularTime?: V2TeamScore;
  extraTime?: V2TeamScore;
  penaltyShootout?: V2TeamScore;
  aggregate?: V2TeamScore;
}

export interface V2MatchScoreInput {
  total?: V2TeamScoreInput;
  halfTime?: V2TeamScoreInput;
  regularTime?: V2TeamScoreInput;
  extraTime?: V2TeamScoreInput;
  penaltyShootout?: V2TeamScoreInput;
  aggregate?: V2TeamScoreInput;
}

export interface V2MatchStage {
  id?: string;
  name?: string;
  type?: V2MatchStageTypeEnum;
  startDate?: string;
  endDate?: string;
  orderInSeason?: number;
  coverage?: string;
  /**
   * Available only for /v2/seasons/{id}/stages
   */
  status?: V2MatchStageStatusEnum;
}

/**
 * Enum for the type property.
 */
export type V2MatchStageTypeEnum = 'GROUP' | 'LEAGUE' | 'KNOCK_OUT';

/**
 * Enum for the status property.
 */
export type V2MatchStageStatusEnum = 'ACTIVE' | 'INACTIVE';

export interface V2MatchStatus {
  id?: string;
  name?: string;
  shortName?: string;
  type?: V2MatchStatusTypeEnum;
  code?: string;
}

/**
 * Enum for the type property.
 */
export type V2MatchStatusTypeEnum = 'FINISHED' | 'NOT_STARTED' | 'LIVE' | 'INTERRUPTED' | 'CANCELLED' | 'UNKNOWN';

export interface V2MatchTeamDto {
  id?: string;
  name?: string;
  threeLetterCode?: string;
  gender?: string;
  shortName?: string;
  type?: V2MatchTeamDtoTypeEnum;
  shirtColor?: string;
}

/**
 * Enum for the type property.
 */
export type V2MatchTeamDtoTypeEnum = 'PLACEHOLDER' | 'NATIONAL' | 'CLUB';

export interface V2MatchVenue {
  id?: string;
  name?: string;
}

export interface V2Matches {
  matches?: Array<V2Match>;
  pageMeta?: PageMetaDto;
}

export interface V2MatchesLivescore {
  matches?: Array<V2Match>;
}

export interface V2Player {
  id: string;
  name: string;
  country: V2Country;
  active?: boolean;
  birthdate?: string;
  birthCity?: V2City;
  profile?: PlayerProfileDto;
  social?: PlayerEditSocialDto;
  position?: string;
  gender?: V2PlayerGenderEnum;
}

/**
 * Enum for the gender property.
 */
export type V2PlayerGenderEnum = 'MALE' | 'FEMALE';

export interface V2PlayerActiveClub {
  team?: V2Team;
  contractType?: string;
  startDate?: string;
  shirtNumber?: string;
  status?: V2PlayerActiveClubStatusEnum;
}

/**
 * Enum for the status property.
 */
export type V2PlayerActiveClubStatusEnum = 'ACTIVE' | 'INACTIVE';

export interface V2PlayerProfile {
  id?: string;
  name?: string;
  country?: V2Country;
  active?: boolean;
  birthdate?: string;
  birthCity?: V2City;
  profile?: PlayerProfileDto;
  social?: PlayerEditSocialDto;
  position?: string;
  teams?: Array<V2PlayerActiveClub>;
  gender?: V2PlayerProfileGenderEnum;
}

/**
 * Enum for the gender property.
 */
export type V2PlayerProfileGenderEnum = 'MALE' | 'FEMALE';

export interface V2PlayerSeasonStatisticOutput {
  player?: V2Player;
  teams?: Array<V2Team>;
  season?: V2Season;
  statistics?: Array<V2StatisticItem>;
}

export interface V2PlayerSeasonStatisticOutputCollection {
  statistics?: Array<V2PlayerSeasonStatisticOutput>;
}

export interface V2PlayerStatisticInput {
  playerId?: string;
  matchId?: string;
  teamId?: string;
  statistics?: Array<PlayerStatisticItem>;
  origin?: string;
}

export interface V2PlayerStatisticOutput {
  playerId?: string;
  matchId?: string;
  teamId?: string;
  statistics?: any;
  origin?: string;
}

export interface V2PostVenues {
  name: string;
  countryId: string;
  cityId?: string;
  profile?: VenueProfileDto;
}

export interface V2President {
  id?: string;
  name?: string;
}

export interface V2PresidentInput {
  name?: string;
}

export interface V2PresidentUpdate {
  name?: string;
}

export interface V2PutVenues {
  id?: string;
  name: string;
  countryId: string;
  cityId?: string;
  profile?: VenueProfileDto;
}

export interface V2RoundTypes {
  rounds?: Array<V2RoundWithStatus>;
}

export interface V2RoundWithStatus {
  startDate?: string;
  endDate?: string;
  /**
   * Not available at endpoint /v2/rounds
   */
  status?: string;
  id?: string;
  key?: string;
  name?: string;
  type?: string;
}

export interface V2Season {
  id?: string;
  name?: string;
  tournament?: V2Tournament;
  status?: any;
}

export interface V2SeasonDetails {
  season?: V2Season;
  stages?: Array<V2StageDetails>;
}

export interface V2SeasonList {
  seasons: Array<V2Season>;
}

export interface V2SeasonStage {
  id?: string;
  name?: string;
  type?: V2SeasonStageTypeEnum;
  startDate?: string;
  endDate?: string;
  orderInSeason?: number;
  coverage?: string;
}

/**
 * Enum for the type property.
 */
export type V2SeasonStageTypeEnum = 'GROUP' | 'LEAGUE' | 'KNOCK_OUT';

export interface V2SeasonStageCollection {
  stages?: Array<V2MatchStage>;
}

export interface V2SquadPlayer {
  player: V2Player;
  status: V2SquadPlayerStatusEnum;
  contractType?: V2SquadPlayerContractTypeEnum;
  startDate?: string;
  endDate?: string;
  shirtNumber?: number;
}

/**
 * Enum for the status property.
 */
export type V2SquadPlayerStatusEnum = 'ACTIVE' | 'INACTIVE';

/**
 * Enum for the contractType property.
 */
export type V2SquadPlayerContractTypeEnum = 'PERMANENT' | 'LOAN' | 'UNKNOWN';

export interface V2SquadPlayerInput {
  playerId?: string;
  status?: V2SquadPlayerInputStatusEnum;
  contractType?: V2SquadPlayerInputContractTypeEnum;
  startDate?: string;
  endDate?: string;
  shirtNumber?: number;
}

/**
 * Enum for the status property.
 */
export type V2SquadPlayerInputStatusEnum = 'ACTIVE' | 'INACTIVE';

/**
 * Enum for the contractType property.
 */
export type V2SquadPlayerInputContractTypeEnum = 'PERMANENT' | 'LOAN' | 'UNKNOWN';

export interface V2StageDetails {
  stage?: V2MatchStage;
  rounds?: Array<V2RoundWithStatus>;
}

export interface V2StageGroup {
  id?: string;
  name?: string;
  orderInStage?: number;
}

export interface V2StageGroupCollection {
  groups?: Array<V2Group>;
}

export interface V2StageTeamInput {
  teamId?: string;
}

export interface V2StandingEntryRuleInput {
  standingRuleId?: string;
  rank?: number;
}

export interface V2StandingEntryRuleWrapper {
  rules?: Array<V2StandingEntryRuleInput>;
}

export interface V2StatisticItem {
  name?: string;
  value?: string;
}

export interface V2Team {
  id: string;
  name: string;
  threeLetterCode?: string;
  shortName?: string;
  type: V2TeamTypeEnum;
  country: V2Country;
  venue?: V2VenuesGetId;
  social?: TeamSocialDto;
  founded?: number;
  gender?: V2TeamGenderEnum;
}

/**
 * Enum for the type property.
 */
export type V2TeamTypeEnum = 'PLACEHOLDER' | 'NATIONAL' | 'CLUB';

/**
 * Enum for the gender property.
 */
export type V2TeamGenderEnum = 'MALE' | 'FEMALE';

export interface V2TeamColors {
  entityType: string;
  entityId: string;
  colors: Array<any>;
}

export interface V2TeamProfile {
  id?: string;
  name?: string;
  threeLetterCode?: string;
  shortName?: string;
  type?: string;
  founded?: number;
  country?: V2Country;
  venue?: V2VenuesGetId;
  social?: TeamSocialDto;
  coach?: V2Coach;
  president?: V2President;
  gender?: V2TeamProfileGenderEnum;
  activeSeasons?: Array<V2Season>;
  shirtColors?: Array<any>;
}

/**
 * Enum for the gender property.
 */
export type V2TeamProfileGenderEnum = 'MALE' | 'FEMALE';

export interface V2TeamScore {
  home?: number;
  away?: number;
}

export interface V2TeamScoreInput {
  home?: number;
  away?: number;
}

export interface V2TeamSquad {
  team: V2Team;
  players: Array<V2SquadPlayer>;
}

export interface V2TeamSquadInput {
  players?: Array<V2SquadPlayerInput>;
}

export interface V2TopScorerEntryInput {
  teamId?: string;
  playerId?: string;
  rank?: number;
  goals?: number;
  played?: number;
  assists?: number;
  scoredFirst?: number;
  minutes?: number;
  penalties?: number;
  yellowCards?: number;
  redCards?: number;
}

export interface V2TopScorerStandingInput {
  entries?: Array<V2TopScorerEntryInput>;
}

export interface V2Tournament {
  id?: string;
  name?: string;
  country?: V2Country;
  gender?: V2TournamentGenderEnum;
  type?: V2TournamentTypeEnum;
  region?: V2TournamentRegionEnum;
}

/**
 * Enum for the gender property.
 */
export type V2TournamentGenderEnum = 'MALE' | 'FEMALE';

/**
 * Enum for the type property.
 */
export type V2TournamentTypeEnum = 'CUP' | 'LEAGUE';

/**
 * Enum for the region property.
 */
export type V2TournamentRegionEnum = 'DOMESTIC' | 'INTERNATIONAL';

export interface V2TournamentGroupCollection {
  groups?: Array<Dto>;
}

export interface V2TournamentGroupGetOutput {
  code?: string;
  name?: string;
  description?: string;
  tournaments?: Array<V2TournamentItemOutput>;
}

export interface V2TournamentGroupInsertInput {
  code?: string;
  name?: string;
  description?: string;
  tournaments?: Array<TournamentItemDto>;
}

export interface V2TournamentGroupSelection {
  matchId?: string;
}

export interface V2TournamentGroupUpdateInput {
  name?: string;
  description?: string;
  tournaments?: Array<TournamentItemDto>;
}

export interface V2TournamentItemOutput {
  tournament?: V2Tournament;
  sortOrder?: number;
}

export interface V2TournamentSeasonInsertInput {
  tournamentId?: string;
  name?: string;
}

export interface V2TournamentSeasonStatusInput {
  seasonId?: string;
}

export interface V2TournamentSeasonUpdateInput {
  name?: string;
}

export interface V2Venues {
  id?: string;
  name: string;
  country: V2Country;
  city?: V2City;
  profile?: VenueProfileDto;
}

export interface V2VenuesGetId {
  id?: string;
  name?: string;
  country?: V2Country;
  city?: V2City;
  profile?: VenueProfileDto;
}

export interface V2VenuesList {
  venues?: Array<ListVenueDto>;
  pageMeta?: PageMetaDto;
}

export interface V2VenuesPut {
  id?: string;
  name: string;
  country: V2Country;
  city?: V2City;
  profile?: VenueProfileDto;
}

export interface Venue {
  /**
   * Unique identifier in the system
   */
  id: number;
  /**
   * Human readable name of the Venue
   */
  name: string;
  /**
   * Country where the stadium is located
   */
  country?: Country;
  city?: string;
  /**
   * 600x450 image of the Venue
   */
  urlImage?: string;
  /**
   * Total capacity of the stadium
   */
  capacity?: number;
  /**
   * Latitude coordinate of the stadium's location
   */
  lat?: number;
  /**
   * Longitude coordinate of the stadium's location
   */
  lng?: number;
}

export interface VenueDto {
  id?: string;
  name?: string;
  country?: CountryDto;
  city?: CityDto;
  profile?: VenueProfileDto;
}

export interface VenueEditDto {
  name: string;
  countryId: string;
  cityId?: string;
  profile?: VenueProfileDto;
}

export interface VenuePageDto {
  venues?: Array<VenueDto>;
  pageMeta?: PageMetaDto;
}

export interface VenueProfileDto {
  lat?: number;
  lng?: number;
  capacity?: number;
}

