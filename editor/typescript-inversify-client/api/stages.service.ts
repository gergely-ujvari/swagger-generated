/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { NotFoundError } from '../model/notFoundError';
import { StageDto } from '../model/stageDto';
import { V2StageGroup } from '../model/v2StageGroup';
import { V2StageGroupCollection } from '../model/v2StageGroupCollection';
import { V2StageTeamInput } from '../model/v2StageTeamInput';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class StagesService {
    @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration;
    @inject('IApiHttpClient') private httpClient: IHttpClient;



    /**
     * 
     * Listing for Stages resources
     * @param teamId Filter stages by a team which is participating in the stage
     * @param tournamentIds CSV list of tournament.id values to filter stages
     * @param acceptLanguage List of acceptable human languages for response. https://en.wikipedia.org/wiki/Content_negotiation
     
     */
    public stagesGet(teamId?: number, tournamentIds?: string, acceptLanguage?: string, observe?: 'body', headers?: Headers): Observable<Array<StageDto>>;
    public stagesGet(teamId?: number, tournamentIds?: string, acceptLanguage?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<StageDto>>>;
    public stagesGet(teamId?: number, tournamentIds?: string, acceptLanguage?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (teamId !== undefined) {
            queryParameters.push('teamId='+encodeURIComponent(String(teamId)));
        }
        if (tournamentIds !== undefined) {
            queryParameters.push('tournamentIds='+encodeURIComponent(String(tournamentIds)));
        }

        if (acceptLanguage) {
            headers['Accept-Language'] = String(acceptLanguage);
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json; charset=utf-8';

        const response: Observable<HttpResponse<Array<StageDto>>> = this.httpClient.get(`${this.APIConfiguration.basePath}/stages?${queryParameters.join('&')}` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * 
     * Permanently delete group
     * @param id Unique identifier of the resource.
     
     */
    public v2GroupsIdDelete(id: string, observe?: 'body', headers?: Headers): Observable<any>;
    public v2GroupsIdDelete(id: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public v2GroupsIdDelete(id: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!id){
            throw new Error('Required parameter id was null or undefined when calling v2GroupsIdDelete.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json; charset=utf-8';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.APIConfiguration.basePath}/v2/groups/${encodeURIComponent(String(id))}` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * 
     * List all groups for specific stage
     * @param id Unique identifier of the resource.
     * @param languageCode Returns translated response based on the language code
     
     */
    public v2StagesIdGroupsGet(id: string, languageCode?: string, observe?: 'body', headers?: Headers): Observable<V2StageGroupCollection>;
    public v2StagesIdGroupsGet(id: string, languageCode?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<V2StageGroupCollection>>;
    public v2StagesIdGroupsGet(id: string, languageCode?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!id){
            throw new Error('Required parameter id was null or undefined when calling v2StagesIdGroupsGet.');
        }

        let queryParameters: string[] = [];
        if (languageCode !== undefined) {
            queryParameters.push('languageCode='+encodeURIComponent(String(languageCode)));
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<V2StageGroupCollection>> = this.httpClient.get(`${this.APIConfiguration.basePath}/v2/stages/${encodeURIComponent(String(id))}/groups?${queryParameters.join('&')}` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * 
     * Create or update multiple groups
     * @param groups List of groups to be updated or created
     * @param id Unique identifier of the resource.
     
     */
    public v2StagesIdGroupsPost(groups: Array<V2StageGroup>, id: string, observe?: 'body', headers?: Headers): Observable<V2StageGroupCollection>;
    public v2StagesIdGroupsPost(groups: Array<V2StageGroup>, id: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<V2StageGroupCollection>>;
    public v2StagesIdGroupsPost(groups: Array<V2StageGroup>, id: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!groups){
            throw new Error('Required parameter groups was null or undefined when calling v2StagesIdGroupsPost.');
        }

        if (!id){
            throw new Error('Required parameter id was null or undefined when calling v2StagesIdGroupsPost.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<V2StageGroupCollection>> = this.httpClient.post(`${this.APIConfiguration.basePath}/v2/stages/${encodeURIComponent(String(id))}/groups`, groups as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * 
     * Replace teams in stage
     * @param id Unique identifier of the resource.
     * @param teamId List of team ids
     
     */
    public v2StagesIdTeamsPut(id: string, teamId: Array<V2StageTeamInput>, observe?: 'body', headers?: Headers): Observable<any>;
    public v2StagesIdTeamsPut(id: string, teamId: Array<V2StageTeamInput>, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public v2StagesIdTeamsPut(id: string, teamId: Array<V2StageTeamInput>, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!id){
            throw new Error('Required parameter id was null or undefined when calling v2StagesIdTeamsPut.');
        }

        if (!teamId){
            throw new Error('Required parameter teamId was null or undefined when calling v2StagesIdTeamsPut.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json; charset=utf-8';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.APIConfiguration.basePath}/v2/stages/${encodeURIComponent(String(id))}/teams`, teamId as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }

}
