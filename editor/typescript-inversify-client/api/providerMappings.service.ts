/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { MappingRequest } from '../model/mappingRequest';
import { V2MappingDto } from '../model/v2MappingDto';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class ProviderMappingsService {
    @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration;
    @inject('IApiHttpClient') private httpClient: IHttpClient;



    /**
     * 
     * Bulk find provider to internal ID mappings by their provider ID and entity type.
     * @param mappingRequest Data entity provider name and array of mapping requests
     
     */
    public v2MappingsSearchPost(mappingRequest?: MappingRequest, observe?: 'body', headers?: Headers): Observable<Array<V2MappingDto>>;
    public v2MappingsSearchPost(mappingRequest?: MappingRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<V2MappingDto>>>;
    public v2MappingsSearchPost(mappingRequest?: MappingRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json; charset=utf-8';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<Array<V2MappingDto>>> = this.httpClient.post(`${this.APIConfiguration.basePath}/v2/mappings/search`, mappingRequest as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }

}
