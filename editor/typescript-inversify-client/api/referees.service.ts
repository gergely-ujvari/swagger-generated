/**
 * Football API
 * API for accessing various kinds of football data, updated in real time.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { NotFoundError } from '../model/notFoundError';
import { RefereeDto } from '../model/refereeDto';
import { RefereeEditDto } from '../model/refereeEditDto';
import { RefereePageDto } from '../model/refereePageDto';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class RefereesService {
    @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration;
    @inject('IApiHttpClient') private httpClient: IHttpClient;



    /**
     * 
     * List referees with offset and limit parameters
     * @param offset The number of items to skip before starting to collect the result set
     * @param limit Limit the number of results returned
     * @param seasonIds Filter referees which have refereed matches in the specified CSV season_ids
     * @param languageCode Returns translated response based on the language code
     
     */
    public v2RefereesGet(offset: number, limit: number, seasonIds?: string, languageCode?: string, observe?: 'body', headers?: Headers): Observable<RefereePageDto>;
    public v2RefereesGet(offset: number, limit: number, seasonIds?: string, languageCode?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<RefereePageDto>>;
    public v2RefereesGet(offset: number, limit: number, seasonIds?: string, languageCode?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!offset){
            throw new Error('Required parameter offset was null or undefined when calling v2RefereesGet.');
        }

        if (!limit){
            throw new Error('Required parameter limit was null or undefined when calling v2RefereesGet.');
        }

        let queryParameters: string[] = [];
        if (seasonIds !== undefined) {
            queryParameters.push('seasonIds='+encodeURIComponent(String(seasonIds)));
        }
        if (offset !== undefined) {
            queryParameters.push('offset='+encodeURIComponent(String(offset)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (languageCode !== undefined) {
            queryParameters.push('languageCode='+encodeURIComponent(String(languageCode)));
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json; charset=utf-8';

        const response: Observable<HttpResponse<RefereePageDto>> = this.httpClient.get(`${this.APIConfiguration.basePath}/v2/referees?${queryParameters.join('&')}` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * 
     * Get referee by id
     * @param id Unique identifier of the resource.
     * @param languageCode Returns translated response based on the language code
     
     */
    public v2RefereesIdGet(id: string, languageCode?: string, observe?: 'body', headers?: Headers): Observable<RefereeDto>;
    public v2RefereesIdGet(id: string, languageCode?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<RefereeDto>>;
    public v2RefereesIdGet(id: string, languageCode?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!id){
            throw new Error('Required parameter id was null or undefined when calling v2RefereesIdGet.');
        }

        let queryParameters: string[] = [];
        if (languageCode !== undefined) {
            queryParameters.push('languageCode='+encodeURIComponent(String(languageCode)));
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json; charset=utf-8';

        const response: Observable<HttpResponse<RefereeDto>> = this.httpClient.get(`${this.APIConfiguration.basePath}/v2/referees/${encodeURIComponent(String(id))}?${queryParameters.join('&')}` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * 
     * Update referee information
     * @param id Unique identifier of the resource.
     * @param referee Referee information to save in persistance
     
     */
    public v2RefereesIdPut(id: string, referee?: RefereeEditDto, observe?: 'body', headers?: Headers): Observable<RefereeDto>;
    public v2RefereesIdPut(id: string, referee?: RefereeEditDto, observe?: 'response', headers?: Headers): Observable<HttpResponse<RefereeDto>>;
    public v2RefereesIdPut(id: string, referee?: RefereeEditDto, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!id){
            throw new Error('Required parameter id was null or undefined when calling v2RefereesIdPut.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<RefereeDto>> = this.httpClient.put(`${this.APIConfiguration.basePath}/v2/referees/${encodeURIComponent(String(id))}`, referee as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * 
     * Store a newly created referee in storage
     * @param referee 
     
     */
    public v2RefereesPost(referee?: RefereeEditDto, observe?: 'body', headers?: Headers): Observable<RefereeDto>;
    public v2RefereesPost(referee?: RefereeEditDto, observe?: 'response', headers?: Headers): Observable<HttpResponse<RefereeDto>>;
    public v2RefereesPost(referee?: RefereeEditDto, observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<RefereeDto>> = this.httpClient.post(`${this.APIConfiguration.basePath}/v2/referees`, referee as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }

}
